
001_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080077b4  080077b4  000087b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800795c  0800795c  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800795c  0800795c  0000895c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007964  08007964  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007964  08007964  00008964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007968  08007968  00008968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800796c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145d4  20000060  080079cc  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014634  080079cc  00009634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013def  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c0  00000000  00000000  0001ce7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0001ff40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eec  00000000  00000000  000212a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024510  00000000  00000000  00022194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a86  00000000  00000000  000466a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd023  00000000  00000000  0005d12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a14d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005650  00000000  00000000  0013a190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0013f7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800779c 	.word	0x0800779c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	0800779c 	.word	0x0800779c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f14 	.word	0x20012f14
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b988 	b.w	8000678 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	468e      	mov	lr, r1
 8000388:	4604      	mov	r4, r0
 800038a:	4688      	mov	r8, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d962      	bls.n	800045c <__udivmoddi4+0xdc>
 8000396:	fab2 f682 	clz	r6, r2
 800039a:	b14e      	cbz	r6, 80003b0 <__udivmoddi4+0x30>
 800039c:	f1c6 0320 	rsb	r3, r6, #32
 80003a0:	fa01 f806 	lsl.w	r8, r1, r6
 80003a4:	fa20 f303 	lsr.w	r3, r0, r3
 80003a8:	40b7      	lsls	r7, r6
 80003aa:	ea43 0808 	orr.w	r8, r3, r8
 80003ae:	40b4      	lsls	r4, r6
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003bc:	0c23      	lsrs	r3, r4, #16
 80003be:	fb0e 8811 	mls	r8, lr, r1, r8
 80003c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003c6:	fb01 f20c 	mul.w	r2, r1, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003d4:	f080 80ea 	bcs.w	80005ac <__udivmoddi4+0x22c>
 80003d8:	429a      	cmp	r2, r3
 80003da:	f240 80e7 	bls.w	80005ac <__udivmoddi4+0x22c>
 80003de:	3902      	subs	r1, #2
 80003e0:	443b      	add	r3, r7
 80003e2:	1a9a      	subs	r2, r3, r2
 80003e4:	b2a3      	uxth	r3, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003f6:	459c      	cmp	ip, r3
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x8e>
 80003fa:	18fb      	adds	r3, r7, r3
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	f080 80d6 	bcs.w	80005b0 <__udivmoddi4+0x230>
 8000404:	459c      	cmp	ip, r3
 8000406:	f240 80d3 	bls.w	80005b0 <__udivmoddi4+0x230>
 800040a:	443b      	add	r3, r7
 800040c:	3802      	subs	r0, #2
 800040e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000412:	eba3 030c 	sub.w	r3, r3, ip
 8000416:	2100      	movs	r1, #0
 8000418:	b11d      	cbz	r5, 8000422 <__udivmoddi4+0xa2>
 800041a:	40f3      	lsrs	r3, r6
 800041c:	2200      	movs	r2, #0
 800041e:	e9c5 3200 	strd	r3, r2, [r5]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d905      	bls.n	8000436 <__udivmoddi4+0xb6>
 800042a:	b10d      	cbz	r5, 8000430 <__udivmoddi4+0xb0>
 800042c:	e9c5 0100 	strd	r0, r1, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	4608      	mov	r0, r1
 8000434:	e7f5      	b.n	8000422 <__udivmoddi4+0xa2>
 8000436:	fab3 f183 	clz	r1, r3
 800043a:	2900      	cmp	r1, #0
 800043c:	d146      	bne.n	80004cc <__udivmoddi4+0x14c>
 800043e:	4573      	cmp	r3, lr
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0xc8>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 8105 	bhi.w	8000652 <__udivmoddi4+0x2d2>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb6e 0203 	sbc.w	r2, lr, r3
 800044e:	2001      	movs	r0, #1
 8000450:	4690      	mov	r8, r2
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0e5      	beq.n	8000422 <__udivmoddi4+0xa2>
 8000456:	e9c5 4800 	strd	r4, r8, [r5]
 800045a:	e7e2      	b.n	8000422 <__udivmoddi4+0xa2>
 800045c:	2a00      	cmp	r2, #0
 800045e:	f000 8090 	beq.w	8000582 <__udivmoddi4+0x202>
 8000462:	fab2 f682 	clz	r6, r2
 8000466:	2e00      	cmp	r6, #0
 8000468:	f040 80a4 	bne.w	80005b4 <__udivmoddi4+0x234>
 800046c:	1a8a      	subs	r2, r1, r2
 800046e:	0c03      	lsrs	r3, r0, #16
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	b280      	uxth	r0, r0
 8000476:	b2bc      	uxth	r4, r7
 8000478:	2101      	movs	r1, #1
 800047a:	fbb2 fcfe 	udiv	ip, r2, lr
 800047e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000486:	fb04 f20c 	mul.w	r2, r4, ip
 800048a:	429a      	cmp	r2, r3
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x11e>
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x11c>
 8000496:	429a      	cmp	r2, r3
 8000498:	f200 80e0 	bhi.w	800065c <__udivmoddi4+0x2dc>
 800049c:	46c4      	mov	ip, r8
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004a4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ac:	fb02 f404 	mul.w	r4, r2, r4
 80004b0:	429c      	cmp	r4, r3
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x144>
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0x142>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f200 80ca 	bhi.w	8000656 <__udivmoddi4+0x2d6>
 80004c2:	4602      	mov	r2, r0
 80004c4:	1b1b      	subs	r3, r3, r4
 80004c6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004ca:	e7a5      	b.n	8000418 <__udivmoddi4+0x98>
 80004cc:	f1c1 0620 	rsb	r6, r1, #32
 80004d0:	408b      	lsls	r3, r1
 80004d2:	fa22 f706 	lsr.w	r7, r2, r6
 80004d6:	431f      	orrs	r7, r3
 80004d8:	fa0e f401 	lsl.w	r4, lr, r1
 80004dc:	fa20 f306 	lsr.w	r3, r0, r6
 80004e0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004e8:	4323      	orrs	r3, r4
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	fa1f fc87 	uxth.w	ip, r7
 80004f2:	fbbe f0f9 	udiv	r0, lr, r9
 80004f6:	0c1c      	lsrs	r4, r3, #16
 80004f8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000500:	fb00 fe0c 	mul.w	lr, r0, ip
 8000504:	45a6      	cmp	lr, r4
 8000506:	fa02 f201 	lsl.w	r2, r2, r1
 800050a:	d909      	bls.n	8000520 <__udivmoddi4+0x1a0>
 800050c:	193c      	adds	r4, r7, r4
 800050e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000512:	f080 809c 	bcs.w	800064e <__udivmoddi4+0x2ce>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f240 8099 	bls.w	800064e <__udivmoddi4+0x2ce>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	eba4 040e 	sub.w	r4, r4, lr
 8000524:	fa1f fe83 	uxth.w	lr, r3
 8000528:	fbb4 f3f9 	udiv	r3, r4, r9
 800052c:	fb09 4413 	mls	r4, r9, r3, r4
 8000530:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000534:	fb03 fc0c 	mul.w	ip, r3, ip
 8000538:	45a4      	cmp	ip, r4
 800053a:	d908      	bls.n	800054e <__udivmoddi4+0x1ce>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000542:	f080 8082 	bcs.w	800064a <__udivmoddi4+0x2ca>
 8000546:	45a4      	cmp	ip, r4
 8000548:	d97f      	bls.n	800064a <__udivmoddi4+0x2ca>
 800054a:	3b02      	subs	r3, #2
 800054c:	443c      	add	r4, r7
 800054e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000552:	eba4 040c 	sub.w	r4, r4, ip
 8000556:	fba0 ec02 	umull	lr, ip, r0, r2
 800055a:	4564      	cmp	r4, ip
 800055c:	4673      	mov	r3, lr
 800055e:	46e1      	mov	r9, ip
 8000560:	d362      	bcc.n	8000628 <__udivmoddi4+0x2a8>
 8000562:	d05f      	beq.n	8000624 <__udivmoddi4+0x2a4>
 8000564:	b15d      	cbz	r5, 800057e <__udivmoddi4+0x1fe>
 8000566:	ebb8 0203 	subs.w	r2, r8, r3
 800056a:	eb64 0409 	sbc.w	r4, r4, r9
 800056e:	fa04 f606 	lsl.w	r6, r4, r6
 8000572:	fa22 f301 	lsr.w	r3, r2, r1
 8000576:	431e      	orrs	r6, r3
 8000578:	40cc      	lsrs	r4, r1
 800057a:	e9c5 6400 	strd	r6, r4, [r5]
 800057e:	2100      	movs	r1, #0
 8000580:	e74f      	b.n	8000422 <__udivmoddi4+0xa2>
 8000582:	fbb1 fcf2 	udiv	ip, r1, r2
 8000586:	0c01      	lsrs	r1, r0, #16
 8000588:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800058c:	b280      	uxth	r0, r0
 800058e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000592:	463b      	mov	r3, r7
 8000594:	4638      	mov	r0, r7
 8000596:	463c      	mov	r4, r7
 8000598:	46b8      	mov	r8, r7
 800059a:	46be      	mov	lr, r7
 800059c:	2620      	movs	r6, #32
 800059e:	fbb1 f1f7 	udiv	r1, r1, r7
 80005a2:	eba2 0208 	sub.w	r2, r2, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e766      	b.n	800047a <__udivmoddi4+0xfa>
 80005ac:	4601      	mov	r1, r0
 80005ae:	e718      	b.n	80003e2 <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e72c      	b.n	800040e <__udivmoddi4+0x8e>
 80005b4:	f1c6 0220 	rsb	r2, r6, #32
 80005b8:	fa2e f302 	lsr.w	r3, lr, r2
 80005bc:	40b7      	lsls	r7, r6
 80005be:	40b1      	lsls	r1, r6
 80005c0:	fa20 f202 	lsr.w	r2, r0, r2
 80005c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005c8:	430a      	orrs	r2, r1
 80005ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80005ce:	b2bc      	uxth	r4, r7
 80005d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005d4:	0c11      	lsrs	r1, r2, #16
 80005d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005da:	fb08 f904 	mul.w	r9, r8, r4
 80005de:	40b0      	lsls	r0, r6
 80005e0:	4589      	cmp	r9, r1
 80005e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005e6:	b280      	uxth	r0, r0
 80005e8:	d93e      	bls.n	8000668 <__udivmoddi4+0x2e8>
 80005ea:	1879      	adds	r1, r7, r1
 80005ec:	f108 3cff 	add.w	ip, r8, #4294967295
 80005f0:	d201      	bcs.n	80005f6 <__udivmoddi4+0x276>
 80005f2:	4589      	cmp	r9, r1
 80005f4:	d81f      	bhi.n	8000636 <__udivmoddi4+0x2b6>
 80005f6:	eba1 0109 	sub.w	r1, r1, r9
 80005fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fe:	fb09 f804 	mul.w	r8, r9, r4
 8000602:	fb0e 1119 	mls	r1, lr, r9, r1
 8000606:	b292      	uxth	r2, r2
 8000608:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800060c:	4542      	cmp	r2, r8
 800060e:	d229      	bcs.n	8000664 <__udivmoddi4+0x2e4>
 8000610:	18ba      	adds	r2, r7, r2
 8000612:	f109 31ff 	add.w	r1, r9, #4294967295
 8000616:	d2c4      	bcs.n	80005a2 <__udivmoddi4+0x222>
 8000618:	4542      	cmp	r2, r8
 800061a:	d2c2      	bcs.n	80005a2 <__udivmoddi4+0x222>
 800061c:	f1a9 0102 	sub.w	r1, r9, #2
 8000620:	443a      	add	r2, r7
 8000622:	e7be      	b.n	80005a2 <__udivmoddi4+0x222>
 8000624:	45f0      	cmp	r8, lr
 8000626:	d29d      	bcs.n	8000564 <__udivmoddi4+0x1e4>
 8000628:	ebbe 0302 	subs.w	r3, lr, r2
 800062c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000630:	3801      	subs	r0, #1
 8000632:	46e1      	mov	r9, ip
 8000634:	e796      	b.n	8000564 <__udivmoddi4+0x1e4>
 8000636:	eba7 0909 	sub.w	r9, r7, r9
 800063a:	4449      	add	r1, r9
 800063c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000640:	fbb1 f9fe 	udiv	r9, r1, lr
 8000644:	fb09 f804 	mul.w	r8, r9, r4
 8000648:	e7db      	b.n	8000602 <__udivmoddi4+0x282>
 800064a:	4673      	mov	r3, lr
 800064c:	e77f      	b.n	800054e <__udivmoddi4+0x1ce>
 800064e:	4650      	mov	r0, sl
 8000650:	e766      	b.n	8000520 <__udivmoddi4+0x1a0>
 8000652:	4608      	mov	r0, r1
 8000654:	e6fd      	b.n	8000452 <__udivmoddi4+0xd2>
 8000656:	443b      	add	r3, r7
 8000658:	3a02      	subs	r2, #2
 800065a:	e733      	b.n	80004c4 <__udivmoddi4+0x144>
 800065c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000660:	443b      	add	r3, r7
 8000662:	e71c      	b.n	800049e <__udivmoddi4+0x11e>
 8000664:	4649      	mov	r1, r9
 8000666:	e79c      	b.n	80005a2 <__udivmoddi4+0x222>
 8000668:	eba1 0109 	sub.w	r1, r1, r9
 800066c:	46c4      	mov	ip, r8
 800066e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000672:	fb09 f804 	mul.w	r8, r9, r4
 8000676:	e7c4      	b.n	8000602 <__udivmoddi4+0x282>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fa9b 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f853 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 f8bf 	bl	800080c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //step 5: Enable the Cycle counter CYCCNT
  DWT_CTRL |= (1 << 0);
 800068e:	4b21      	ldr	r3, [pc, #132]	@ (8000714 <main+0x98>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a20      	ldr	r2, [pc, #128]	@ (8000714 <main+0x98>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6013      	str	r3, [r2, #0]
  //step 6
  SEGGER_SYSVIEW_Conf();
 800069a:	f004 fb09 	bl	8004cb0 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 800069e:	f005 fdd1 	bl	8006244 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	2302      	movs	r3, #2
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <main+0x9c>)
 80006ae:	22c8      	movs	r2, #200	@ 0xc8
 80006b0:	491a      	ldr	r1, [pc, #104]	@ (800071c <main+0xa0>)
 80006b2:	481b      	ldr	r0, [pc, #108]	@ (8000720 <main+0xa4>)
 80006b4:	f002 fc16 	bl	8002ee4 <xTaskCreate>
 80006b8:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d00b      	beq.n	80006d8 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006c4:	f383 8811 	msr	BASEPRI, r3
 80006c8:	f3bf 8f6f 	isb	sy
 80006cc:	f3bf 8f4f 	dsb	sy
 80006d0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006d2:	bf00      	nop
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	2302      	movs	r3, #2
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <main+0xa8>)
 80006e2:	22c8      	movs	r2, #200	@ 0xc8
 80006e4:	4910      	ldr	r1, [pc, #64]	@ (8000728 <main+0xac>)
 80006e6:	4811      	ldr	r0, [pc, #68]	@ (800072c <main+0xb0>)
 80006e8:	f002 fbfc 	bl	8002ee4 <xTaskCreate>
 80006ec:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d00b      	beq.n	800070c <main+0x90>
        __asm volatile
 80006f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006f8:	f383 8811 	msr	BASEPRI, r3
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	f3bf 8f4f 	dsb	sy
 8000704:	60fb      	str	r3, [r7, #12]
    }
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <main+0x8c>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800070c:	f002 fd4e 	bl	80031ac <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <main+0x94>
 8000714:	e0001000 	.word	0xe0001000
 8000718:	080077b4 	.word	0x080077b4
 800071c:	080077cc 	.word	0x080077cc
 8000720:	08000909 	.word	0x08000909
 8000724:	080077d4 	.word	0x080077d4
 8000728:	080077ec 	.word	0x080077ec
 800072c:	08000945 	.word	0x08000945

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	@ 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2234      	movs	r2, #52	@ 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f006 fba6 	bl	8006e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <SystemClock_Config+0xd4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a29      	ldr	r2, [pc, #164]	@ (8000804 <SystemClock_Config+0xd4>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <SystemClock_Config+0xd4>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <SystemClock_Config+0xd8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800077c:	4a22      	ldr	r2, [pc, #136]	@ (8000808 <SystemClock_Config+0xd8>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <SystemClock_Config+0xd8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a4:	2310      	movs	r3, #16
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 f836 	bl	8001830 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ca:	f000 f8eb 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2102      	movs	r1, #2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fcb8 	bl	8001160 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007f6:	f000 f8d5 	bl	80009a4 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	@ 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b35      	ldr	r3, [pc, #212]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a34      	ldr	r2, [pc, #208]	@ (80008fc <MX_GPIO_Init+0xf0>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b32      	ldr	r3, [pc, #200]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b2e      	ldr	r3, [pc, #184]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a2d      	ldr	r2, [pc, #180]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b27      	ldr	r3, [pc, #156]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a26      	ldr	r2, [pc, #152]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b24      	ldr	r3, [pc, #144]	@ (80008fc <MX_GPIO_Init+0xf0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b20      	ldr	r3, [pc, #128]	@ (80008fc <MX_GPIO_Init+0xf0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a1f      	ldr	r2, [pc, #124]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	481a      	ldr	r0, [pc, #104]	@ (8000900 <MX_GPIO_Init+0xf4>)
 8000898:	f000 fc48 	bl	800112c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	4814      	ldr	r0, [pc, #80]	@ (8000904 <MX_GPIO_Init+0xf8>)
 80008b4:	f000 faa6 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b8:	230c      	movs	r3, #12
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c8:	2307      	movs	r3, #7
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	480b      	ldr	r0, [pc, #44]	@ (8000900 <MX_GPIO_Init+0xf4>)
 80008d4:	f000 fa96 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d8:	2320      	movs	r3, #32
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_GPIO_Init+0xf4>)
 80008f0:	f000 fa88 	bl	8000e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	@ 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40020800 	.word	0x40020800

08000908 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09c      	sub	sp, #112	@ 0x70
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		//printf("%s\n", (char*)parameters);
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000910:	f107 000c 	add.w	r0, r7, #12
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a09      	ldr	r2, [pc, #36]	@ (800093c <task1_handler+0x34>)
 8000918:	2164      	movs	r1, #100	@ 0x64
 800091a:	f006 fa73 	bl	8006e04 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	4618      	mov	r0, r3
 8000924:	f006 f9fe 	bl	8006d24 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <task1_handler+0x38>)
 800092a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	f3bf 8f4f 	dsb	sy
 8000934:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000938:	bf00      	nop
 800093a:	e7e9      	b.n	8000910 <task1_handler+0x8>
 800093c:	080077f4 	.word	0x080077f4
 8000940:	e000ed04 	.word	0xe000ed04

08000944 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b09c      	sub	sp, #112	@ 0x70
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		//printf("%s\n", (char*)parameters);
		snprintf(msg,100,"%s\n", (char*)parameters);
 800094c:	f107 000c 	add.w	r0, r7, #12
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a09      	ldr	r2, [pc, #36]	@ (8000978 <task2_handler+0x34>)
 8000954:	2164      	movs	r1, #100	@ 0x64
 8000956:	f006 fa55 	bl	8006e04 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4618      	mov	r0, r3
 8000960:	f006 f9e0 	bl	8006d24 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000964:	4b05      	ldr	r3, [pc, #20]	@ (800097c <task2_handler+0x38>)
 8000966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	f3bf 8f4f 	dsb	sy
 8000970:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000974:	bf00      	nop
 8000976:	e7e9      	b.n	800094c <task2_handler+0x8>
 8000978:	080077f4 	.word	0x080077f4
 800097c:	e000ed04 	.word	0xe000ed04

08000980 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d101      	bne.n	8000996 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000992:	f000 f935 	bl	8000c00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40001000 	.word	0x40001000

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a0f      	ldr	r2, [pc, #60]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <HAL_MspInit+0x4c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
 vInitPrioGroupValue();
 80009ee:	f003 fd9d 	bl	800452c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	@ 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	4b33      	ldr	r3, [pc, #204]	@ (8000ae4 <HAL_InitTick+0xe4>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	4a32      	ldr	r2, [pc, #200]	@ (8000ae4 <HAL_InitTick+0xe4>)
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a20:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <HAL_InitTick+0xe4>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a24:	f003 0310 	and.w	r3, r3, #16
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a2c:	f107 0210 	add.w	r2, r7, #16
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fc98 	bl	800136c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d103      	bne.n	8000a4e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a46:	f000 fc7d 	bl	8001344 <HAL_RCC_GetPCLK1Freq>
 8000a4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a4c:	e004      	b.n	8000a58 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a4e:	f000 fc79 	bl	8001344 <HAL_RCC_GetPCLK1Freq>
 8000a52:	4603      	mov	r3, r0
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a5a:	4a23      	ldr	r2, [pc, #140]	@ (8000ae8 <HAL_InitTick+0xe8>)
 8000a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a60:	0c9b      	lsrs	r3, r3, #18
 8000a62:	3b01      	subs	r3, #1
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a66:	4b21      	ldr	r3, [pc, #132]	@ (8000aec <HAL_InitTick+0xec>)
 8000a68:	4a21      	ldr	r2, [pc, #132]	@ (8000af0 <HAL_InitTick+0xf0>)
 8000a6a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <HAL_InitTick+0xec>)
 8000a6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a72:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a74:	4a1d      	ldr	r2, [pc, #116]	@ (8000aec <HAL_InitTick+0xec>)
 8000a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a78:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <HAL_InitTick+0xec>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <HAL_InitTick+0xec>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <HAL_InitTick+0xec>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a8c:	4817      	ldr	r0, [pc, #92]	@ (8000aec <HAL_InitTick+0xec>)
 8000a8e:	f001 f96d 	bl	8001d6c <HAL_TIM_Base_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d11b      	bne.n	8000ad8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000aa0:	4812      	ldr	r0, [pc, #72]	@ (8000aec <HAL_InitTick+0xec>)
 8000aa2:	f001 f9bd 	bl	8001e20 <HAL_TIM_Base_Start_IT>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000aac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d111      	bne.n	8000ad8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ab4:	2036      	movs	r0, #54	@ 0x36
 8000ab6:	f000 f997 	bl	8000de8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d808      	bhi.n	8000ad2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	2036      	movs	r0, #54	@ 0x36
 8000ac6:	f000 f973 	bl	8000db0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <HAL_InitTick+0xf4>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	e002      	b.n	8000ad8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3738      	adds	r7, #56	@ 0x38
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	431bde83 	.word	0x431bde83
 8000aec:	2000007c 	.word	0x2000007c
 8000af0:	40001000 	.word	0x40001000
 8000af4:	20000004 	.word	0x20000004

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <NMI_Handler+0x4>

08000b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <MemManage_Handler+0x4>

08000b10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <TIM6_DAC_IRQHandler+0x10>)
 8000b36:	f001 f9e3 	bl	8001f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000007c 	.word	0x2000007c

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b6c:	f7ff ffea 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f006 f983 	bl	8006ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fd6f 	bl	800067c <main>
  bx  lr    
 8000b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bac:	0800796c 	.word	0x0800796c
  ldr r2, =_sbss
 8000bb0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bb4:	20014634 	.word	0x20014634

08000bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <HAL_Init+0x40>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <HAL_Init+0x40>)
 8000bd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	@ (8000bfc <HAL_Init+0x40>)
 8000bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f8d8 	bl	8000d9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff ff08 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fede 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023c00 	.word	0x40023c00

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	200000c4 	.word	0x200000c4

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	@ (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200000c4 	.word	0x200000c4

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	@ (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	@ (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	@ 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff4c 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc2:	f7ff ff61 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000dc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	6978      	ldr	r0, [r7, #20]
 8000dce:	f7ff ffb1 	bl	8000d34 <NVIC_EncodePriority>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff80 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff54 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	e165      	b.n	80010ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f040 8154 	bne.w	80010e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d005      	beq.n	8000e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d130      	bne.n	8000eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	f003 0201 	and.w	r2, r3, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d017      	beq.n	8000ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d123      	bne.n	8000f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	08da      	lsrs	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3208      	adds	r2, #8
 8000f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	69b9      	ldr	r1, [r7, #24]
 8000f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0203 	and.w	r2, r3, #3
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80ae 	beq.w	80010e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001104 <HAL_GPIO_Init+0x300>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f92:	4a5c      	ldr	r2, [pc, #368]	@ (8001104 <HAL_GPIO_Init+0x300>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001104 <HAL_GPIO_Init+0x300>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa6:	4a58      	ldr	r2, [pc, #352]	@ (8001108 <HAL_GPIO_Init+0x304>)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4f      	ldr	r2, [pc, #316]	@ (800110c <HAL_GPIO_Init+0x308>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d025      	beq.n	800101e <HAL_GPIO_Init+0x21a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001110 <HAL_GPIO_Init+0x30c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01f      	beq.n	800101a <HAL_GPIO_Init+0x216>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4d      	ldr	r2, [pc, #308]	@ (8001114 <HAL_GPIO_Init+0x310>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x212>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4c      	ldr	r2, [pc, #304]	@ (8001118 <HAL_GPIO_Init+0x314>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x20e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4b      	ldr	r2, [pc, #300]	@ (800111c <HAL_GPIO_Init+0x318>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x20a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <HAL_GPIO_Init+0x31c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x206>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a49      	ldr	r2, [pc, #292]	@ (8001124 <HAL_GPIO_Init+0x320>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x202>
 8001002:	2306      	movs	r3, #6
 8001004:	e00c      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 8001006:	2307      	movs	r3, #7
 8001008:	e00a      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 800100a:	2305      	movs	r3, #5
 800100c:	e008      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 800100e:	2304      	movs	r3, #4
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 8001012:	2303      	movs	r3, #3
 8001014:	e004      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 8001016:	2302      	movs	r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x21c>
 800101e:	2300      	movs	r3, #0
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	f002 0203 	and.w	r2, r2, #3
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	4093      	lsls	r3, r2
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001030:	4935      	ldr	r1, [pc, #212]	@ (8001108 <HAL_GPIO_Init+0x304>)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103e:	4b3a      	ldr	r3, [pc, #232]	@ (8001128 <HAL_GPIO_Init+0x324>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001062:	4a31      	ldr	r2, [pc, #196]	@ (8001128 <HAL_GPIO_Init+0x324>)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001068:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <HAL_GPIO_Init+0x324>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800108c:	4a26      	ldr	r2, [pc, #152]	@ (8001128 <HAL_GPIO_Init+0x324>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001092:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <HAL_GPIO_Init+0x324>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001128 <HAL_GPIO_Init+0x324>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <HAL_GPIO_Init+0x324>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e0:	4a11      	ldr	r2, [pc, #68]	@ (8001128 <HAL_GPIO_Init+0x324>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3301      	adds	r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2b0f      	cmp	r3, #15
 80010f0:	f67f ae96 	bls.w	8000e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3724      	adds	r7, #36	@ 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40013800 	.word	0x40013800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020400 	.word	0x40020400
 8001114:	40020800 	.word	0x40020800
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40021000 	.word	0x40021000
 8001120:	40021400 	.word	0x40021400
 8001124:	40021800 	.word	0x40021800
 8001128:	40013c00 	.word	0x40013c00

0800112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
 8001138:	4613      	mov	r3, r2
 800113a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001148:	e003      	b.n	8001152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	041a      	lsls	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	619a      	str	r2, [r3, #24]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0cc      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001174:	4b68      	ldr	r3, [pc, #416]	@ (8001318 <HAL_RCC_ClockConfig+0x1b8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d90c      	bls.n	800119c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001182:	4b65      	ldr	r3, [pc, #404]	@ (8001318 <HAL_RCC_ClockConfig+0x1b8>)
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800118a:	4b63      	ldr	r3, [pc, #396]	@ (8001318 <HAL_RCC_ClockConfig+0x1b8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d001      	beq.n	800119c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0b8      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b4:	4b59      	ldr	r3, [pc, #356]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4a58      	ldr	r2, [pc, #352]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011cc:	4b53      	ldr	r3, [pc, #332]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4a52      	ldr	r2, [pc, #328]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d8:	4b50      	ldr	r3, [pc, #320]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	494d      	ldr	r1, [pc, #308]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d044      	beq.n	8001280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d107      	bne.n	800120e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	4b47      	ldr	r3, [pc, #284]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d119      	bne.n	800123e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e07f      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d003      	beq.n	800121e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800121a:	2b03      	cmp	r3, #3
 800121c:	d107      	bne.n	800122e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121e:	4b3f      	ldr	r3, [pc, #252]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e06f      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122e:	4b3b      	ldr	r3, [pc, #236]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e067      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800123e:	4b37      	ldr	r3, [pc, #220]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f023 0203 	bic.w	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4934      	ldr	r1, [pc, #208]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	4313      	orrs	r3, r2
 800124e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001250:	f7ff fcea 	bl	8000c28 <HAL_GetTick>
 8001254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001256:	e00a      	b.n	800126e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001258:	f7ff fce6 	bl	8000c28 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001266:	4293      	cmp	r3, r2
 8001268:	d901      	bls.n	800126e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e04f      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 020c 	and.w	r2, r3, #12
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	429a      	cmp	r2, r3
 800127e:	d1eb      	bne.n	8001258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001280:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <HAL_RCC_ClockConfig+0x1b8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d20c      	bcs.n	80012a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <HAL_RCC_ClockConfig+0x1b8>)
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_RCC_ClockConfig+0x1b8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e032      	b.n	800130e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d008      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4916      	ldr	r1, [pc, #88]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d009      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	490e      	ldr	r1, [pc, #56]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012e6:	f000 f873 	bl	80013d0 <HAL_RCC_GetSysClockFreq>
 80012ea:	4602      	mov	r2, r0
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	490a      	ldr	r1, [pc, #40]	@ (8001320 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	5ccb      	ldrb	r3, [r1, r3]
 80012fa:	fa22 f303 	lsr.w	r3, r2, r3
 80012fe:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 8001300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <HAL_RCC_ClockConfig+0x1c8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fb7a 	bl	8000a00 <HAL_InitTick>

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023c00 	.word	0x40023c00
 800131c:	40023800 	.word	0x40023800
 8001320:	080078e8 	.word	0x080078e8
 8001324:	20000000 	.word	0x20000000
 8001328:	20000004 	.word	0x20000004

0800132c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_RCC_GetHCLKFreq+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000000 	.word	0x20000000

08001344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001348:	f7ff fff0 	bl	800132c <HAL_RCC_GetHCLKFreq>
 800134c:	4602      	mov	r2, r0
 800134e:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	0a9b      	lsrs	r3, r3, #10
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	4903      	ldr	r1, [pc, #12]	@ (8001368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800135a:	5ccb      	ldrb	r3, [r1, r3]
 800135c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800
 8001368:	080078f8 	.word	0x080078f8

0800136c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	220f      	movs	r2, #15
 800137a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_RCC_GetClockConfig+0x5c>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 0203 	and.w	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001388:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_RCC_GetClockConfig+0x5c>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001394:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <HAL_RCC_GetClockConfig+0x5c>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013a0:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_RCC_GetClockConfig+0x5c>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <HAL_RCC_GetClockConfig+0x60>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 020f 	and.w	r2, r3, #15
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	601a      	str	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40023c00 	.word	0x40023c00

080013d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d4:	b0ae      	sub	sp, #184	@ 0xb8
 80013d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013f6:	4bcb      	ldr	r3, [pc, #812]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	f200 8206 	bhi.w	8001810 <HAL_RCC_GetSysClockFreq+0x440>
 8001404:	a201      	add	r2, pc, #4	@ (adr r2, 800140c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140a:	bf00      	nop
 800140c:	08001441 	.word	0x08001441
 8001410:	08001811 	.word	0x08001811
 8001414:	08001811 	.word	0x08001811
 8001418:	08001811 	.word	0x08001811
 800141c:	08001449 	.word	0x08001449
 8001420:	08001811 	.word	0x08001811
 8001424:	08001811 	.word	0x08001811
 8001428:	08001811 	.word	0x08001811
 800142c:	08001451 	.word	0x08001451
 8001430:	08001811 	.word	0x08001811
 8001434:	08001811 	.word	0x08001811
 8001438:	08001811 	.word	0x08001811
 800143c:	08001641 	.word	0x08001641
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001440:	4bb9      	ldr	r3, [pc, #740]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x358>)
 8001442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001446:	e1e7      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001448:	4bb8      	ldr	r3, [pc, #736]	@ (800172c <HAL_RCC_GetSysClockFreq+0x35c>)
 800144a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800144e:	e1e3      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001450:	4bb4      	ldr	r3, [pc, #720]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001458:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800145c:	4bb1      	ldr	r3, [pc, #708]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d071      	beq.n	800154c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001468:	4bae      	ldr	r3, [pc, #696]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	099b      	lsrs	r3, r3, #6
 800146e:	2200      	movs	r2, #0
 8001470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001474:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800147c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001480:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800148a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800148e:	4622      	mov	r2, r4
 8001490:	462b      	mov	r3, r5
 8001492:	f04f 0000 	mov.w	r0, #0
 8001496:	f04f 0100 	mov.w	r1, #0
 800149a:	0159      	lsls	r1, r3, #5
 800149c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014a0:	0150      	lsls	r0, r2, #5
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4621      	mov	r1, r4
 80014a8:	1a51      	subs	r1, r2, r1
 80014aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80014ac:	4629      	mov	r1, r5
 80014ae:	eb63 0301 	sbc.w	r3, r3, r1
 80014b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80014c0:	4649      	mov	r1, r9
 80014c2:	018b      	lsls	r3, r1, #6
 80014c4:	4641      	mov	r1, r8
 80014c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014ca:	4641      	mov	r1, r8
 80014cc:	018a      	lsls	r2, r1, #6
 80014ce:	4641      	mov	r1, r8
 80014d0:	1a51      	subs	r1, r2, r1
 80014d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014d4:	4649      	mov	r1, r9
 80014d6:	eb63 0301 	sbc.w	r3, r3, r1
 80014da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80014e8:	4649      	mov	r1, r9
 80014ea:	00cb      	lsls	r3, r1, #3
 80014ec:	4641      	mov	r1, r8
 80014ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014f2:	4641      	mov	r1, r8
 80014f4:	00ca      	lsls	r2, r1, #3
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	4603      	mov	r3, r0
 80014fc:	4622      	mov	r2, r4
 80014fe:	189b      	adds	r3, r3, r2
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
 8001502:	462b      	mov	r3, r5
 8001504:	460a      	mov	r2, r1
 8001506:	eb42 0303 	adc.w	r3, r2, r3
 800150a:	637b      	str	r3, [r7, #52]	@ 0x34
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001518:	4629      	mov	r1, r5
 800151a:	024b      	lsls	r3, r1, #9
 800151c:	4621      	mov	r1, r4
 800151e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001522:	4621      	mov	r1, r4
 8001524:	024a      	lsls	r2, r1, #9
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800152e:	2200      	movs	r2, #0
 8001530:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001534:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001538:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800153c:	f7fe ff08 	bl	8000350 <__aeabi_uldivmod>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4613      	mov	r3, r2
 8001546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800154a:	e067      	b.n	800161c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154c:	4b75      	ldr	r3, [pc, #468]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	2200      	movs	r2, #0
 8001554:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001558:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800155c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001564:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001566:	2300      	movs	r3, #0
 8001568:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800156a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800156e:	4622      	mov	r2, r4
 8001570:	462b      	mov	r3, r5
 8001572:	f04f 0000 	mov.w	r0, #0
 8001576:	f04f 0100 	mov.w	r1, #0
 800157a:	0159      	lsls	r1, r3, #5
 800157c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001580:	0150      	lsls	r0, r2, #5
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4621      	mov	r1, r4
 8001588:	1a51      	subs	r1, r2, r1
 800158a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800158c:	4629      	mov	r1, r5
 800158e:	eb63 0301 	sbc.w	r3, r3, r1
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80015a0:	4649      	mov	r1, r9
 80015a2:	018b      	lsls	r3, r1, #6
 80015a4:	4641      	mov	r1, r8
 80015a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015aa:	4641      	mov	r1, r8
 80015ac:	018a      	lsls	r2, r1, #6
 80015ae:	4641      	mov	r1, r8
 80015b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80015b4:	4649      	mov	r1, r9
 80015b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015ce:	4692      	mov	sl, r2
 80015d0:	469b      	mov	fp, r3
 80015d2:	4623      	mov	r3, r4
 80015d4:	eb1a 0303 	adds.w	r3, sl, r3
 80015d8:	623b      	str	r3, [r7, #32]
 80015da:	462b      	mov	r3, r5
 80015dc:	eb4b 0303 	adc.w	r3, fp, r3
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015ee:	4629      	mov	r1, r5
 80015f0:	028b      	lsls	r3, r1, #10
 80015f2:	4621      	mov	r1, r4
 80015f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015f8:	4621      	mov	r1, r4
 80015fa:	028a      	lsls	r2, r1, #10
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001604:	2200      	movs	r2, #0
 8001606:	673b      	str	r3, [r7, #112]	@ 0x70
 8001608:	677a      	str	r2, [r7, #116]	@ 0x74
 800160a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800160e:	f7fe fe9f 	bl	8000350 <__aeabi_uldivmod>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4613      	mov	r3, r2
 8001618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800161c:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	3301      	adds	r3, #1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800162e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800163e:	e0eb      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001640:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001648:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800164c:	4b35      	ldr	r3, [pc, #212]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d06b      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001658:	4b32      	ldr	r3, [pc, #200]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x354>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	2200      	movs	r2, #0
 8001660:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001662:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001664:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800166a:	663b      	str	r3, [r7, #96]	@ 0x60
 800166c:	2300      	movs	r3, #0
 800166e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001670:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001674:	4622      	mov	r2, r4
 8001676:	462b      	mov	r3, r5
 8001678:	f04f 0000 	mov.w	r0, #0
 800167c:	f04f 0100 	mov.w	r1, #0
 8001680:	0159      	lsls	r1, r3, #5
 8001682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001686:	0150      	lsls	r0, r2, #5
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4621      	mov	r1, r4
 800168e:	1a51      	subs	r1, r2, r1
 8001690:	61b9      	str	r1, [r7, #24]
 8001692:	4629      	mov	r1, r5
 8001694:	eb63 0301 	sbc.w	r3, r3, r1
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016a6:	4659      	mov	r1, fp
 80016a8:	018b      	lsls	r3, r1, #6
 80016aa:	4651      	mov	r1, sl
 80016ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b0:	4651      	mov	r1, sl
 80016b2:	018a      	lsls	r2, r1, #6
 80016b4:	4651      	mov	r1, sl
 80016b6:	ebb2 0801 	subs.w	r8, r2, r1
 80016ba:	4659      	mov	r1, fp
 80016bc:	eb63 0901 	sbc.w	r9, r3, r1
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016d4:	4690      	mov	r8, r2
 80016d6:	4699      	mov	r9, r3
 80016d8:	4623      	mov	r3, r4
 80016da:	eb18 0303 	adds.w	r3, r8, r3
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	462b      	mov	r3, r5
 80016e2:	eb49 0303 	adc.w	r3, r9, r3
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016f4:	4629      	mov	r1, r5
 80016f6:	024b      	lsls	r3, r1, #9
 80016f8:	4621      	mov	r1, r4
 80016fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016fe:	4621      	mov	r1, r4
 8001700:	024a      	lsls	r2, r1, #9
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800170a:	2200      	movs	r2, #0
 800170c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800170e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001710:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001714:	f7fe fe1c 	bl	8000350 <__aeabi_uldivmod>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4613      	mov	r3, r2
 800171e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001722:	e065      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x420>
 8001724:	40023800 	.word	0x40023800
 8001728:	00f42400 	.word	0x00f42400
 800172c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001730:	4b3d      	ldr	r3, [pc, #244]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x458>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	099b      	lsrs	r3, r3, #6
 8001736:	2200      	movs	r2, #0
 8001738:	4618      	mov	r0, r3
 800173a:	4611      	mov	r1, r2
 800173c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001740:	653b      	str	r3, [r7, #80]	@ 0x50
 8001742:	2300      	movs	r3, #0
 8001744:	657b      	str	r3, [r7, #84]	@ 0x54
 8001746:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800174a:	4642      	mov	r2, r8
 800174c:	464b      	mov	r3, r9
 800174e:	f04f 0000 	mov.w	r0, #0
 8001752:	f04f 0100 	mov.w	r1, #0
 8001756:	0159      	lsls	r1, r3, #5
 8001758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800175c:	0150      	lsls	r0, r2, #5
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4641      	mov	r1, r8
 8001764:	1a51      	subs	r1, r2, r1
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	4649      	mov	r1, r9
 800176a:	eb63 0301 	sbc.w	r3, r3, r1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800177c:	4659      	mov	r1, fp
 800177e:	018b      	lsls	r3, r1, #6
 8001780:	4651      	mov	r1, sl
 8001782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001786:	4651      	mov	r1, sl
 8001788:	018a      	lsls	r2, r1, #6
 800178a:	4651      	mov	r1, sl
 800178c:	1a54      	subs	r4, r2, r1
 800178e:	4659      	mov	r1, fp
 8001790:	eb63 0501 	sbc.w	r5, r3, r1
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	00eb      	lsls	r3, r5, #3
 800179e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017a2:	00e2      	lsls	r2, r4, #3
 80017a4:	4614      	mov	r4, r2
 80017a6:	461d      	mov	r5, r3
 80017a8:	4643      	mov	r3, r8
 80017aa:	18e3      	adds	r3, r4, r3
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	464b      	mov	r3, r9
 80017b0:	eb45 0303 	adc.w	r3, r5, r3
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017c2:	4629      	mov	r1, r5
 80017c4:	028b      	lsls	r3, r1, #10
 80017c6:	4621      	mov	r1, r4
 80017c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017cc:	4621      	mov	r1, r4
 80017ce:	028a      	lsls	r2, r1, #10
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017d8:	2200      	movs	r2, #0
 80017da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017e2:	f7fe fdb5 	bl	8000350 <__aeabi_uldivmod>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4613      	mov	r3, r2
 80017ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x458>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	0f1b      	lsrs	r3, r3, #28
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80017fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800180e:	e003      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001812:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001816:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001818:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800181c:	4618      	mov	r0, r3
 800181e:	37b8      	adds	r7, #184	@ 0xb8
 8001820:	46bd      	mov	sp, r7
 8001822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	00f42400 	.word	0x00f42400

08001830 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e28d      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8083 	beq.w	8001956 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001850:	4b94      	ldr	r3, [pc, #592]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b04      	cmp	r3, #4
 800185a:	d019      	beq.n	8001890 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800185c:	4b91      	ldr	r3, [pc, #580]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
        || \
 8001864:	2b08      	cmp	r3, #8
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001868:	4b8e      	ldr	r3, [pc, #568]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001870:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001874:	d00c      	beq.n	8001890 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001876:	4b8b      	ldr	r3, [pc, #556]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d112      	bne.n	80018a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001882:	4b88      	ldr	r3, [pc, #544]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800188e:	d10b      	bne.n	80018a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	4b84      	ldr	r3, [pc, #528]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d05b      	beq.n	8001954 <HAL_RCC_OscConfig+0x124>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d157      	bne.n	8001954 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e25a      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018b0:	d106      	bne.n	80018c0 <HAL_RCC_OscConfig+0x90>
 80018b2:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7b      	ldr	r2, [pc, #492]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e01d      	b.n	80018fc <HAL_RCC_OscConfig+0xcc>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0xb4>
 80018ca:	4b76      	ldr	r3, [pc, #472]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a75      	ldr	r2, [pc, #468]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b73      	ldr	r3, [pc, #460]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a72      	ldr	r2, [pc, #456]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0xcc>
 80018e4:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a6e      	ldr	r2, [pc, #440]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a6b      	ldr	r2, [pc, #428]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80018f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f990 	bl	8000c28 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff f98c 	bl	8000c28 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	@ 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e21f      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	4b61      	ldr	r3, [pc, #388]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0xdc>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff f97c 	bl	8000c28 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff f978 	bl	8000c28 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	@ 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e20b      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	4b57      	ldr	r3, [pc, #348]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x104>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d06f      	beq.n	8001a42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001962:	4b50      	ldr	r3, [pc, #320]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b00      	cmp	r3, #0
 800196c:	d017      	beq.n	800199e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800196e:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
        || \
 8001976:	2b08      	cmp	r3, #8
 8001978:	d105      	bne.n	8001986 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800197a:	4b4a      	ldr	r3, [pc, #296]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001986:	4b47      	ldr	r3, [pc, #284]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d11c      	bne.n	80019cc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001992:	4b44      	ldr	r3, [pc, #272]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d116      	bne.n	80019cc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	4b41      	ldr	r3, [pc, #260]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x186>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e1d3      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4937      	ldr	r1, [pc, #220]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	e03a      	b.n	8001a42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d4:	4b34      	ldr	r3, [pc, #208]	@ (8001aa8 <HAL_RCC_OscConfig+0x278>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f7ff f925 	bl	8000c28 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff f921 	bl	8000c28 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1b4      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4925      	ldr	r1, [pc, #148]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <HAL_RCC_OscConfig+0x278>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f904 	bl	8000c28 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff f900 	bl	8000c28 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e193      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d036      	beq.n	8001abc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d016      	beq.n	8001a84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_RCC_OscConfig+0x27c>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f8e4 	bl	8000c28 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff f8e0 	bl	8000c28 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e173      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x234>
 8001a82:	e01b      	b.n	8001abc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <HAL_RCC_OscConfig+0x27c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f8cd 	bl	8000c28 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	e00e      	b.n	8001ab0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a92:	f7ff f8c9 	bl	8000c28 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d907      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e15c      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	42470000 	.word	0x42470000
 8001aac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab0:	4b8a      	ldr	r3, [pc, #552]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1ea      	bne.n	8001a92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 8097 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ace:	4b83      	ldr	r3, [pc, #524]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10f      	bne.n	8001afa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b7f      	ldr	r3, [pc, #508]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aea:	4b7c      	ldr	r3, [pc, #496]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af6:	2301      	movs	r3, #1
 8001af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	4b79      	ldr	r3, [pc, #484]	@ (8001ce0 <HAL_RCC_OscConfig+0x4b0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d118      	bne.n	8001b38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b06:	4b76      	ldr	r3, [pc, #472]	@ (8001ce0 <HAL_RCC_OscConfig+0x4b0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a75      	ldr	r2, [pc, #468]	@ (8001ce0 <HAL_RCC_OscConfig+0x4b0>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b12:	f7ff f889 	bl	8000c28 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1a:	f7ff f885 	bl	8000c28 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e118      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce0 <HAL_RCC_OscConfig+0x4b0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x31e>
 8001b40:	4b66      	ldr	r3, [pc, #408]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b44:	4a65      	ldr	r2, [pc, #404]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4c:	e01c      	b.n	8001b88 <HAL_RCC_OscConfig+0x358>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x340>
 8001b56:	4b61      	ldr	r3, [pc, #388]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5a:	4a60      	ldr	r2, [pc, #384]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b62:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b66:	4a5d      	ldr	r2, [pc, #372]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0x358>
 8001b70:	4b5a      	ldr	r3, [pc, #360]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b74:	4a59      	ldr	r2, [pc, #356]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b7c:	4b57      	ldr	r3, [pc, #348]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b80:	4a56      	ldr	r2, [pc, #344]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b82:	f023 0304 	bic.w	r3, r3, #4
 8001b86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d015      	beq.n	8001bbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b90:	f7ff f84a 	bl	8000c28 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff f846 	bl	8000c28 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0d7      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bae:	4b4b      	ldr	r3, [pc, #300]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0ee      	beq.n	8001b98 <HAL_RCC_OscConfig+0x368>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff f834 	bl	8000c28 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f830 	bl	8000c28 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e0c1      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bda:	4b40      	ldr	r3, [pc, #256]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ee      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bec:	4b3b      	ldr	r3, [pc, #236]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	4a3a      	ldr	r2, [pc, #232]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001bf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80ad 	beq.w	8001d5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c02:	4b36      	ldr	r3, [pc, #216]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d060      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d145      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b33      	ldr	r3, [pc, #204]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f804 	bl	8000c28 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff f800 	bl	8000c28 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e093      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	4b29      	ldr	r3, [pc, #164]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	019b      	lsls	r3, r3, #6
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	041b      	lsls	r3, r3, #16
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c64:	061b      	lsls	r3, r3, #24
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6c:	071b      	lsls	r3, r3, #28
 8001c6e:	491b      	ldr	r1, [pc, #108]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b4>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7fe ffd5 	bl	8000c28 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7fe ffd1 	bl	8000c28 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e064      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x452>
 8001ca0:	e05c      	b.n	8001d5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7fe ffbe 	bl	8000c28 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7fe ffba 	bl	8000c28 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e04d      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x480>
 8001cce:	e045      	b.n	8001d5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e040      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40007000 	.word	0x40007000
 8001ce4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <HAL_RCC_OscConfig+0x538>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d030      	beq.n	8001d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d129      	bne.n	8001d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d122      	bne.n	8001d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d18:	4013      	ands	r3, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d119      	bne.n	8001d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2e:	085b      	lsrs	r3, r3, #1
 8001d30:	3b01      	subs	r3, #1
 8001d32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d10f      	bne.n	8001d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800

08001d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e041      	b.n	8001e02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f839 	bl	8001e0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3304      	adds	r3, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f000 f9c0 	bl	8002130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d001      	beq.n	8001e38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e04e      	b.n	8001ed6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a23      	ldr	r2, [pc, #140]	@ (8001ee4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d022      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e62:	d01d      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d018      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1e      	ldr	r2, [pc, #120]	@ (8001eec <HAL_TIM_Base_Start_IT+0xcc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00e      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d009      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	@ (8001ef8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d004      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a18      	ldr	r2, [pc, #96]	@ (8001efc <HAL_TIM_Base_Start_IT+0xdc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d111      	bne.n	8001ec4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d010      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0201 	orr.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec2:	e007      	b.n	8001ed4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40010400 	.word	0x40010400
 8001ef8:	40014000 	.word	0x40014000
 8001efc:	40001800 	.word	0x40001800

08001f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d020      	beq.n	8001f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01b      	beq.n	8001f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0202 	mvn.w	r2, #2
 8001f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8d2 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8c4 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8d5 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d020      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01b      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0204 	mvn.w	r2, #4
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2202      	movs	r2, #2
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8ac 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f89e 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f8af 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d020      	beq.n	8001ffc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01b      	beq.n	8001ffc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0208 	mvn.w	r2, #8
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f886 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f878 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f889 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	d020      	beq.n	8002048 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0210 	mvn.w	r2, #16
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2208      	movs	r2, #8
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f860 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f852 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f863 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0201 	mvn.w	r2, #1
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe fc8a 	bl	8000980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f900 	bl	8002290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f834 	bl	800211c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0220 	mvn.w	r2, #32
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8d2 	bl	800227c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a43      	ldr	r2, [pc, #268]	@ (8002250 <TIM_Base_SetConfig+0x120>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d013      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800214e:	d00f      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a40      	ldr	r2, [pc, #256]	@ (8002254 <TIM_Base_SetConfig+0x124>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00b      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3f      	ldr	r2, [pc, #252]	@ (8002258 <TIM_Base_SetConfig+0x128>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d007      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a3e      	ldr	r2, [pc, #248]	@ (800225c <TIM_Base_SetConfig+0x12c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d003      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a3d      	ldr	r2, [pc, #244]	@ (8002260 <TIM_Base_SetConfig+0x130>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d108      	bne.n	8002182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a32      	ldr	r2, [pc, #200]	@ (8002250 <TIM_Base_SetConfig+0x120>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d02b      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002190:	d027      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a2f      	ldr	r2, [pc, #188]	@ (8002254 <TIM_Base_SetConfig+0x124>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d023      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2e      	ldr	r2, [pc, #184]	@ (8002258 <TIM_Base_SetConfig+0x128>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01f      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2d      	ldr	r2, [pc, #180]	@ (800225c <TIM_Base_SetConfig+0x12c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01b      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002260 <TIM_Base_SetConfig+0x130>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d017      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002264 <TIM_Base_SetConfig+0x134>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002268 <TIM_Base_SetConfig+0x138>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00f      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a29      	ldr	r2, [pc, #164]	@ (800226c <TIM_Base_SetConfig+0x13c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00b      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a28      	ldr	r2, [pc, #160]	@ (8002270 <TIM_Base_SetConfig+0x140>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a27      	ldr	r2, [pc, #156]	@ (8002274 <TIM_Base_SetConfig+0x144>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d003      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a26      	ldr	r2, [pc, #152]	@ (8002278 <TIM_Base_SetConfig+0x148>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d108      	bne.n	80021f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a0e      	ldr	r2, [pc, #56]	@ (8002250 <TIM_Base_SetConfig+0x120>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d003      	beq.n	8002222 <TIM_Base_SetConfig+0xf2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a10      	ldr	r2, [pc, #64]	@ (8002260 <TIM_Base_SetConfig+0x130>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d103      	bne.n	800222a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f043 0204 	orr.w	r2, r3, #4
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	601a      	str	r2, [r3, #0]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40010000 	.word	0x40010000
 8002254:	40000400 	.word	0x40000400
 8002258:	40000800 	.word	0x40000800
 800225c:	40000c00 	.word	0x40000c00
 8002260:	40010400 	.word	0x40010400
 8002264:	40014000 	.word	0x40014000
 8002268:	40014400 	.word	0x40014400
 800226c:	40014800 	.word	0x40014800
 8002270:	40001800 	.word	0x40001800
 8002274:	40001c00 	.word	0x40001c00
 8002278:	40002000 	.word	0x40002000

0800227c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f103 0208 	add.w	r2, r3, #8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f04f 32ff 	mov.w	r2, #4294967295
 80022bc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f103 0208 	add.w	r2, r3, #8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f103 0208 	add.w	r2, r3, #8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	601a      	str	r2, [r3, #0]
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d103      	bne.n	8002366 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e00c      	b.n	8002380 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3308      	adds	r3, #8
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e002      	b.n	8002374 <vListInsert+0x2e>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	d2f6      	bcs.n	800236e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6892      	ldr	r2, [r2, #8]
 80023ce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6852      	ldr	r2, [r2, #4]
 80023d8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d103      	bne.n	80023ec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	1e5a      	subs	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10b      	bne.n	8002438 <xQueueGenericReset+0x2c>
        __asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	60bb      	str	r3, [r7, #8]
    }
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002438:	f002 f8f8 	bl	800462c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002444:	68f9      	ldr	r1, [r7, #12]
 8002446:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	441a      	add	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	3b01      	subs	r3, #1
 800246a:	68f9      	ldr	r1, [r7, #12]
 800246c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	441a      	add	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	22ff      	movs	r2, #255	@ 0xff
 800247c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	22ff      	movs	r2, #255	@ 0xff
 8002484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d114      	bne.n	80024b8 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d01a      	beq.n	80024cc <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3310      	adds	r3, #16
 800249a:	4618      	mov	r0, r3
 800249c:	f001 f938 	bl	8003710 <xTaskRemoveFromEventList>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d012      	beq.n	80024cc <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80024a6:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <xQueueGenericReset+0xd0>)
 80024a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	e009      	b.n	80024cc <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3310      	adds	r3, #16
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fef1 	bl	80022a4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3324      	adds	r3, #36	@ 0x24
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff feec 	bl	80022a4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80024cc:	f002 f8e0 	bl	8004690 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80024d0:	2301      	movs	r3, #1
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000ed04 	.word	0xe000ed04

080024e0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	@ 0x30
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	4613      	mov	r3, r2
 80024ec:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <xQueueGenericCreate+0x2c>
        __asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	61bb      	str	r3, [r7, #24]
    }
 8002506:	bf00      	nop
 8002508:	bf00      	nop
 800250a:	e7fd      	b.n	8002508 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <xQueueGenericCreate+0x4a>
 800251c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	429a      	cmp	r2, r3
 8002528:	d101      	bne.n	800252e <xQueueGenericCreate+0x4e>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <xQueueGenericCreate+0x50>
 800252e:	2300      	movs	r3, #0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <xQueueGenericCreate+0x6c>
        __asm volatile
 8002534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	617b      	str	r3, [r7, #20]
    }
 8002546:	bf00      	nop
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002552:	d90b      	bls.n	800256c <xQueueGenericCreate+0x8c>
        __asm volatile
 8002554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	f3bf 8f6f 	isb	sy
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	613b      	str	r3, [r7, #16]
    }
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	3350      	adds	r3, #80	@ 0x50
 8002570:	4618      	mov	r0, r3
 8002572:	f002 f98d 	bl	8004890 <pvPortMalloc>
 8002576:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00d      	beq.n	800259a <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3350      	adds	r3, #80	@ 0x50
 8002586:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002588:	79fa      	ldrb	r2, [r7, #7]
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	4613      	mov	r3, r2
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f805 	bl	80025a4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800259a:	6a3b      	ldr	r3, [r7, #32]
    }
 800259c:	4618      	mov	r0, r3
 800259e:	3728      	adds	r7, #40	@ 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e002      	b.n	80025c6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025d2:	2101      	movs	r1, #1
 80025d4:	69b8      	ldr	r0, [r7, #24]
 80025d6:	f7ff ff19 	bl	800240c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	2073      	movs	r0, #115	@ 0x73
 80025ea:	f003 fd23 	bl	8006034 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b090      	sub	sp, #64	@ 0x40
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800260e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <xQueueGenericSend+0x34>
        __asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002626:	bf00      	nop
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <xQueueGenericSend+0x42>
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <xQueueGenericSend+0x46>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <xQueueGenericSend+0x48>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <xQueueGenericSend+0x64>
        __asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d103      	bne.n	800266a <xQueueGenericSend+0x72>
 8002662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <xQueueGenericSend+0x76>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <xQueueGenericSend+0x78>
 800266e:	2300      	movs	r3, #0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <xQueueGenericSend+0x94>
        __asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	623b      	str	r3, [r7, #32]
    }
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800268c:	f001 f9e4 	bl	8003a58 <xTaskGetSchedulerState>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <xQueueGenericSend+0xa4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <xQueueGenericSend+0xa8>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <xQueueGenericSend+0xaa>
 80026a0:	2300      	movs	r3, #0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10b      	bne.n	80026be <xQueueGenericSend+0xc6>
        __asm volatile
 80026a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	61fb      	str	r3, [r7, #28]
    }
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	e7fd      	b.n	80026ba <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026be:	f001 ffb5 	bl	800462c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <xQueueGenericSend+0xdc>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d136      	bne.n	8002742 <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 80026d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d6:	4618      	mov	r0, r3
 80026d8:	f004 fa38 	bl	8006b4c <SEGGER_SYSVIEW_ShrinkId>
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	460b      	mov	r3, r1
 80026e6:	4601      	mov	r1, r0
 80026e8:	205a      	movs	r0, #90	@ 0x5a
 80026ea:	f003 fd19 	bl	8006120 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026f4:	f000 fa80 	bl	8002bf8 <prvCopyDataToQueue>
 80026f8:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002704:	3324      	adds	r3, #36	@ 0x24
 8002706:	4618      	mov	r0, r3
 8002708:	f001 f802 	bl	8003710 <xTaskRemoveFromEventList>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d013      	beq.n	800273a <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002712:	4b4d      	ldr	r3, [pc, #308]	@ (8002848 <xQueueGenericSend+0x250>)
 8002714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	e00a      	b.n	800273a <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800272a:	4b47      	ldr	r3, [pc, #284]	@ (8002848 <xQueueGenericSend+0x250>)
 800272c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f3bf 8f4f 	dsb	sy
 8002736:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800273a:	f001 ffa9 	bl	8004690 <vPortExitCritical>
                return pdPASS;
 800273e:	2301      	movs	r3, #1
 8002740:	e07d      	b.n	800283e <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d110      	bne.n	800276a <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002748:	f001 ffa2 	bl	8004690 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	4618      	mov	r0, r3
 8002750:	f004 f9fc 	bl	8006b4c <SEGGER_SYSVIEW_ShrinkId>
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	460b      	mov	r3, r1
 800275e:	4601      	mov	r1, r0
 8002760:	205a      	movs	r0, #90	@ 0x5a
 8002762:	f003 fcdd 	bl	8006120 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002766:	2300      	movs	r3, #0
 8002768:	e069      	b.n	800283e <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 800276a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4618      	mov	r0, r3
 8002776:	f001 f833 	bl	80037e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800277a:	2301      	movs	r3, #1
 800277c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800277e:	f001 ff87 	bl	8004690 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002782:	f000 fd75 	bl	8003270 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002786:	f001 ff51 	bl	800462c <vPortEnterCritical>
 800278a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002790:	b25b      	sxtb	r3, r3
 8002792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002796:	d103      	bne.n	80027a0 <xQueueGenericSend+0x1a8>
 8002798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d103      	bne.n	80027b6 <xQueueGenericSend+0x1be>
 80027ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027b6:	f001 ff6b 	bl	8004690 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027ba:	1d3a      	adds	r2, r7, #4
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 f822 	bl	800380c <xTaskCheckForTimeOut>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d124      	bne.n	8002818 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027d0:	f000 fb0a 	bl	8002de8 <prvIsQueueFull>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d018      	beq.n	800280c <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027dc:	3310      	adds	r3, #16
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 ff3e 	bl	8003664 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80027e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027ea:	f000 fa95 	bl	8002d18 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80027ee:	f000 fd4d 	bl	800328c <xTaskResumeAll>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f af62 	bne.w	80026be <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80027fa:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <xQueueGenericSend+0x250>)
 80027fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	e758      	b.n	80026be <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800280c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800280e:	f000 fa83 	bl	8002d18 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002812:	f000 fd3b 	bl	800328c <xTaskResumeAll>
 8002816:	e752      	b.n	80026be <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002818:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800281a:	f000 fa7d 	bl	8002d18 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800281e:	f000 fd35 	bl	800328c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002824:	4618      	mov	r0, r3
 8002826:	f004 f991 	bl	8006b4c <SEGGER_SYSVIEW_ShrinkId>
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	460b      	mov	r3, r1
 8002834:	4601      	mov	r1, r0
 8002836:	205a      	movs	r0, #90	@ 0x5a
 8002838:	f003 fc72 	bl	8006120 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800283c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800283e:	4618      	mov	r0, r3
 8002840:	3738      	adds	r7, #56	@ 0x38
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000ed04 	.word	0xe000ed04

0800284c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b090      	sub	sp, #64	@ 0x40
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800285e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10b      	bne.n	800287c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <xQueueGenericSendFromISR+0x3e>
 8002882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <xQueueGenericSendFromISR+0x42>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <xQueueGenericSendFromISR+0x44>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80028a6:	bf00      	nop
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d103      	bne.n	80028ba <xQueueGenericSendFromISR+0x6e>
 80028b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <xQueueGenericSendFromISR+0x72>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <xQueueGenericSendFromISR+0x74>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	623b      	str	r3, [r7, #32]
    }
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028dc:	f001 ff96 	bl	800480c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80028e0:	f3ef 8211 	mrs	r2, BASEPRI
 80028e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	61fa      	str	r2, [r7, #28]
 80028f6:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80028f8:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028fa:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002904:	429a      	cmp	r2, r3
 8002906:	d302      	bcc.n	800290e <xQueueGenericSendFromISR+0xc2>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d149      	bne.n	80029a2 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800290e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002910:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002914:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800291e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002920:	4618      	mov	r0, r3
 8002922:	f004 f913 	bl	8006b4c <SEGGER_SYSVIEW_ShrinkId>
 8002926:	4601      	mov	r1, r0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	461a      	mov	r2, r3
 800292c:	2060      	movs	r0, #96	@ 0x60
 800292e:	f003 fb27 	bl	8005f80 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002938:	f000 f95e 	bl	8002bf8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800293c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d112      	bne.n	800296c <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	2b00      	cmp	r3, #0
 800294c:	d026      	beq.n	800299c <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800294e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002950:	3324      	adds	r3, #36	@ 0x24
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fedc 	bl	8003710 <xTaskRemoveFromEventList>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01e      	beq.n	800299c <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e017      	b.n	800299c <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800296c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002970:	2b7f      	cmp	r3, #127	@ 0x7f
 8002972:	d10b      	bne.n	800298c <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	617b      	str	r3, [r7, #20]
    }
 8002986:	bf00      	nop
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800298c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002990:	3301      	adds	r3, #1
 8002992:	b2db      	uxtb	r3, r3
 8002994:	b25a      	sxtb	r2, r3
 8002996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800299c:	2301      	movs	r3, #1
 800299e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80029a0:	e00b      	b.n	80029ba <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80029a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a4:	4618      	mov	r0, r3
 80029a6:	f004 f8d1 	bl	8006b4c <SEGGER_SYSVIEW_ShrinkId>
 80029aa:	4601      	mov	r1, r0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	461a      	mov	r2, r3
 80029b0:	2060      	movs	r0, #96	@ 0x60
 80029b2:	f003 fae5 	bl	8005f80 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029bc:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80029c4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3740      	adds	r7, #64	@ 0x40
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b08f      	sub	sp, #60	@ 0x3c
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029dc:	2300      	movs	r3, #0
 80029de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80029e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10b      	bne.n	8002a02 <xQueueReceive+0x32>
        __asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	623b      	str	r3, [r7, #32]
    }
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	e7fd      	b.n	80029fe <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d103      	bne.n	8002a10 <xQueueReceive+0x40>
 8002a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <xQueueReceive+0x44>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <xQueueReceive+0x46>
 8002a14:	2300      	movs	r3, #0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10b      	bne.n	8002a32 <xQueueReceive+0x62>
        __asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	61fb      	str	r3, [r7, #28]
    }
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	e7fd      	b.n	8002a2e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a32:	f001 f811 	bl	8003a58 <xTaskGetSchedulerState>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <xQueueReceive+0x72>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <xQueueReceive+0x76>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <xQueueReceive+0x78>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <xQueueReceive+0x94>
        __asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	61bb      	str	r3, [r7, #24]
    }
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a64:	f001 fde2 	bl	800462c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02f      	beq.n	8002ad4 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a78:	f000 f928 	bl	8002ccc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 f864 	bl	8006b4c <SEGGER_SYSVIEW_ShrinkId>
 8002a84:	4604      	mov	r4, r0
 8002a86:	2000      	movs	r0, #0
 8002a88:	f004 f860 	bl	8006b4c <SEGGER_SYSVIEW_ShrinkId>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2101      	movs	r1, #1
 8002a92:	9100      	str	r1, [sp, #0]
 8002a94:	4621      	mov	r1, r4
 8002a96:	205c      	movs	r0, #92	@ 0x5c
 8002a98:	f003 fb42 	bl	8006120 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	1e5a      	subs	r2, r3, #1
 8002aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00f      	beq.n	8002acc <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aae:	3310      	adds	r3, #16
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fe2d 	bl	8003710 <xTaskRemoveFromEventList>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002abc:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf4 <xQueueReceive+0x224>)
 8002abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002acc:	f001 fde0 	bl	8004690 <vPortExitCritical>
                return pdPASS;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e08a      	b.n	8002bea <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d113      	bne.n	8002b02 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ada:	f001 fdd9 	bl	8004690 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f004 f833 	bl	8006b4c <SEGGER_SYSVIEW_ShrinkId>
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f004 f82f 	bl	8006b4c <SEGGER_SYSVIEW_ShrinkId>
 8002aee:	4602      	mov	r2, r0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2101      	movs	r1, #1
 8002af4:	9100      	str	r1, [sp, #0]
 8002af6:	4621      	mov	r1, r4
 8002af8:	205c      	movs	r0, #92	@ 0x5c
 8002afa:	f003 fb11 	bl	8006120 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e073      	b.n	8002bea <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d106      	bne.n	8002b16 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b08:	f107 0310 	add.w	r3, r7, #16
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fe67 	bl	80037e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b12:	2301      	movs	r3, #1
 8002b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b16:	f001 fdbb 	bl	8004690 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b1a:	f000 fba9 	bl	8003270 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b1e:	f001 fd85 	bl	800462c <vPortEnterCritical>
 8002b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2e:	d103      	bne.n	8002b38 <xQueueReceive+0x168>
 8002b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b3e:	b25b      	sxtb	r3, r3
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d103      	bne.n	8002b4e <xQueueReceive+0x17e>
 8002b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b4e:	f001 fd9f 	bl	8004690 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b52:	1d3a      	adds	r2, r7, #4
 8002b54:	f107 0310 	add.w	r3, r7, #16
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fe56 	bl	800380c <xTaskCheckForTimeOut>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d124      	bne.n	8002bb0 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b68:	f000 f928 	bl	8002dbc <prvIsQueueEmpty>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d018      	beq.n	8002ba4 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b74:	3324      	adds	r3, #36	@ 0x24
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fd72 	bl	8003664 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b82:	f000 f8c9 	bl	8002d18 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b86:	f000 fb81 	bl	800328c <xTaskResumeAll>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f47f af69 	bne.w	8002a64 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002b92:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <xQueueReceive+0x224>)
 8002b94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	e75f      	b.n	8002a64 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002ba4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ba6:	f000 f8b7 	bl	8002d18 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002baa:	f000 fb6f 	bl	800328c <xTaskResumeAll>
 8002bae:	e759      	b.n	8002a64 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002bb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bb2:	f000 f8b1 	bl	8002d18 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002bb6:	f000 fb69 	bl	800328c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bbc:	f000 f8fe 	bl	8002dbc <prvIsQueueEmpty>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f43f af4e 	beq.w	8002a64 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 ffbe 	bl	8006b4c <SEGGER_SYSVIEW_ShrinkId>
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f003 ffba 	bl	8006b4c <SEGGER_SYSVIEW_ShrinkId>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2101      	movs	r1, #1
 8002bde:	9100      	str	r1, [sp, #0]
 8002be0:	4621      	mov	r1, r4
 8002be2:	205c      	movs	r0, #92	@ 0x5c
 8002be4:	f003 fa9c 	bl	8006120 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002be8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3734      	adds	r7, #52	@ 0x34
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd90      	pop	{r4, r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	e000ed04 	.word	0xe000ed04

08002bf8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10d      	bne.n	8002c32 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d14d      	bne.n	8002cba <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 ff36 	bl	8003a94 <xTaskPriorityDisinherit>
 8002c28:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	e043      	b.n	8002cba <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d119      	bne.n	8002c6c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6858      	ldr	r0, [r3, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	461a      	mov	r2, r3
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	f004 f952 	bl	8006eec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	441a      	add	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d32b      	bcc.n	8002cba <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	e026      	b.n	8002cba <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68d8      	ldr	r0, [r3, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	461a      	mov	r2, r3
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	f004 f938 	bl	8006eec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	425b      	negs	r3, r3
 8002c86:	441a      	add	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d207      	bcs.n	8002ca8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	425b      	negs	r3, r3
 8002ca2:	441a      	add	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d105      	bne.n	8002cba <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002cc2:	697b      	ldr	r3, [r7, #20]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d018      	beq.n	8002d10 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	441a      	add	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d303      	bcc.n	8002d00 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68d9      	ldr	r1, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	461a      	mov	r2, r3
 8002d0a:	6838      	ldr	r0, [r7, #0]
 8002d0c:	f004 f8ee 	bl	8006eec <memcpy>
    }
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d20:	f001 fc84 	bl	800462c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d2a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d2c:	e011      	b.n	8002d52 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d012      	beq.n	8002d5c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3324      	adds	r3, #36	@ 0x24
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fce8 	bl	8003710 <xTaskRemoveFromEventList>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d46:	f000 fdc9 	bl	80038dc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	dce9      	bgt.n	8002d2e <prvUnlockQueue+0x16>
 8002d5a:	e000      	b.n	8002d5e <prvUnlockQueue+0x46>
                        break;
 8002d5c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	22ff      	movs	r2, #255	@ 0xff
 8002d62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002d66:	f001 fc93 	bl	8004690 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d6a:	f001 fc5f 	bl	800462c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d74:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d76:	e011      	b.n	8002d9c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d012      	beq.n	8002da6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3310      	adds	r3, #16
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fcc3 	bl	8003710 <xTaskRemoveFromEventList>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d90:	f000 fda4 	bl	80038dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d94:	7bbb      	ldrb	r3, [r7, #14]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	dce9      	bgt.n	8002d78 <prvUnlockQueue+0x60>
 8002da4:	e000      	b.n	8002da8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002da6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	22ff      	movs	r2, #255	@ 0xff
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002db0:	f001 fc6e 	bl	8004690 <vPortExitCritical>
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002dc4:	f001 fc32 	bl	800462c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e001      	b.n	8002dda <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dda:	f001 fc59 	bl	8004690 <vPortExitCritical>

    return xReturn;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002df0:	f001 fc1c 	bl	800462c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d102      	bne.n	8002e06 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002e00:	2301      	movs	r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e001      	b.n	8002e0a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e0a:	f001 fc41 	bl	8004690 <vPortExitCritical>

    return xReturn;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	e01e      	b.n	8002e66 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e28:	4a13      	ldr	r2, [pc, #76]	@ (8002e78 <vQueueAddToRegistry+0x60>)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d115      	bne.n	8002e60 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e34:	4910      	ldr	r1, [pc, #64]	@ (8002e78 <vQueueAddToRegistry+0x60>)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e78 <vQueueAddToRegistry+0x60>)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fe7d 	bl	8006b4c <SEGGER_SYSVIEW_ShrinkId>
 8002e52:	4601      	mov	r1, r0
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	2071      	movs	r0, #113	@ 0x71
 8002e5a:	f003 f891 	bl	8005f80 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e5e:	e006      	b.n	8002e6e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3301      	adds	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b07      	cmp	r3, #7
 8002e6a:	d9dd      	bls.n	8002e28 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200000c8 	.word	0x200000c8

08002e7c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e8c:	f001 fbce 	bl	800462c <vPortEnterCritical>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d103      	bne.n	8002ea6 <vQueueWaitForMessageRestricted+0x2a>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eac:	b25b      	sxtb	r3, r3
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d103      	bne.n	8002ebc <vQueueWaitForMessageRestricted+0x40>
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ebc:	f001 fbe8 	bl	8004690 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	3324      	adds	r3, #36	@ 0x24
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fbed 	bl	80036b0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff1e 	bl	8002d18 <prvUnlockQueue>
    }
 8002edc:	bf00      	nop
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	@ 0x30
 8002ee8:	af04      	add	r7, sp, #16
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 fcc9 	bl	8004890 <pvPortMalloc>
 8002efe:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00e      	beq.n	8002f24 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f06:	2058      	movs	r0, #88	@ 0x58
 8002f08:	f001 fcc2 	bl	8004890 <pvPortMalloc>
 8002f0c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f1a:	e005      	b.n	8002f28 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002f1c:	6978      	ldr	r0, [r7, #20]
 8002f1e:	f001 fd99 	bl	8004a54 <vPortFree>
 8002f22:	e001      	b.n	8002f28 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d013      	beq.n	8002f56 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	2300      	movs	r3, #0
 8002f32:	9303      	str	r3, [sp, #12]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	9302      	str	r3, [sp, #8]
 8002f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f80e 	bl	8002f66 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f4a:	69f8      	ldr	r0, [r7, #28]
 8002f4c:	f000 f8a2 	bl	8003094 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f50:	2301      	movs	r3, #1
 8002f52:	61bb      	str	r3, [r7, #24]
 8002f54:	e002      	b.n	8002f5c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
    }
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b088      	sub	sp, #32
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f76:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	21a5      	movs	r1, #165	@ 0xa5
 8002f80:	f003 ff86 	bl	8006e90 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f023 0307 	bic.w	r3, r3, #7
 8002f9c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	617b      	str	r3, [r7, #20]
    }
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d01f      	beq.n	8003006 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e012      	b.n	8002ff2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	7819      	ldrb	r1, [r3, #0]
 8002fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	4413      	add	r3, r2
 8002fda:	3334      	adds	r3, #52	@ 0x34
 8002fdc:	460a      	mov	r2, r1
 8002fde:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d006      	beq.n	8002ffa <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	2b09      	cmp	r3, #9
 8002ff6:	d9e9      	bls.n	8002fcc <prvInitialiseNewTask+0x66>
 8002ff8:	e000      	b.n	8002ffc <prvInitialiseNewTask+0x96>
            {
                break;
 8002ffa:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003004:	e003      	b.n	800300e <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800300e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003010:	2b04      	cmp	r3, #4
 8003012:	d901      	bls.n	8003018 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003014:	2304      	movs	r3, #4
 8003016:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800301c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800301e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003020:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003022:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003026:	2200      	movs	r2, #0
 8003028:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	3304      	adds	r3, #4
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f958 	bl	80022e4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003036:	3318      	adds	r3, #24
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f953 	bl	80022e4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003042:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003046:	f1c3 0205 	rsb	r2, r3, #5
 800304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003052:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003056:	3350      	adds	r3, #80	@ 0x50
 8003058:	2204      	movs	r2, #4
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f003 ff17 	bl	8006e90 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003064:	3354      	adds	r3, #84	@ 0x54
 8003066:	2201      	movs	r2, #1
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f003 ff10 	bl	8006e90 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	68f9      	ldr	r1, [r7, #12]
 8003074:	69b8      	ldr	r0, [r7, #24]
 8003076:	f001 f925 	bl	80042c4 <pxPortInitialiseStack>
 800307a:	4602      	mov	r2, r0
 800307c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800308a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800308c:	bf00      	nop
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003094:	b5b0      	push	{r4, r5, r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af02      	add	r7, sp, #8
 800309a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800309c:	f001 fac6 	bl	800462c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80030a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003190 <prvAddNewTaskToReadyList+0xfc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003190 <prvAddNewTaskToReadyList+0xfc>)
 80030a8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80030aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003194 <prvAddNewTaskToReadyList+0x100>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80030b2:	4a38      	ldr	r2, [pc, #224]	@ (8003194 <prvAddNewTaskToReadyList+0x100>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030b8:	4b35      	ldr	r3, [pc, #212]	@ (8003190 <prvAddNewTaskToReadyList+0xfc>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d110      	bne.n	80030e2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80030c0:	f000 fc30 	bl	8003924 <prvInitialiseTaskLists>
 80030c4:	e00d      	b.n	80030e2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80030c6:	4b34      	ldr	r3, [pc, #208]	@ (8003198 <prvAddNewTaskToReadyList+0x104>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030ce:	4b31      	ldr	r3, [pc, #196]	@ (8003194 <prvAddNewTaskToReadyList+0x100>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	429a      	cmp	r2, r3
 80030da:	d802      	bhi.n	80030e2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003194 <prvAddNewTaskToReadyList+0x100>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030e2:	4b2e      	ldr	r3, [pc, #184]	@ (800319c <prvAddNewTaskToReadyList+0x108>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	4a2c      	ldr	r2, [pc, #176]	@ (800319c <prvAddNewTaskToReadyList+0x108>)
 80030ea:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030ec:	4b2b      	ldr	r3, [pc, #172]	@ (800319c <prvAddNewTaskToReadyList+0x108>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <prvAddNewTaskToReadyList+0x94>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 fbff 	bl	8006900 <SEGGER_SYSVIEW_OnTaskCreate>
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	461d      	mov	r5, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461c      	mov	r4, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	1ae3      	subs	r3, r4, r3
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	462b      	mov	r3, r5
 8003124:	f001 fe66 	bl	8004df4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4618      	mov	r0, r3
 800312c:	f003 fc6c 	bl	8006a08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	2201      	movs	r2, #1
 8003136:	409a      	lsls	r2, r3
 8003138:	4b19      	ldr	r3, [pc, #100]	@ (80031a0 <prvAddNewTaskToReadyList+0x10c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4313      	orrs	r3, r2
 800313e:	4a18      	ldr	r2, [pc, #96]	@ (80031a0 <prvAddNewTaskToReadyList+0x10c>)
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4a15      	ldr	r2, [pc, #84]	@ (80031a4 <prvAddNewTaskToReadyList+0x110>)
 8003150:	441a      	add	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f7ff f8d0 	bl	80022fe <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800315e:	f001 fa97 	bl	8004690 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003162:	4b0d      	ldr	r3, [pc, #52]	@ (8003198 <prvAddNewTaskToReadyList+0x104>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00e      	beq.n	8003188 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <prvAddNewTaskToReadyList+0x100>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003174:	429a      	cmp	r2, r3
 8003176:	d207      	bcs.n	8003188 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003178:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <prvAddNewTaskToReadyList+0x114>)
 800317a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bdb0      	pop	{r4, r5, r7, pc}
 8003190:	200001e0 	.word	0x200001e0
 8003194:	20000108 	.word	0x20000108
 8003198:	200001ec 	.word	0x200001ec
 800319c:	200001fc 	.word	0x200001fc
 80031a0:	200001e8 	.word	0x200001e8
 80031a4:	2000010c 	.word	0x2000010c
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80031b2:	4b27      	ldr	r3, [pc, #156]	@ (8003250 <vTaskStartScheduler+0xa4>)
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	2300      	movs	r3, #0
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2300      	movs	r3, #0
 80031bc:	2282      	movs	r2, #130	@ 0x82
 80031be:	4925      	ldr	r1, [pc, #148]	@ (8003254 <vTaskStartScheduler+0xa8>)
 80031c0:	4825      	ldr	r0, [pc, #148]	@ (8003258 <vTaskStartScheduler+0xac>)
 80031c2:	f7ff fe8f 	bl	8002ee4 <xTaskCreate>
 80031c6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d102      	bne.n	80031d4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80031ce:	f000 fd5b 	bl	8003c88 <xTimerCreateTimerTask>
 80031d2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d124      	bne.n	8003224 <vTaskStartScheduler+0x78>
        __asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	60bb      	str	r3, [r7, #8]
    }
 80031ec:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80031ee:	4b1b      	ldr	r3, [pc, #108]	@ (800325c <vTaskStartScheduler+0xb0>)
 80031f0:	f04f 32ff 	mov.w	r2, #4294967295
 80031f4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80031f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003260 <vTaskStartScheduler+0xb4>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031fc:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <vTaskStartScheduler+0xb8>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003202:	4b19      	ldr	r3, [pc, #100]	@ (8003268 <vTaskStartScheduler+0xbc>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b12      	ldr	r3, [pc, #72]	@ (8003250 <vTaskStartScheduler+0xa4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d102      	bne.n	8003214 <vTaskStartScheduler+0x68>
 800320e:	f003 fb5b 	bl	80068c8 <SEGGER_SYSVIEW_OnIdle>
 8003212:	e004      	b.n	800321e <vTaskStartScheduler+0x72>
 8003214:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <vTaskStartScheduler+0xbc>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f003 fbb3 	bl	8006984 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800321e:	f001 f8e1 	bl	80043e4 <xPortStartScheduler>
 8003222:	e00f      	b.n	8003244 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322a:	d10b      	bne.n	8003244 <vTaskStartScheduler+0x98>
        __asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	607b      	str	r3, [r7, #4]
    }
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	e7fd      	b.n	8003240 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003244:	4b09      	ldr	r3, [pc, #36]	@ (800326c <vTaskStartScheduler+0xc0>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000204 	.word	0x20000204
 8003254:	080077f8 	.word	0x080077f8
 8003258:	080038f5 	.word	0x080038f5
 800325c:	20000200 	.word	0x20000200
 8003260:	200001ec 	.word	0x200001ec
 8003264:	200001e4 	.word	0x200001e4
 8003268:	20000108 	.word	0x20000108
 800326c:	08007900 	.word	0x08007900

08003270 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003274:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <vTaskSuspendAll+0x18>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	4a03      	ldr	r2, [pc, #12]	@ (8003288 <vTaskSuspendAll+0x18>)
 800327c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	20000208 	.word	0x20000208

0800328c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800329a:	4b44      	ldr	r3, [pc, #272]	@ (80033ac <xTaskResumeAll+0x120>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10b      	bne.n	80032ba <xTaskResumeAll+0x2e>
        __asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	603b      	str	r3, [r7, #0]
    }
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	e7fd      	b.n	80032b6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80032ba:	f001 f9b7 	bl	800462c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80032be:	4b3b      	ldr	r3, [pc, #236]	@ (80033ac <xTaskResumeAll+0x120>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	4a39      	ldr	r2, [pc, #228]	@ (80033ac <xTaskResumeAll+0x120>)
 80032c6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032c8:	4b38      	ldr	r3, [pc, #224]	@ (80033ac <xTaskResumeAll+0x120>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d165      	bne.n	800339c <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032d0:	4b37      	ldr	r3, [pc, #220]	@ (80033b0 <xTaskResumeAll+0x124>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d061      	beq.n	800339c <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032d8:	e032      	b.n	8003340 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032da:	4b36      	ldr	r3, [pc, #216]	@ (80033b4 <xTaskResumeAll+0x128>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3318      	adds	r3, #24
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff f866 	bl	80023b8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3304      	adds	r3, #4
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff f861 	bl	80023b8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f003 fb85 	bl	8006a08 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	2201      	movs	r2, #1
 8003304:	409a      	lsls	r2, r3
 8003306:	4b2c      	ldr	r3, [pc, #176]	@ (80033b8 <xTaskResumeAll+0x12c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4313      	orrs	r3, r2
 800330c:	4a2a      	ldr	r2, [pc, #168]	@ (80033b8 <xTaskResumeAll+0x12c>)
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4a27      	ldr	r2, [pc, #156]	@ (80033bc <xTaskResumeAll+0x130>)
 800331e:	441a      	add	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3304      	adds	r3, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f7fe ffe9 	bl	80022fe <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003330:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <xTaskResumeAll+0x134>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800333a:	4b22      	ldr	r3, [pc, #136]	@ (80033c4 <xTaskResumeAll+0x138>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003340:	4b1c      	ldr	r3, [pc, #112]	@ (80033b4 <xTaskResumeAll+0x128>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1c8      	bne.n	80032da <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800334e:	f000 fb67 	bl	8003a20 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003352:	4b1d      	ldr	r3, [pc, #116]	@ (80033c8 <xTaskResumeAll+0x13c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d010      	beq.n	8003380 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800335e:	f000 f859 	bl	8003414 <xTaskIncrementTick>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003368:	4b16      	ldr	r3, [pc, #88]	@ (80033c4 <xTaskResumeAll+0x138>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3b01      	subs	r3, #1
 8003372:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f1      	bne.n	800335e <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800337a:	4b13      	ldr	r3, [pc, #76]	@ (80033c8 <xTaskResumeAll+0x13c>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003380:	4b10      	ldr	r3, [pc, #64]	@ (80033c4 <xTaskResumeAll+0x138>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003388:	2301      	movs	r3, #1
 800338a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800338c:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <xTaskResumeAll+0x140>)
 800338e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800339c:	f001 f978 	bl	8004690 <vPortExitCritical>

    return xAlreadyYielded;
 80033a0:	68bb      	ldr	r3, [r7, #8]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000208 	.word	0x20000208
 80033b0:	200001e0 	.word	0x200001e0
 80033b4:	200001a0 	.word	0x200001a0
 80033b8:	200001e8 	.word	0x200001e8
 80033bc:	2000010c 	.word	0x2000010c
 80033c0:	20000108 	.word	0x20000108
 80033c4:	200001f4 	.word	0x200001f4
 80033c8:	200001f0 	.word	0x200001f0
 80033cc:	e000ed04 	.word	0xe000ed04

080033d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <xTaskGetTickCount+0x1c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80033dc:	687b      	ldr	r3, [r7, #4]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	200001e4 	.word	0x200001e4

080033f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033f6:	f001 fa09 	bl	800480c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80033fe:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <xTaskGetTickCountFromISR+0x20>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003404:	683b      	ldr	r3, [r7, #0]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200001e4 	.word	0x200001e4

08003414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800341e:	4b51      	ldr	r3, [pc, #324]	@ (8003564 <xTaskIncrementTick+0x150>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 8093 	bne.w	800354e <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003428:	4b4f      	ldr	r3, [pc, #316]	@ (8003568 <xTaskIncrementTick+0x154>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3301      	adds	r3, #1
 800342e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003430:	4a4d      	ldr	r2, [pc, #308]	@ (8003568 <xTaskIncrementTick+0x154>)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d121      	bne.n	8003480 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800343c:	4b4b      	ldr	r3, [pc, #300]	@ (800356c <xTaskIncrementTick+0x158>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <xTaskIncrementTick+0x4a>
        __asm volatile
 8003446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	603b      	str	r3, [r7, #0]
    }
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	e7fd      	b.n	800345a <xTaskIncrementTick+0x46>
 800345e:	4b43      	ldr	r3, [pc, #268]	@ (800356c <xTaskIncrementTick+0x158>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	4b42      	ldr	r3, [pc, #264]	@ (8003570 <xTaskIncrementTick+0x15c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a40      	ldr	r2, [pc, #256]	@ (800356c <xTaskIncrementTick+0x158>)
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	4a40      	ldr	r2, [pc, #256]	@ (8003570 <xTaskIncrementTick+0x15c>)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	4b40      	ldr	r3, [pc, #256]	@ (8003574 <xTaskIncrementTick+0x160>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3301      	adds	r3, #1
 8003478:	4a3e      	ldr	r2, [pc, #248]	@ (8003574 <xTaskIncrementTick+0x160>)
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	f000 fad0 	bl	8003a20 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003480:	4b3d      	ldr	r3, [pc, #244]	@ (8003578 <xTaskIncrementTick+0x164>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	429a      	cmp	r2, r3
 8003488:	d34c      	bcc.n	8003524 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800348a:	4b38      	ldr	r3, [pc, #224]	@ (800356c <xTaskIncrementTick+0x158>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d104      	bne.n	800349e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003494:	4b38      	ldr	r3, [pc, #224]	@ (8003578 <xTaskIncrementTick+0x164>)
 8003496:	f04f 32ff 	mov.w	r2, #4294967295
 800349a:	601a      	str	r2, [r3, #0]
                    break;
 800349c:	e042      	b.n	8003524 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800349e:	4b33      	ldr	r3, [pc, #204]	@ (800356c <xTaskIncrementTick+0x158>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d203      	bcs.n	80034be <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80034b6:	4a30      	ldr	r2, [pc, #192]	@ (8003578 <xTaskIncrementTick+0x164>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034bc:	e032      	b.n	8003524 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	3304      	adds	r3, #4
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe ff78 	bl	80023b8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d004      	beq.n	80034da <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	3318      	adds	r3, #24
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe ff6f 	bl	80023b8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f003 fa93 	bl	8006a08 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e6:	2201      	movs	r2, #1
 80034e8:	409a      	lsls	r2, r3
 80034ea:	4b24      	ldr	r3, [pc, #144]	@ (800357c <xTaskIncrementTick+0x168>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	4a22      	ldr	r2, [pc, #136]	@ (800357c <xTaskIncrementTick+0x168>)
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4a1f      	ldr	r2, [pc, #124]	@ (8003580 <xTaskIncrementTick+0x16c>)
 8003502:	441a      	add	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	3304      	adds	r3, #4
 8003508:	4619      	mov	r1, r3
 800350a:	4610      	mov	r0, r2
 800350c:	f7fe fef7 	bl	80022fe <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003514:	4b1b      	ldr	r3, [pc, #108]	@ (8003584 <xTaskIncrementTick+0x170>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	429a      	cmp	r2, r3
 800351c:	d3b5      	bcc.n	800348a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800351e:	2301      	movs	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003522:	e7b2      	b.n	800348a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003524:	4b17      	ldr	r3, [pc, #92]	@ (8003584 <xTaskIncrementTick+0x170>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800352a:	4915      	ldr	r1, [pc, #84]	@ (8003580 <xTaskIncrementTick+0x16c>)
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d901      	bls.n	8003540 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800353c:	2301      	movs	r3, #1
 800353e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003540:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <xTaskIncrementTick+0x174>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8003548:	2301      	movs	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	e004      	b.n	8003558 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800354e:	4b0f      	ldr	r3, [pc, #60]	@ (800358c <xTaskIncrementTick+0x178>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3301      	adds	r3, #1
 8003554:	4a0d      	ldr	r2, [pc, #52]	@ (800358c <xTaskIncrementTick+0x178>)
 8003556:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003558:	697b      	ldr	r3, [r7, #20]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000208 	.word	0x20000208
 8003568:	200001e4 	.word	0x200001e4
 800356c:	20000198 	.word	0x20000198
 8003570:	2000019c 	.word	0x2000019c
 8003574:	200001f8 	.word	0x200001f8
 8003578:	20000200 	.word	0x20000200
 800357c:	200001e8 	.word	0x200001e8
 8003580:	2000010c 	.word	0x2000010c
 8003584:	20000108 	.word	0x20000108
 8003588:	200001f4 	.word	0x200001f4
 800358c:	200001f0 	.word	0x200001f0

08003590 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003596:	4b2d      	ldr	r3, [pc, #180]	@ (800364c <vTaskSwitchContext+0xbc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800359e:	4b2c      	ldr	r3, [pc, #176]	@ (8003650 <vTaskSwitchContext+0xc0>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80035a4:	e04e      	b.n	8003644 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80035a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003650 <vTaskSwitchContext+0xc0>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035ac:	4b29      	ldr	r3, [pc, #164]	@ (8003654 <vTaskSwitchContext+0xc4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	f1c3 031f 	rsb	r3, r3, #31
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	4925      	ldr	r1, [pc, #148]	@ (8003658 <vTaskSwitchContext+0xc8>)
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <vTaskSwitchContext+0x5e>
        __asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	607b      	str	r3, [r7, #4]
    }
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	e7fd      	b.n	80035ea <vTaskSwitchContext+0x5a>
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4a17      	ldr	r2, [pc, #92]	@ (8003658 <vTaskSwitchContext+0xc8>)
 80035fa:	4413      	add	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	3308      	adds	r3, #8
 8003610:	429a      	cmp	r2, r3
 8003612:	d104      	bne.n	800361e <vTaskSwitchContext+0x8e>
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4a0d      	ldr	r2, [pc, #52]	@ (800365c <vTaskSwitchContext+0xcc>)
 8003626:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003628:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <vTaskSwitchContext+0xcc>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b0c      	ldr	r3, [pc, #48]	@ (8003660 <vTaskSwitchContext+0xd0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d102      	bne.n	800363a <vTaskSwitchContext+0xaa>
 8003634:	f003 f948 	bl	80068c8 <SEGGER_SYSVIEW_OnIdle>
}
 8003638:	e004      	b.n	8003644 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800363a:	4b08      	ldr	r3, [pc, #32]	@ (800365c <vTaskSwitchContext+0xcc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f003 f9a0 	bl	8006984 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003644:	bf00      	nop
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000208 	.word	0x20000208
 8003650:	200001f4 	.word	0x200001f4
 8003654:	200001e8 	.word	0x200001e8
 8003658:	2000010c 	.word	0x2000010c
 800365c:	20000108 	.word	0x20000108
 8003660:	20000204 	.word	0x20000204

08003664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10b      	bne.n	800368c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	60fb      	str	r3, [r7, #12]
    }
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800368c:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <vTaskPlaceOnEventList+0x48>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3318      	adds	r3, #24
 8003692:	4619      	mov	r1, r3
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7fe fe56 	bl	8002346 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800369a:	2101      	movs	r1, #1
 800369c:	6838      	ldr	r0, [r7, #0]
 800369e:	f000 fa7b 	bl	8003b98 <prvAddCurrentTaskToDelayedList>
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000108 	.word	0x20000108

080036b0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10b      	bne.n	80036da <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	617b      	str	r3, [r7, #20]
    }
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
 80036d8:	e7fd      	b.n	80036d6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036da:	4b0c      	ldr	r3, [pc, #48]	@ (800370c <vTaskPlaceOnEventListRestricted+0x5c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3318      	adds	r3, #24
 80036e0:	4619      	mov	r1, r3
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7fe fe0b 	bl	80022fe <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295
 80036f2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80036f4:	2024      	movs	r0, #36	@ 0x24
 80036f6:	f002 fbe9 	bl	8005ecc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	68b8      	ldr	r0, [r7, #8]
 80036fe:	f000 fa4b 	bl	8003b98 <prvAddCurrentTaskToDelayedList>
    }
 8003702:	bf00      	nop
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000108 	.word	0x20000108

08003710 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10b      	bne.n	800373e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	60fb      	str	r3, [r7, #12]
    }
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	e7fd      	b.n	800373a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	3318      	adds	r3, #24
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fe38 	bl	80023b8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003748:	4b1f      	ldr	r3, [pc, #124]	@ (80037c8 <xTaskRemoveFromEventList+0xb8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d120      	bne.n	8003792 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	3304      	adds	r3, #4
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fe2f 	bl	80023b8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4618      	mov	r0, r3
 800375e:	f003 f953 	bl	8006a08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	2201      	movs	r2, #1
 8003768:	409a      	lsls	r2, r3
 800376a:	4b18      	ldr	r3, [pc, #96]	@ (80037cc <xTaskRemoveFromEventList+0xbc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4313      	orrs	r3, r2
 8003770:	4a16      	ldr	r2, [pc, #88]	@ (80037cc <xTaskRemoveFromEventList+0xbc>)
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4a13      	ldr	r2, [pc, #76]	@ (80037d0 <xTaskRemoveFromEventList+0xc0>)
 8003782:	441a      	add	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f7fe fdb7 	bl	80022fe <vListInsertEnd>
 8003790:	e005      	b.n	800379e <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	3318      	adds	r3, #24
 8003796:	4619      	mov	r1, r3
 8003798:	480e      	ldr	r0, [pc, #56]	@ (80037d4 <xTaskRemoveFromEventList+0xc4>)
 800379a:	f7fe fdb0 	bl	80022fe <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a2:	4b0d      	ldr	r3, [pc, #52]	@ (80037d8 <xTaskRemoveFromEventList+0xc8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d905      	bls.n	80037b8 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80037ac:	2301      	movs	r3, #1
 80037ae:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80037b0:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <xTaskRemoveFromEventList+0xcc>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e001      	b.n	80037bc <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80037bc:	697b      	ldr	r3, [r7, #20]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000208 	.word	0x20000208
 80037cc:	200001e8 	.word	0x200001e8
 80037d0:	2000010c 	.word	0x2000010c
 80037d4:	200001a0 	.word	0x200001a0
 80037d8:	20000108 	.word	0x20000108
 80037dc:	200001f4 	.word	0x200001f4

080037e0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <vTaskInternalSetTimeOutState+0x24>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037f0:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <vTaskInternalSetTimeOutState+0x28>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	605a      	str	r2, [r3, #4]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	200001f8 	.word	0x200001f8
 8003808:	200001e4 	.word	0x200001e4

0800380c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	613b      	str	r3, [r7, #16]
    }
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	60fb      	str	r3, [r7, #12]
    }
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	e7fd      	b.n	800384e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003852:	f000 feeb 	bl	800462c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003856:	4b1f      	ldr	r3, [pc, #124]	@ (80038d4 <xTaskCheckForTimeOut+0xc8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d102      	bne.n	8003876 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	e026      	b.n	80038c4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b17      	ldr	r3, [pc, #92]	@ (80038d8 <xTaskCheckForTimeOut+0xcc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d00a      	beq.n	8003898 <xTaskCheckForTimeOut+0x8c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	429a      	cmp	r2, r3
 800388a:	d305      	bcc.n	8003898 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800388c:	2301      	movs	r3, #1
 800388e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	e015      	b.n	80038c4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d20b      	bcs.n	80038ba <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	1ad2      	subs	r2, r2, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ff96 	bl	80037e0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	e004      	b.n	80038c4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80038c0:	2301      	movs	r3, #1
 80038c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80038c4:	f000 fee4 	bl	8004690 <vPortExitCritical>

    return xReturn;
 80038c8:	69fb      	ldr	r3, [r7, #28]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200001e4 	.word	0x200001e4
 80038d8:	200001f8 	.word	0x200001f8

080038dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80038e0:	4b03      	ldr	r3, [pc, #12]	@ (80038f0 <vTaskMissedYield+0x14>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	200001f4 	.word	0x200001f4

080038f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038fc:	f000 f852 	bl	80039a4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003900:	4b06      	ldr	r3, [pc, #24]	@ (800391c <prvIdleTask+0x28>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d9f9      	bls.n	80038fc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003908:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <prvIdleTask+0x2c>)
 800390a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003918:	e7f0      	b.n	80038fc <prvIdleTask+0x8>
 800391a:	bf00      	nop
 800391c:	2000010c 	.word	0x2000010c
 8003920:	e000ed04 	.word	0xe000ed04

08003924 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	e00c      	b.n	800394a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4a12      	ldr	r2, [pc, #72]	@ (8003984 <prvInitialiseTaskLists+0x60>)
 800393c:	4413      	add	r3, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fcb0 	bl	80022a4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3301      	adds	r3, #1
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d9ef      	bls.n	8003930 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003950:	480d      	ldr	r0, [pc, #52]	@ (8003988 <prvInitialiseTaskLists+0x64>)
 8003952:	f7fe fca7 	bl	80022a4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003956:	480d      	ldr	r0, [pc, #52]	@ (800398c <prvInitialiseTaskLists+0x68>)
 8003958:	f7fe fca4 	bl	80022a4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800395c:	480c      	ldr	r0, [pc, #48]	@ (8003990 <prvInitialiseTaskLists+0x6c>)
 800395e:	f7fe fca1 	bl	80022a4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003962:	480c      	ldr	r0, [pc, #48]	@ (8003994 <prvInitialiseTaskLists+0x70>)
 8003964:	f7fe fc9e 	bl	80022a4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003968:	480b      	ldr	r0, [pc, #44]	@ (8003998 <prvInitialiseTaskLists+0x74>)
 800396a:	f7fe fc9b 	bl	80022a4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800396e:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <prvInitialiseTaskLists+0x78>)
 8003970:	4a05      	ldr	r2, [pc, #20]	@ (8003988 <prvInitialiseTaskLists+0x64>)
 8003972:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003974:	4b0a      	ldr	r3, [pc, #40]	@ (80039a0 <prvInitialiseTaskLists+0x7c>)
 8003976:	4a05      	ldr	r2, [pc, #20]	@ (800398c <prvInitialiseTaskLists+0x68>)
 8003978:	601a      	str	r2, [r3, #0]
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	2000010c 	.word	0x2000010c
 8003988:	20000170 	.word	0x20000170
 800398c:	20000184 	.word	0x20000184
 8003990:	200001a0 	.word	0x200001a0
 8003994:	200001b4 	.word	0x200001b4
 8003998:	200001cc 	.word	0x200001cc
 800399c:	20000198 	.word	0x20000198
 80039a0:	2000019c 	.word	0x2000019c

080039a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039aa:	e019      	b.n	80039e0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80039ac:	f000 fe3e 	bl	800462c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039b0:	4b10      	ldr	r3, [pc, #64]	@ (80039f4 <prvCheckTasksWaitingTermination+0x50>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe fcfb 	bl	80023b8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80039c2:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <prvCheckTasksWaitingTermination+0x54>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	4a0b      	ldr	r2, [pc, #44]	@ (80039f8 <prvCheckTasksWaitingTermination+0x54>)
 80039ca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <prvCheckTasksWaitingTermination+0x58>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	4a0a      	ldr	r2, [pc, #40]	@ (80039fc <prvCheckTasksWaitingTermination+0x58>)
 80039d4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80039d6:	f000 fe5b 	bl	8004690 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f810 	bl	8003a00 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039e0:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <prvCheckTasksWaitingTermination+0x58>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e1      	bne.n	80039ac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200001b4 	.word	0x200001b4
 80039f8:	200001e0 	.word	0x200001e0
 80039fc:	200001c8 	.word	0x200001c8

08003a00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 f821 	bl	8004a54 <vPortFree>
                vPortFree( pxTCB );
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f001 f81e 	bl	8004a54 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a24:	4b0a      	ldr	r3, [pc, #40]	@ (8003a50 <prvResetNextTaskUnblockTime+0x30>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d104      	bne.n	8003a38 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a2e:	4b09      	ldr	r3, [pc, #36]	@ (8003a54 <prvResetNextTaskUnblockTime+0x34>)
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a36:	e005      	b.n	8003a44 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a38:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <prvResetNextTaskUnblockTime+0x30>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a04      	ldr	r2, [pc, #16]	@ (8003a54 <prvResetNextTaskUnblockTime+0x34>)
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000198 	.word	0x20000198
 8003a54:	20000200 	.word	0x20000200

08003a58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <xTaskGetSchedulerState+0x34>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a66:	2301      	movs	r3, #1
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	e008      	b.n	8003a7e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a6c:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <xTaskGetSchedulerState+0x38>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a74:	2302      	movs	r3, #2
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	e001      	b.n	8003a7e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a7e:	687b      	ldr	r3, [r7, #4]
    }
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	200001ec 	.word	0x200001ec
 8003a90:	20000208 	.word	0x20000208

08003a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d06a      	beq.n	8003b80 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003aaa:	4b38      	ldr	r3, [pc, #224]	@ (8003b8c <xTaskPriorityDisinherit+0xf8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d00b      	beq.n	8003acc <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	60fb      	str	r3, [r7, #12]
    }
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8003ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	60bb      	str	r3, [r7, #8]
    }
 8003ae6:	bf00      	nop
 8003ae8:	bf00      	nop
 8003aea:	e7fd      	b.n	8003ae8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af0:	1e5a      	subs	r2, r3, #1
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d03e      	beq.n	8003b80 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d13a      	bne.n	8003b80 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe fc52 	bl	80023b8 <uxListRemove>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	2201      	movs	r2, #1
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43da      	mvns	r2, r3
 8003b26:	4b1a      	ldr	r3, [pc, #104]	@ (8003b90 <xTaskPriorityDisinherit+0xfc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	4a18      	ldr	r2, [pc, #96]	@ (8003b90 <xTaskPriorityDisinherit+0xfc>)
 8003b2e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4619      	mov	r1, r3
 8003b34:	204a      	movs	r0, #74	@ 0x4a
 8003b36:	f002 f9e7 	bl	8005f08 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b46:	f1c3 0205 	rsb	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	2201      	movs	r2, #1
 8003b54:	409a      	lsls	r2, r3
 8003b56:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <xTaskPriorityDisinherit+0xfc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b90 <xTaskPriorityDisinherit+0xfc>)
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4a09      	ldr	r2, [pc, #36]	@ (8003b94 <xTaskPriorityDisinherit+0x100>)
 8003b6e:	441a      	add	r2, r3
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f7fe fbc1 	bl	80022fe <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b80:	697b      	ldr	r3, [r7, #20]
    }
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000108 	.word	0x20000108
 8003b90:	200001e8 	.word	0x200001e8
 8003b94:	2000010c 	.word	0x2000010c

08003b98 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003ba2:	4b32      	ldr	r3, [pc, #200]	@ (8003c6c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ba8:	4b31      	ldr	r3, [pc, #196]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fc02 	bl	80023b8 <uxListRemove>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003bba:	4b2d      	ldr	r3, [pc, #180]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c74 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	4a29      	ldr	r2, [pc, #164]	@ (8003c74 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003bd0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d110      	bne.n	8003bfc <prvAddCurrentTaskToDelayedList+0x64>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003be0:	4b23      	ldr	r3, [pc, #140]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	211b      	movs	r1, #27
 8003be6:	4618      	mov	r0, r3
 8003be8:	f002 ff50 	bl	8006a8c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bec:	4b20      	ldr	r3, [pc, #128]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4820      	ldr	r0, [pc, #128]	@ (8003c78 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003bf6:	f7fe fb82 	bl	80022fe <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003bfa:	e032      	b.n	8003c62 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4413      	add	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c04:	4b1a      	ldr	r3, [pc, #104]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d20f      	bcs.n	8003c34 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003c14:	4b16      	ldr	r3, [pc, #88]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2104      	movs	r1, #4
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f002 ff36 	bl	8006a8c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c20:	4b16      	ldr	r3, [pc, #88]	@ (8003c7c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b12      	ldr	r3, [pc, #72]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7fe fb8a 	bl	8002346 <vListInsert>
}
 8003c32:	e016      	b.n	8003c62 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003c34:	4b0e      	ldr	r3, [pc, #56]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2104      	movs	r1, #4
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f002 ff26 	bl	8006a8c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c40:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b0a      	ldr	r3, [pc, #40]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f7fe fb7a 	bl	8002346 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003c52:	4b0c      	ldr	r3, [pc, #48]	@ (8003c84 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d202      	bcs.n	8003c62 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003c5c:	4a09      	ldr	r2, [pc, #36]	@ (8003c84 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	6013      	str	r3, [r2, #0]
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200001e4 	.word	0x200001e4
 8003c70:	20000108 	.word	0x20000108
 8003c74:	200001e8 	.word	0x200001e8
 8003c78:	200001cc 	.word	0x200001cc
 8003c7c:	2000019c 	.word	0x2000019c
 8003c80:	20000198 	.word	0x20000198
 8003c84:	20000200 	.word	0x20000200

08003c88 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c92:	f000 fae1 	bl	8004258 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c96:	4b12      	ldr	r3, [pc, #72]	@ (8003ce0 <xTimerCreateTimerTask+0x58>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003c9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ce4 <xTimerCreateTimerTask+0x5c>)
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003cac:	490e      	ldr	r1, [pc, #56]	@ (8003ce8 <xTimerCreateTimerTask+0x60>)
 8003cae:	480f      	ldr	r0, [pc, #60]	@ (8003cec <xTimerCreateTimerTask+0x64>)
 8003cb0:	f7ff f918 	bl	8002ee4 <xTaskCreate>
 8003cb4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	603b      	str	r3, [r7, #0]
    }
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
 8003cd2:	e7fd      	b.n	8003cd0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003cd4:	687b      	ldr	r3, [r7, #4]
    }
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	2000023c 	.word	0x2000023c
 8003ce4:	20000240 	.word	0x20000240
 8003ce8:	08007800 	.word	0x08007800
 8003cec:	08003e29 	.word	0x08003e29

08003cf0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	@ 0x28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <xTimerGenericCommand+0x30>
        __asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	623b      	str	r3, [r7, #32]
    }
 8003d1a:	bf00      	nop
 8003d1c:	bf00      	nop
 8003d1e:	e7fd      	b.n	8003d1c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003d20:	4b19      	ldr	r3, [pc, #100]	@ (8003d88 <xTimerGenericCommand+0x98>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d02a      	beq.n	8003d7e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b05      	cmp	r3, #5
 8003d38:	dc18      	bgt.n	8003d6c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d3a:	f7ff fe8d 	bl	8003a58 <xTaskGetSchedulerState>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d109      	bne.n	8003d58 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d44:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <xTimerGenericCommand+0x98>)
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	f107 0114 	add.w	r1, r7, #20
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d50:	f7fe fc52 	bl	80025f8 <xQueueGenericSend>
 8003d54:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d56:	e012      	b.n	8003d7e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d58:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <xTimerGenericCommand+0x98>)
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	f107 0114 	add.w	r1, r7, #20
 8003d60:	2300      	movs	r3, #0
 8003d62:	2200      	movs	r2, #0
 8003d64:	f7fe fc48 	bl	80025f8 <xQueueGenericSend>
 8003d68:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d6a:	e008      	b.n	8003d7e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d6c:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <xTimerGenericCommand+0x98>)
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	f107 0114 	add.w	r1, r7, #20
 8003d74:	2300      	movs	r3, #0
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	f7fe fd68 	bl	800284c <xQueueGenericSendFromISR>
 8003d7c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003d80:	4618      	mov	r0, r3
 8003d82:	3728      	adds	r7, #40	@ 0x28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	2000023c 	.word	0x2000023c

08003d8c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d96:	4b23      	ldr	r3, [pc, #140]	@ (8003e24 <prvProcessExpiredTimer+0x98>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe fb07 	bl	80023b8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d023      	beq.n	8003e00 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	18d1      	adds	r1, r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	6978      	ldr	r0, [r7, #20]
 8003dc6:	f000 f8d5 	bl	8003f74 <prvInsertTimerInActiveList>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d020      	beq.n	8003e12 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	6978      	ldr	r0, [r7, #20]
 8003ddc:	f7ff ff88 	bl	8003cf0 <xTimerGenericCommand>
 8003de0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d114      	bne.n	8003e12 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	60fb      	str	r3, [r7, #12]
    }
 8003dfa:	bf00      	nop
 8003dfc:	bf00      	nop
 8003dfe:	e7fd      	b.n	8003dfc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	6978      	ldr	r0, [r7, #20]
 8003e18:	4798      	blx	r3
    }
 8003e1a:	bf00      	nop
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000234 	.word	0x20000234

08003e28 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e30:	f107 0308 	add.w	r3, r7, #8
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f859 	bl	8003eec <prvGetNextExpireTime>
 8003e3a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f805 	bl	8003e50 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e46:	f000 f8d7 	bl	8003ff8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e4a:	bf00      	nop
 8003e4c:	e7f0      	b.n	8003e30 <prvTimerTask+0x8>
	...

08003e50 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e5a:	f7ff fa09 	bl	8003270 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e5e:	f107 0308 	add.w	r3, r7, #8
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f866 	bl	8003f34 <prvSampleTimeNow>
 8003e68:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d130      	bne.n	8003ed2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <prvProcessTimerOrBlockTask+0x3c>
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d806      	bhi.n	8003e8c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e7e:	f7ff fa05 	bl	800328c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e82:	68f9      	ldr	r1, [r7, #12]
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff ff81 	bl	8003d8c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e8a:	e024      	b.n	8003ed6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e92:	4b13      	ldr	r3, [pc, #76]	@ (8003ee0 <prvProcessTimerOrBlockTask+0x90>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <prvProcessTimerOrBlockTask+0x50>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <prvProcessTimerOrBlockTask+0x52>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee4 <prvProcessTimerOrBlockTask+0x94>)
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f7fe ffe3 	bl	8002e7c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003eb6:	f7ff f9e9 	bl	800328c <xTaskResumeAll>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10a      	bne.n	8003ed6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003ec0:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <prvProcessTimerOrBlockTask+0x98>)
 8003ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	f3bf 8f6f 	isb	sy
    }
 8003ed0:	e001      	b.n	8003ed6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003ed2:	f7ff f9db 	bl	800328c <xTaskResumeAll>
    }
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000238 	.word	0x20000238
 8003ee4:	2000023c 	.word	0x2000023c
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f30 <prvGetNextExpireTime+0x44>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <prvGetNextExpireTime+0x16>
 8003efe:	2201      	movs	r2, #1
 8003f00:	e000      	b.n	8003f04 <prvGetNextExpireTime+0x18>
 8003f02:	2200      	movs	r2, #0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f10:	4b07      	ldr	r3, [pc, #28]	@ (8003f30 <prvGetNextExpireTime+0x44>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e001      	b.n	8003f20 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003f20:	68fb      	ldr	r3, [r7, #12]
    }
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20000234 	.word	0x20000234

08003f34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003f3c:	f7ff fa48 	bl	80033d0 <xTaskGetTickCount>
 8003f40:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f42:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <prvSampleTimeNow+0x3c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d205      	bcs.n	8003f58 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003f4c:	f000 f91e 	bl	800418c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e002      	b.n	8003f5e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f5e:	4a04      	ldr	r2, [pc, #16]	@ (8003f70 <prvSampleTimeNow+0x3c>)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f64:	68fb      	ldr	r3, [r7, #12]
    }
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000244 	.word	0x20000244

08003f74 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d812      	bhi.n	8003fc0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	1ad2      	subs	r2, r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d302      	bcc.n	8003fae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e01b      	b.n	8003fe6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fae:	4b10      	ldr	r3, [pc, #64]	@ (8003ff0 <prvInsertTimerInActiveList+0x7c>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7fe f9c4 	bl	8002346 <vListInsert>
 8003fbe:	e012      	b.n	8003fe6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d206      	bcs.n	8003fd6 <prvInsertTimerInActiveList+0x62>
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	e007      	b.n	8003fe6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fd6:	4b07      	ldr	r3, [pc, #28]	@ (8003ff4 <prvInsertTimerInActiveList+0x80>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	f7fe f9b0 	bl	8002346 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003fe6:	697b      	ldr	r3, [r7, #20]
    }
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000238 	.word	0x20000238
 8003ff4:	20000234 	.word	0x20000234

08003ff8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08c      	sub	sp, #48	@ 0x30
 8003ffc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ffe:	e0b2      	b.n	8004166 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f2c0 80af 	blt.w	8004166 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d004      	beq.n	800401e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	3304      	adds	r3, #4
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe f9cd 	bl	80023b8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800401e:	1d3b      	adds	r3, r7, #4
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff87 	bl	8003f34 <prvSampleTimeNow>
 8004026:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b09      	cmp	r3, #9
 800402c:	f200 8098 	bhi.w	8004160 <prvProcessReceivedCommands+0x168>
 8004030:	a201      	add	r2, pc, #4	@ (adr r2, 8004038 <prvProcessReceivedCommands+0x40>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	08004061 	.word	0x08004061
 800403c:	08004061 	.word	0x08004061
 8004040:	08004061 	.word	0x08004061
 8004044:	080040d7 	.word	0x080040d7
 8004048:	080040eb 	.word	0x080040eb
 800404c:	08004137 	.word	0x08004137
 8004050:	08004061 	.word	0x08004061
 8004054:	08004061 	.word	0x08004061
 8004058:	080040d7 	.word	0x080040d7
 800405c:	080040eb 	.word	0x080040eb
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	b2da      	uxtb	r2, r3
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	18d1      	adds	r1, r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a3a      	ldr	r2, [r7, #32]
 800407e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004080:	f7ff ff78 	bl	8003f74 <prvInsertTimerInActiveList>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d06c      	beq.n	8004164 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004090:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d061      	beq.n	8004164 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	441a      	add	r2, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	2300      	movs	r3, #0
 80040ae:	2100      	movs	r1, #0
 80040b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040b2:	f7ff fe1d 	bl	8003cf0 <xTimerGenericCommand>
 80040b6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d152      	bne.n	8004164 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	61bb      	str	r3, [r7, #24]
    }
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	e7fd      	b.n	80040d2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80040e8:	e03d      	b.n	8004166 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	617b      	str	r3, [r7, #20]
    }
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	e7fd      	b.n	800411e <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	18d1      	adds	r1, r2, r3
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	6a3a      	ldr	r2, [r7, #32]
 800412e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004130:	f7ff ff20 	bl	8003f74 <prvInsertTimerInActiveList>
                        break;
 8004134:	e017      	b.n	8004166 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d103      	bne.n	800414c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8004144:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004146:	f000 fc85 	bl	8004a54 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800414a:	e00c      	b.n	8004166 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	b2da      	uxtb	r2, r3
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800415e:	e002      	b.n	8004166 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004160:	bf00      	nop
 8004162:	e000      	b.n	8004166 <prvProcessReceivedCommands+0x16e>
                        break;
 8004164:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004166:	4b08      	ldr	r3, [pc, #32]	@ (8004188 <prvProcessReceivedCommands+0x190>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f107 0108 	add.w	r1, r7, #8
 800416e:	2200      	movs	r2, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe fc2d 	bl	80029d0 <xQueueReceive>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	f47f af41 	bne.w	8004000 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800417e:	bf00      	nop
 8004180:	bf00      	nop
 8004182:	3728      	adds	r7, #40	@ 0x28
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	2000023c 	.word	0x2000023c

0800418c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004192:	e049      	b.n	8004228 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004194:	4b2e      	ldr	r3, [pc, #184]	@ (8004250 <prvSwitchTimerLists+0xc4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800419e:	4b2c      	ldr	r3, [pc, #176]	@ (8004250 <prvSwitchTimerLists+0xc4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe f903 	bl	80023b8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d02f      	beq.n	8004228 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4413      	add	r3, r2
 80041d0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d90e      	bls.n	80041f8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004250 <prvSwitchTimerLists+0xc4>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f7fe f8a8 	bl	8002346 <vListInsert>
 80041f6:	e017      	b.n	8004228 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041f8:	2300      	movs	r3, #0
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	2300      	movs	r3, #0
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	2100      	movs	r1, #0
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7ff fd74 	bl	8003cf0 <xTimerGenericCommand>
 8004208:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	603b      	str	r3, [r7, #0]
    }
 8004222:	bf00      	nop
 8004224:	bf00      	nop
 8004226:	e7fd      	b.n	8004224 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004228:	4b09      	ldr	r3, [pc, #36]	@ (8004250 <prvSwitchTimerLists+0xc4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1b0      	bne.n	8004194 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004232:	4b07      	ldr	r3, [pc, #28]	@ (8004250 <prvSwitchTimerLists+0xc4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004238:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <prvSwitchTimerLists+0xc8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a04      	ldr	r2, [pc, #16]	@ (8004250 <prvSwitchTimerLists+0xc4>)
 800423e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004240:	4a04      	ldr	r2, [pc, #16]	@ (8004254 <prvSwitchTimerLists+0xc8>)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	6013      	str	r3, [r2, #0]
    }
 8004246:	bf00      	nop
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000234 	.word	0x20000234
 8004254:	20000238 	.word	0x20000238

08004258 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800425c:	f000 f9e6 	bl	800462c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004260:	4b12      	ldr	r3, [pc, #72]	@ (80042ac <prvCheckForValidListAndQueue+0x54>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11d      	bne.n	80042a4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004268:	4811      	ldr	r0, [pc, #68]	@ (80042b0 <prvCheckForValidListAndQueue+0x58>)
 800426a:	f7fe f81b 	bl	80022a4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800426e:	4811      	ldr	r0, [pc, #68]	@ (80042b4 <prvCheckForValidListAndQueue+0x5c>)
 8004270:	f7fe f818 	bl	80022a4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004274:	4b10      	ldr	r3, [pc, #64]	@ (80042b8 <prvCheckForValidListAndQueue+0x60>)
 8004276:	4a0e      	ldr	r2, [pc, #56]	@ (80042b0 <prvCheckForValidListAndQueue+0x58>)
 8004278:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800427a:	4b10      	ldr	r3, [pc, #64]	@ (80042bc <prvCheckForValidListAndQueue+0x64>)
 800427c:	4a0d      	ldr	r2, [pc, #52]	@ (80042b4 <prvCheckForValidListAndQueue+0x5c>)
 800427e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004280:	2200      	movs	r2, #0
 8004282:	210c      	movs	r1, #12
 8004284:	200a      	movs	r0, #10
 8004286:	f7fe f92b 	bl	80024e0 <xQueueGenericCreate>
 800428a:	4603      	mov	r3, r0
 800428c:	4a07      	ldr	r2, [pc, #28]	@ (80042ac <prvCheckForValidListAndQueue+0x54>)
 800428e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004290:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <prvCheckForValidListAndQueue+0x54>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004298:	4b04      	ldr	r3, [pc, #16]	@ (80042ac <prvCheckForValidListAndQueue+0x54>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4908      	ldr	r1, [pc, #32]	@ (80042c0 <prvCheckForValidListAndQueue+0x68>)
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe fdba 	bl	8002e18 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80042a4:	f000 f9f4 	bl	8004690 <vPortExitCritical>
    }
 80042a8:	bf00      	nop
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	2000023c 	.word	0x2000023c
 80042b0:	2000020c 	.word	0x2000020c
 80042b4:	20000220 	.word	0x20000220
 80042b8:	20000234 	.word	0x20000234
 80042bc:	20000238 	.word	0x20000238
 80042c0:	08007808 	.word	0x08007808

080042c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3b04      	subs	r3, #4
 80042d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3b04      	subs	r3, #4
 80042e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f023 0201 	bic.w	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3b04      	subs	r3, #4
 80042f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80042f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004328 <pxPortInitialiseStack+0x64>)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3b14      	subs	r3, #20
 80042fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3b04      	subs	r3, #4
 800430a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f06f 0202 	mvn.w	r2, #2
 8004312:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3b20      	subs	r3, #32
 8004318:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800431a:	68fb      	ldr	r3, [r7, #12]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	0800432d 	.word	0x0800432d

0800432c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004336:	4b13      	ldr	r3, [pc, #76]	@ (8004384 <prvTaskExitError+0x58>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d00b      	beq.n	8004358 <prvTaskExitError+0x2c>
        __asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	60fb      	str	r3, [r7, #12]
    }
 8004352:	bf00      	nop
 8004354:	bf00      	nop
 8004356:	e7fd      	b.n	8004354 <prvTaskExitError+0x28>
        __asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	60bb      	str	r3, [r7, #8]
    }
 800436a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800436c:	bf00      	nop
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0fc      	beq.n	800436e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	2000000c 	.word	0x2000000c
	...

08004390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004390:	4b07      	ldr	r3, [pc, #28]	@ (80043b0 <pxCurrentTCBConst2>)
 8004392:	6819      	ldr	r1, [r3, #0]
 8004394:	6808      	ldr	r0, [r1, #0]
 8004396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439a:	f380 8809 	msr	PSP, r0
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f380 8811 	msr	BASEPRI, r0
 80043aa:	4770      	bx	lr
 80043ac:	f3af 8000 	nop.w

080043b0 <pxCurrentTCBConst2>:
 80043b0:	20000108 	.word	0x20000108
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop

080043b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80043b8:	4808      	ldr	r0, [pc, #32]	@ (80043dc <prvPortStartFirstTask+0x24>)
 80043ba:	6800      	ldr	r0, [r0, #0]
 80043bc:	6800      	ldr	r0, [r0, #0]
 80043be:	f380 8808 	msr	MSP, r0
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f380 8814 	msr	CONTROL, r0
 80043ca:	b662      	cpsie	i
 80043cc:	b661      	cpsie	f
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	df00      	svc	0
 80043d8:	bf00      	nop
 80043da:	0000      	.short	0x0000
 80043dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop

080043e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043ea:	4b47      	ldr	r3, [pc, #284]	@ (8004508 <xPortStartScheduler+0x124>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a47      	ldr	r2, [pc, #284]	@ (800450c <xPortStartScheduler+0x128>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10b      	bne.n	800440c <xPortStartScheduler+0x28>
        __asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60fb      	str	r3, [r7, #12]
    }
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800440c:	4b3e      	ldr	r3, [pc, #248]	@ (8004508 <xPortStartScheduler+0x124>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a3f      	ldr	r2, [pc, #252]	@ (8004510 <xPortStartScheduler+0x12c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d10b      	bne.n	800442e <xPortStartScheduler+0x4a>
        __asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	613b      	str	r3, [r7, #16]
    }
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	e7fd      	b.n	800442a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800442e:	4b39      	ldr	r3, [pc, #228]	@ (8004514 <xPortStartScheduler+0x130>)
 8004430:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	22ff      	movs	r2, #255	@ 0xff
 800443e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004450:	b2da      	uxtb	r2, r3
 8004452:	4b31      	ldr	r3, [pc, #196]	@ (8004518 <xPortStartScheduler+0x134>)
 8004454:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004456:	4b31      	ldr	r3, [pc, #196]	@ (800451c <xPortStartScheduler+0x138>)
 8004458:	2207      	movs	r2, #7
 800445a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800445c:	e009      	b.n	8004472 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800445e:	4b2f      	ldr	r3, [pc, #188]	@ (800451c <xPortStartScheduler+0x138>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3b01      	subs	r3, #1
 8004464:	4a2d      	ldr	r2, [pc, #180]	@ (800451c <xPortStartScheduler+0x138>)
 8004466:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447a:	2b80      	cmp	r3, #128	@ 0x80
 800447c:	d0ef      	beq.n	800445e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800447e:	4b27      	ldr	r3, [pc, #156]	@ (800451c <xPortStartScheduler+0x138>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f1c3 0307 	rsb	r3, r3, #7
 8004486:	2b04      	cmp	r3, #4
 8004488:	d00b      	beq.n	80044a2 <xPortStartScheduler+0xbe>
        __asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	60bb      	str	r3, [r7, #8]
    }
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	e7fd      	b.n	800449e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044a2:	4b1e      	ldr	r3, [pc, #120]	@ (800451c <xPortStartScheduler+0x138>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	4a1c      	ldr	r2, [pc, #112]	@ (800451c <xPortStartScheduler+0x138>)
 80044aa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044ac:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <xPortStartScheduler+0x138>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044b4:	4a19      	ldr	r2, [pc, #100]	@ (800451c <xPortStartScheduler+0x138>)
 80044b6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80044c0:	4b17      	ldr	r3, [pc, #92]	@ (8004520 <xPortStartScheduler+0x13c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a16      	ldr	r2, [pc, #88]	@ (8004520 <xPortStartScheduler+0x13c>)
 80044c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80044cc:	4b14      	ldr	r3, [pc, #80]	@ (8004520 <xPortStartScheduler+0x13c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a13      	ldr	r2, [pc, #76]	@ (8004520 <xPortStartScheduler+0x13c>)
 80044d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80044d6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80044d8:	f000 f968 	bl	80047ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80044dc:	4b11      	ldr	r3, [pc, #68]	@ (8004524 <xPortStartScheduler+0x140>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80044e2:	f000 f987 	bl	80047f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044e6:	4b10      	ldr	r3, [pc, #64]	@ (8004528 <xPortStartScheduler+0x144>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004528 <xPortStartScheduler+0x144>)
 80044ec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80044f0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80044f2:	f7ff ff61 	bl	80043b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044f6:	f7ff f84b 	bl	8003590 <vTaskSwitchContext>
    prvTaskExitError();
 80044fa:	f7ff ff17 	bl	800432c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	e000ed00 	.word	0xe000ed00
 800450c:	410fc271 	.word	0x410fc271
 8004510:	410fc270 	.word	0x410fc270
 8004514:	e000e400 	.word	0xe000e400
 8004518:	20000248 	.word	0x20000248
 800451c:	2000024c 	.word	0x2000024c
 8004520:	e000ed20 	.word	0xe000ed20
 8004524:	2000000c 	.word	0x2000000c
 8004528:	e000ef34 	.word	0xe000ef34

0800452c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004532:	4b38      	ldr	r3, [pc, #224]	@ (8004614 <vInitPrioGroupValue+0xe8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a38      	ldr	r2, [pc, #224]	@ (8004618 <vInitPrioGroupValue+0xec>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d10b      	bne.n	8004554 <vInitPrioGroupValue+0x28>
        __asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	60fb      	str	r3, [r7, #12]
    }
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	e7fd      	b.n	8004550 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004554:	4b2f      	ldr	r3, [pc, #188]	@ (8004614 <vInitPrioGroupValue+0xe8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a30      	ldr	r2, [pc, #192]	@ (800461c <vInitPrioGroupValue+0xf0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d10b      	bne.n	8004576 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	613b      	str	r3, [r7, #16]
    }
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	e7fd      	b.n	8004572 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004576:	4b2a      	ldr	r3, [pc, #168]	@ (8004620 <vInitPrioGroupValue+0xf4>)
 8004578:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	22ff      	movs	r2, #255	@ 0xff
 8004586:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4b22      	ldr	r3, [pc, #136]	@ (8004624 <vInitPrioGroupValue+0xf8>)
 800459c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800459e:	4b22      	ldr	r3, [pc, #136]	@ (8004628 <vInitPrioGroupValue+0xfc>)
 80045a0:	2207      	movs	r2, #7
 80045a2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045a4:	e009      	b.n	80045ba <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80045a6:	4b20      	ldr	r3, [pc, #128]	@ (8004628 <vInitPrioGroupValue+0xfc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004628 <vInitPrioGroupValue+0xfc>)
 80045ae:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c2:	2b80      	cmp	r3, #128	@ 0x80
 80045c4:	d0ef      	beq.n	80045a6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045c6:	4b18      	ldr	r3, [pc, #96]	@ (8004628 <vInitPrioGroupValue+0xfc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f1c3 0307 	rsb	r3, r3, #7
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d00b      	beq.n	80045ea <vInitPrioGroupValue+0xbe>
        __asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	60bb      	str	r3, [r7, #8]
    }
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	e7fd      	b.n	80045e6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004628 <vInitPrioGroupValue+0xfc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	021b      	lsls	r3, r3, #8
 80045f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004628 <vInitPrioGroupValue+0xfc>)
 80045f2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004628 <vInitPrioGroupValue+0xfc>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004628 <vInitPrioGroupValue+0xfc>)
 80045fe:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	e000ed00 	.word	0xe000ed00
 8004618:	410fc271 	.word	0x410fc271
 800461c:	410fc270 	.word	0x410fc270
 8004620:	e000e400 	.word	0xe000e400
 8004624:	20000248 	.word	0x20000248
 8004628:	2000024c 	.word	0x2000024c

0800462c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
        __asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	607b      	str	r3, [r7, #4]
    }
 8004644:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004646:	4b10      	ldr	r3, [pc, #64]	@ (8004688 <vPortEnterCritical+0x5c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	4a0e      	ldr	r2, [pc, #56]	@ (8004688 <vPortEnterCritical+0x5c>)
 800464e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004650:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <vPortEnterCritical+0x5c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d110      	bne.n	800467a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004658:	4b0c      	ldr	r3, [pc, #48]	@ (800468c <vPortEnterCritical+0x60>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <vPortEnterCritical+0x4e>
        __asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	603b      	str	r3, [r7, #0]
    }
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	e7fd      	b.n	8004676 <vPortEnterCritical+0x4a>
    }
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	2000000c 	.word	0x2000000c
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004696:	4b12      	ldr	r3, [pc, #72]	@ (80046e0 <vPortExitCritical+0x50>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <vPortExitCritical+0x26>
        __asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	607b      	str	r3, [r7, #4]
    }
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80046b6:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <vPortExitCritical+0x50>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	4a08      	ldr	r2, [pc, #32]	@ (80046e0 <vPortExitCritical+0x50>)
 80046be:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80046c0:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <vPortExitCritical+0x50>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <vPortExitCritical+0x44>
 80046c8:	2300      	movs	r3, #0
 80046ca:	603b      	str	r3, [r7, #0]
        __asm volatile
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	f383 8811 	msr	BASEPRI, r3
    }
 80046d2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	2000000c 	.word	0x2000000c
	...

080046f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80046f0:	f3ef 8009 	mrs	r0, PSP
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	4b15      	ldr	r3, [pc, #84]	@ (8004750 <pxCurrentTCBConst>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	f01e 0f10 	tst.w	lr, #16
 8004700:	bf08      	it	eq
 8004702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470a:	6010      	str	r0, [r2, #0]
 800470c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004710:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004714:	f380 8811 	msr	BASEPRI, r0
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f7fe ff36 	bl	8003590 <vTaskSwitchContext>
 8004724:	f04f 0000 	mov.w	r0, #0
 8004728:	f380 8811 	msr	BASEPRI, r0
 800472c:	bc09      	pop	{r0, r3}
 800472e:	6819      	ldr	r1, [r3, #0]
 8004730:	6808      	ldr	r0, [r1, #0]
 8004732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004736:	f01e 0f10 	tst.w	lr, #16
 800473a:	bf08      	it	eq
 800473c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004740:	f380 8809 	msr	PSP, r0
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	f3af 8000 	nop.w

08004750 <pxCurrentTCBConst>:
 8004750:	20000108 	.word	0x20000108
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop

08004758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
        __asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	607b      	str	r3, [r7, #4]
    }
 8004770:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004772:	f002 f82f 	bl	80067d4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004776:	f7fe fe4d 	bl	8003414 <xTaskIncrementTick>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d006      	beq.n	800478e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004780:	f002 f886 	bl	8006890 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004784:	4b08      	ldr	r3, [pc, #32]	@ (80047a8 <SysTick_Handler+0x50>)
 8004786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e001      	b.n	8004792 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800478e:	f002 f863 	bl	8006858 <SEGGER_SYSVIEW_RecordExitISR>
 8004792:	2300      	movs	r3, #0
 8004794:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f383 8811 	msr	BASEPRI, r3
    }
 800479c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	e000ed04 	.word	0xe000ed04

080047ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047b0:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <vPortSetupTimerInterrupt+0x34>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047b6:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <vPortSetupTimerInterrupt+0x38>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <vPortSetupTimerInterrupt+0x3c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0a      	ldr	r2, [pc, #40]	@ (80047ec <vPortSetupTimerInterrupt+0x40>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	099b      	lsrs	r3, r3, #6
 80047c8:	4a09      	ldr	r2, [pc, #36]	@ (80047f0 <vPortSetupTimerInterrupt+0x44>)
 80047ca:	3b01      	subs	r3, #1
 80047cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047ce:	4b04      	ldr	r3, [pc, #16]	@ (80047e0 <vPortSetupTimerInterrupt+0x34>)
 80047d0:	2207      	movs	r2, #7
 80047d2:	601a      	str	r2, [r3, #0]
}
 80047d4:	bf00      	nop
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	e000e010 	.word	0xe000e010
 80047e4:	e000e018 	.word	0xe000e018
 80047e8:	20000000 	.word	0x20000000
 80047ec:	10624dd3 	.word	0x10624dd3
 80047f0:	e000e014 	.word	0xe000e014

080047f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80047f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004804 <vPortEnableVFP+0x10>
 80047f8:	6801      	ldr	r1, [r0, #0]
 80047fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80047fe:	6001      	str	r1, [r0, #0]
 8004800:	4770      	bx	lr
 8004802:	0000      	.short	0x0000
 8004804:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004808:	bf00      	nop
 800480a:	bf00      	nop

0800480c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004812:	f3ef 8305 	mrs	r3, IPSR
 8004816:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b0f      	cmp	r3, #15
 800481c:	d915      	bls.n	800484a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800481e:	4a18      	ldr	r2, [pc, #96]	@ (8004880 <vPortValidateInterruptPriority+0x74>)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004828:	4b16      	ldr	r3, [pc, #88]	@ (8004884 <vPortValidateInterruptPriority+0x78>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	7afa      	ldrb	r2, [r7, #11]
 800482e:	429a      	cmp	r2, r3
 8004830:	d20b      	bcs.n	800484a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	607b      	str	r3, [r7, #4]
    }
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	e7fd      	b.n	8004846 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800484a:	4b0f      	ldr	r3, [pc, #60]	@ (8004888 <vPortValidateInterruptPriority+0x7c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004852:	4b0e      	ldr	r3, [pc, #56]	@ (800488c <vPortValidateInterruptPriority+0x80>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d90b      	bls.n	8004872 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	603b      	str	r3, [r7, #0]
    }
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	e7fd      	b.n	800486e <vPortValidateInterruptPriority+0x62>
    }
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	e000e3f0 	.word	0xe000e3f0
 8004884:	20000248 	.word	0x20000248
 8004888:	e000ed0c 	.word	0xe000ed0c
 800488c:	2000024c 	.word	0x2000024c

08004890 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	@ 0x28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800489c:	f7fe fce8 	bl	8003270 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80048a0:	4b66      	ldr	r3, [pc, #408]	@ (8004a3c <pvPortMalloc+0x1ac>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80048a8:	f000 f938 	bl	8004b1c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048ac:	4b64      	ldr	r3, [pc, #400]	@ (8004a40 <pvPortMalloc+0x1b0>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f040 80a9 	bne.w	8004a0c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02e      	beq.n	800491e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80048c0:	2208      	movs	r2, #8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d228      	bcs.n	800491e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80048cc:	2208      	movs	r2, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d022      	beq.n	8004924 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f023 0307 	bic.w	r3, r3, #7
 80048e4:	3308      	adds	r3, #8
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d215      	bcs.n	8004918 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f023 0307 	bic.w	r3, r3, #7
 80048f2:	3308      	adds	r3, #8
 80048f4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d011      	beq.n	8004924 <pvPortMalloc+0x94>
        __asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	617b      	str	r3, [r7, #20]
    }
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800491c:	e002      	b.n	8004924 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	e000      	b.n	8004926 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004924:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d06f      	beq.n	8004a0c <pvPortMalloc+0x17c>
 800492c:	4b45      	ldr	r3, [pc, #276]	@ (8004a44 <pvPortMalloc+0x1b4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	429a      	cmp	r2, r3
 8004934:	d86a      	bhi.n	8004a0c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004936:	4b44      	ldr	r3, [pc, #272]	@ (8004a48 <pvPortMalloc+0x1b8>)
 8004938:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800493a:	4b43      	ldr	r3, [pc, #268]	@ (8004a48 <pvPortMalloc+0x1b8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004940:	e004      	b.n	800494c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d903      	bls.n	800495e <pvPortMalloc+0xce>
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f1      	bne.n	8004942 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800495e:	4b37      	ldr	r3, [pc, #220]	@ (8004a3c <pvPortMalloc+0x1ac>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004964:	429a      	cmp	r2, r3
 8004966:	d051      	beq.n	8004a0c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2208      	movs	r2, #8
 800496e:	4413      	add	r3, r2
 8004970:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	1ad2      	subs	r2, r2, r3
 8004982:	2308      	movs	r3, #8
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	429a      	cmp	r2, r3
 8004988:	d920      	bls.n	80049cc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800498a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4413      	add	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <pvPortMalloc+0x124>
        __asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	613b      	str	r3, [r7, #16]
    }
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	1ad2      	subs	r2, r2, r3
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049c6:	69b8      	ldr	r0, [r7, #24]
 80049c8:	f000 f90a 	bl	8004be0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a44 <pvPortMalloc+0x1b4>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a44 <pvPortMalloc+0x1b4>)
 80049d8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049da:	4b1a      	ldr	r3, [pc, #104]	@ (8004a44 <pvPortMalloc+0x1b4>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	4b1b      	ldr	r3, [pc, #108]	@ (8004a4c <pvPortMalloc+0x1bc>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d203      	bcs.n	80049ee <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049e6:	4b17      	ldr	r3, [pc, #92]	@ (8004a44 <pvPortMalloc+0x1b4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a18      	ldr	r2, [pc, #96]	@ (8004a4c <pvPortMalloc+0x1bc>)
 80049ec:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	4b13      	ldr	r3, [pc, #76]	@ (8004a40 <pvPortMalloc+0x1b0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a02:	4b13      	ldr	r3, [pc, #76]	@ (8004a50 <pvPortMalloc+0x1c0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	4a11      	ldr	r2, [pc, #68]	@ (8004a50 <pvPortMalloc+0x1c0>)
 8004a0a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a0c:	f7fe fc3e 	bl	800328c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00b      	beq.n	8004a32 <pvPortMalloc+0x1a2>
        __asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	60fb      	str	r3, [r7, #12]
    }
 8004a2c:	bf00      	nop
 8004a2e:	bf00      	nop
 8004a30:	e7fd      	b.n	8004a2e <pvPortMalloc+0x19e>
    return pvReturn;
 8004a32:	69fb      	ldr	r3, [r7, #28]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3728      	adds	r7, #40	@ 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20012e58 	.word	0x20012e58
 8004a40:	20012e6c 	.word	0x20012e6c
 8004a44:	20012e5c 	.word	0x20012e5c
 8004a48:	20012e50 	.word	0x20012e50
 8004a4c:	20012e60 	.word	0x20012e60
 8004a50:	20012e64 	.word	0x20012e64

08004a54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d04f      	beq.n	8004b06 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004a66:	2308      	movs	r3, #8
 8004a68:	425b      	negs	r3, r3
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	4b25      	ldr	r3, [pc, #148]	@ (8004b10 <vPortFree+0xbc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <vPortFree+0x46>
        __asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60fb      	str	r3, [r7, #12]
    }
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	e7fd      	b.n	8004a96 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <vPortFree+0x66>
        __asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60bb      	str	r3, [r7, #8]
    }
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <vPortFree+0xbc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01e      	beq.n	8004b06 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d11a      	bne.n	8004b06 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b10 <vPortFree+0xbc>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	401a      	ands	r2, r3
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004ae0:	f7fe fbc6 	bl	8003270 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b14 <vPortFree+0xc0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4413      	add	r3, r2
 8004aee:	4a09      	ldr	r2, [pc, #36]	@ (8004b14 <vPortFree+0xc0>)
 8004af0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004af2:	6938      	ldr	r0, [r7, #16]
 8004af4:	f000 f874 	bl	8004be0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004af8:	4b07      	ldr	r3, [pc, #28]	@ (8004b18 <vPortFree+0xc4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3301      	adds	r3, #1
 8004afe:	4a06      	ldr	r2, [pc, #24]	@ (8004b18 <vPortFree+0xc4>)
 8004b00:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b02:	f7fe fbc3 	bl	800328c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b06:	bf00      	nop
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20012e6c 	.word	0x20012e6c
 8004b14:	20012e5c 	.word	0x20012e5c
 8004b18:	20012e68 	.word	0x20012e68

08004b1c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b22:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004b26:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004b28:	4b27      	ldr	r3, [pc, #156]	@ (8004bc8 <prvHeapInit+0xac>)
 8004b2a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00c      	beq.n	8004b50 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3307      	adds	r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0307 	bic.w	r3, r3, #7
 8004b42:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc8 <prvHeapInit+0xac>)
 8004b4c:	4413      	add	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b54:	4a1d      	ldr	r2, [pc, #116]	@ (8004bcc <prvHeapInit+0xb0>)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bcc <prvHeapInit+0xb0>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	4413      	add	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004b68:	2208      	movs	r2, #8
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0307 	bic.w	r3, r3, #7
 8004b76:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4a15      	ldr	r2, [pc, #84]	@ (8004bd0 <prvHeapInit+0xb4>)
 8004b7c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004b7e:	4b14      	ldr	r3, [pc, #80]	@ (8004bd0 <prvHeapInit+0xb4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2200      	movs	r2, #0
 8004b84:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004b86:	4b12      	ldr	r3, [pc, #72]	@ (8004bd0 <prvHeapInit+0xb4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	1ad2      	subs	r2, r2, r3
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <prvHeapInit+0xb4>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd4 <prvHeapInit+0xb8>)
 8004baa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	4a09      	ldr	r2, [pc, #36]	@ (8004bd8 <prvHeapInit+0xbc>)
 8004bb2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bb4:	4b09      	ldr	r3, [pc, #36]	@ (8004bdc <prvHeapInit+0xc0>)
 8004bb6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004bba:	601a      	str	r2, [r3, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	20000250 	.word	0x20000250
 8004bcc:	20012e50 	.word	0x20012e50
 8004bd0:	20012e58 	.word	0x20012e58
 8004bd4:	20012e60 	.word	0x20012e60
 8004bd8:	20012e5c 	.word	0x20012e5c
 8004bdc:	20012e6c 	.word	0x20012e6c

08004be0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004be8:	4b28      	ldr	r3, [pc, #160]	@ (8004c8c <prvInsertBlockIntoFreeList+0xac>)
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	e002      	b.n	8004bf4 <prvInsertBlockIntoFreeList+0x14>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d8f7      	bhi.n	8004bee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4413      	add	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d108      	bne.n	8004c22 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	441a      	add	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	441a      	add	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d118      	bne.n	8004c68 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b15      	ldr	r3, [pc, #84]	@ (8004c90 <prvInsertBlockIntoFreeList+0xb0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d00d      	beq.n	8004c5e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	441a      	add	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	e008      	b.n	8004c70 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c90 <prvInsertBlockIntoFreeList+0xb0>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e003      	b.n	8004c70 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d002      	beq.n	8004c7e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20012e50 	.word	0x20012e50
 8004c90:	20012e58 	.word	0x20012e58

08004c94 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004c98:	4803      	ldr	r0, [pc, #12]	@ (8004ca8 <_cbSendSystemDesc+0x14>)
 8004c9a:	f001 fd45 	bl	8006728 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004c9e:	4803      	ldr	r0, [pc, #12]	@ (8004cac <_cbSendSystemDesc+0x18>)
 8004ca0:	f001 fd42 	bl	8006728 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ca4:	bf00      	nop
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	08007810 	.word	0x08007810
 8004cac:	08007860 	.word	0x08007860

08004cb0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004cb4:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cba:	6819      	ldr	r1, [r3, #0]
 8004cbc:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004cbe:	4a06      	ldr	r2, [pc, #24]	@ (8004cd8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004cc0:	f001 f8b0 	bl	8005e24 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004cc4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004cc8:	f001 f8f0 	bl	8005eac <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ccc:	bf00      	nop
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000000 	.word	0x20000000
 8004cd4:	08004c95 	.word	0x08004c95
 8004cd8:	08007904 	.word	0x08007904

08004cdc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
 8004ce6:	e033      	b.n	8004d50 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ce8:	491e      	ldr	r1, [pc, #120]	@ (8004d64 <_cbSendTaskList+0x88>)
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	491a      	ldr	r1, [pc, #104]	@ (8004d64 <_cbSendTaskList+0x88>)
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	3304      	adds	r3, #4
 8004d08:	6819      	ldr	r1, [r3, #0]
 8004d0a:	4c16      	ldr	r4, [pc, #88]	@ (8004d64 <_cbSendTaskList+0x88>)
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4423      	add	r3, r4
 8004d18:	3308      	adds	r3, #8
 8004d1a:	681c      	ldr	r4, [r3, #0]
 8004d1c:	4d11      	ldr	r5, [pc, #68]	@ (8004d64 <_cbSendTaskList+0x88>)
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	442b      	add	r3, r5
 8004d2a:	330c      	adds	r3, #12
 8004d2c:	681d      	ldr	r5, [r3, #0]
 8004d2e:	4e0d      	ldr	r6, [pc, #52]	@ (8004d64 <_cbSendTaskList+0x88>)
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4433      	add	r3, r6
 8004d3c:	3310      	adds	r3, #16
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	462b      	mov	r3, r5
 8004d44:	4622      	mov	r2, r4
 8004d46:	f000 f8bd 	bl	8004ec4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	4b05      	ldr	r3, [pc, #20]	@ (8004d68 <_cbSendTaskList+0x8c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d3c6      	bcc.n	8004ce8 <_cbSendTaskList+0xc>
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d64:	20012e70 	.word	0x20012e70
 8004d68:	20012f10 	.word	0x20012f10

08004d6c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004d74:	f7fe fb3c 	bl	80033f0 <xTaskGetTickCountFromISR>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	469a      	mov	sl, r3
 8004d7e:	4693      	mov	fp, r2
 8004d80:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004d84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	f04f 0a00 	mov.w	sl, #0
 8004d90:	f04f 0b00 	mov.w	fp, #0
 8004d94:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004d98:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004d9c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004da0:	4652      	mov	r2, sl
 8004da2:	465b      	mov	r3, fp
 8004da4:	1a14      	subs	r4, r2, r0
 8004da6:	eb63 0501 	sbc.w	r5, r3, r1
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	00ab      	lsls	r3, r5, #2
 8004db4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004db8:	00a2      	lsls	r2, r4, #2
 8004dba:	4614      	mov	r4, r2
 8004dbc:	461d      	mov	r5, r3
 8004dbe:	eb14 0800 	adds.w	r8, r4, r0
 8004dc2:	eb45 0901 	adc.w	r9, r5, r1
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dda:	4690      	mov	r8, r2
 8004ddc:	4699      	mov	r9, r3
 8004dde:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004de2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004de6:	4610      	mov	r0, r2
 8004de8:	4619      	mov	r1, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004df4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e02:	2205      	movs	r2, #5
 8004e04:	492b      	ldr	r1, [pc, #172]	@ (8004eb4 <SYSVIEW_AddTask+0xc0>)
 8004e06:	68b8      	ldr	r0, [r7, #8]
 8004e08:	f002 f832 	bl	8006e70 <memcmp>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d04b      	beq.n	8004eaa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e12:	4b29      	ldr	r3, [pc, #164]	@ (8004eb8 <SYSVIEW_AddTask+0xc4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b07      	cmp	r3, #7
 8004e18:	d903      	bls.n	8004e22 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e1a:	4828      	ldr	r0, [pc, #160]	@ (8004ebc <SYSVIEW_AddTask+0xc8>)
 8004e1c:	f001 ff96 	bl	8006d4c <SEGGER_SYSVIEW_Warn>
    return;
 8004e20:	e044      	b.n	8004eac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e22:	4b25      	ldr	r3, [pc, #148]	@ (8004eb8 <SYSVIEW_AddTask+0xc4>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4926      	ldr	r1, [pc, #152]	@ (8004ec0 <SYSVIEW_AddTask+0xcc>)
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e36:	4b20      	ldr	r3, [pc, #128]	@ (8004eb8 <SYSVIEW_AddTask+0xc4>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4921      	ldr	r1, [pc, #132]	@ (8004ec0 <SYSVIEW_AddTask+0xcc>)
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	3304      	adds	r3, #4
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb8 <SYSVIEW_AddTask+0xc4>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	491b      	ldr	r1, [pc, #108]	@ (8004ec0 <SYSVIEW_AddTask+0xcc>)
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004e62:	4b15      	ldr	r3, [pc, #84]	@ (8004eb8 <SYSVIEW_AddTask+0xc4>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4916      	ldr	r1, [pc, #88]	@ (8004ec0 <SYSVIEW_AddTask+0xcc>)
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	330c      	adds	r3, #12
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004e78:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb8 <SYSVIEW_AddTask+0xc4>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4910      	ldr	r1, [pc, #64]	@ (8004ec0 <SYSVIEW_AddTask+0xcc>)
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	3310      	adds	r3, #16
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb8 <SYSVIEW_AddTask+0xc4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	4a08      	ldr	r2, [pc, #32]	@ (8004eb8 <SYSVIEW_AddTask+0xc4>)
 8004e96:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f80e 	bl	8004ec4 <SYSVIEW_SendTaskInfo>
 8004ea8:	e000      	b.n	8004eac <SYSVIEW_AddTask+0xb8>
    return;
 8004eaa:	bf00      	nop

}
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	08007870 	.word	0x08007870
 8004eb8:	20012f10 	.word	0x20012f10
 8004ebc:	08007878 	.word	0x08007878
 8004ec0:	20012e70 	.word	0x20012e70

08004ec4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08a      	sub	sp, #40	@ 0x28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004ed2:	f107 0314 	add.w	r3, r7, #20
 8004ed6:	2214      	movs	r2, #20
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4618      	mov	r0, r3
 8004edc:	f001 ffd8 	bl	8006e90 <memset>
  TaskInfo.TaskID     = TaskID;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004ef4:	f107 0314 	add.w	r3, r7, #20
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 fb1d 	bl	8006538 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004efe:	bf00      	nop
 8004f00:	3728      	adds	r7, #40	@ 0x28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f0e:	4b24      	ldr	r3, [pc, #144]	@ (8004fa0 <_DoInit+0x98>)
 8004f10:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2203      	movs	r2, #3
 8004f16:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a20      	ldr	r2, [pc, #128]	@ (8004fa4 <_DoInit+0x9c>)
 8004f22:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a20      	ldr	r2, [pc, #128]	@ (8004fa8 <_DoInit+0xa0>)
 8004f28:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f30:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a17      	ldr	r2, [pc, #92]	@ (8004fa4 <_DoInit+0x9c>)
 8004f48:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <_DoInit+0xa4>)
 8004f4e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2210      	movs	r2, #16
 8004f54:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3307      	adds	r3, #7
 8004f6c:	4a10      	ldr	r2, [pc, #64]	@ (8004fb0 <_DoInit+0xa8>)
 8004f6e:	6810      	ldr	r0, [r2, #0]
 8004f70:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f72:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb4 <_DoInit+0xac>)
 8004f7a:	6810      	ldr	r0, [r2, #0]
 8004f7c:	6018      	str	r0, [r3, #0]
 8004f7e:	8891      	ldrh	r1, [r2, #4]
 8004f80:	7992      	ldrb	r2, [r2, #6]
 8004f82:	8099      	strh	r1, [r3, #4]
 8004f84:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f86:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f90:	f3bf 8f5f 	dmb	sy
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	20012f14 	.word	0x20012f14
 8004fa4:	080078c8 	.word	0x080078c8
 8004fa8:	20012fbc 	.word	0x20012fbc
 8004fac:	200133bc 	.word	0x200133bc
 8004fb0:	080078d4 	.word	0x080078d4
 8004fb4:	080078d8 	.word	0x080078d8

08004fb8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08c      	sub	sp, #48	@ 0x30
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80050c0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fc6:	623b      	str	r3, [r7, #32]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004fd2:	f7ff ff99 	bl	8004f08 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	4413      	add	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	3360      	adds	r3, #96	@ 0x60
 8004fe2:	4a37      	ldr	r2, [pc, #220]	@ (80050c0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ffc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	429a      	cmp	r2, r3
 8005002:	d92b      	bls.n	800505c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4293      	cmp	r3, r2
 8005014:	bf28      	it	cs
 8005016:	4613      	movcs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005020:	4413      	add	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	6939      	ldr	r1, [r7, #16]
 8005028:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800502a:	f001 ff5f 	bl	8006eec <memcpy>
    NumBytesRead += NumBytesRem;
 800502e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4413      	add	r3, r2
 8005034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	4413      	add	r3, r2
 800504c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005054:	429a      	cmp	r2, r3
 8005056:	d101      	bne.n	800505c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005058:	2300      	movs	r3, #0
 800505a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4293      	cmp	r3, r2
 800506a:	bf28      	it	cs
 800506c:	4613      	movcs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d019      	beq.n	80050aa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507c:	4413      	add	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	6939      	ldr	r1, [r7, #16]
 8005084:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005086:	f001 ff31 	bl	8006eec <memcpy>
    NumBytesRead += NumBytesRem;
 800508a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
 8005090:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4413      	add	r3, r2
 80050a8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80050aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050b4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3730      	adds	r7, #48	@ 0x30
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20012f14 	.word	0x20012f14

080050c4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80050d2:	4b3d      	ldr	r3, [pc, #244]	@ (80051c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80050e0:	f7ff ff12 	bl	8004f08 <_DoInit>
  SEGGER_RTT_LOCK();
 80050e4:	f3ef 8311 	mrs	r3, BASEPRI
 80050e8:	f04f 0120 	mov.w	r1, #32
 80050ec:	f381 8811 	msr	BASEPRI, r1
 80050f0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050f2:	4b35      	ldr	r3, [pc, #212]	@ (80051c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050f4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80050fa:	6939      	ldr	r1, [r7, #16]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	4613      	mov	r3, r2
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	4413      	add	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	440b      	add	r3, r1
 800510a:	3304      	adds	r3, #4
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d008      	beq.n	8005124 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	3301      	adds	r3, #1
 8005116:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	429a      	cmp	r2, r3
 8005120:	dbeb      	blt.n	80050fa <SEGGER_RTT_AllocUpBuffer+0x36>
 8005122:	e000      	b.n	8005126 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005124:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	429a      	cmp	r2, r3
 800512e:	da3f      	bge.n	80051b0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005130:	6939      	ldr	r1, [r7, #16]
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	4613      	mov	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	4413      	add	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	440b      	add	r3, r1
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005144:	6939      	ldr	r1, [r7, #16]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	4613      	mov	r3, r2
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	4413      	add	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	440b      	add	r3, r1
 8005154:	3304      	adds	r3, #4
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800515a:	6939      	ldr	r1, [r7, #16]
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	440b      	add	r3, r1
 8005168:	3320      	adds	r3, #32
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800516e:	6939      	ldr	r1, [r7, #16]
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	4613      	mov	r3, r2
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	4413      	add	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	440b      	add	r3, r1
 800517c:	3328      	adds	r3, #40	@ 0x28
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005182:	6939      	ldr	r1, [r7, #16]
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	4613      	mov	r3, r2
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	4413      	add	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	440b      	add	r3, r1
 8005190:	3324      	adds	r3, #36	@ 0x24
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005196:	6939      	ldr	r1, [r7, #16]
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	4613      	mov	r3, r2
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4413      	add	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	440b      	add	r3, r1
 80051a4:	332c      	adds	r3, #44	@ 0x2c
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051aa:	f3bf 8f5f 	dmb	sy
 80051ae:	e002      	b.n	80051b6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80051b0:	f04f 33ff 	mov.w	r3, #4294967295
 80051b4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80051bc:	69fb      	ldr	r3, [r7, #28]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20012f14 	.word	0x20012f14

080051cc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80051da:	4b33      	ldr	r3, [pc, #204]	@ (80052a8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <SEGGER_RTT_ConfigDownBuffer+0x20>
 80051e8:	f7ff fe8e 	bl	8004f08 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051ec:	4b2e      	ldr	r3, [pc, #184]	@ (80052a8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80051ee:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	461a      	mov	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d24d      	bcs.n	8005298 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80051fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005200:	f04f 0120 	mov.w	r1, #32
 8005204:	f381 8811 	msr	BASEPRI, r1
 8005208:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d031      	beq.n	8005274 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005210:	6979      	ldr	r1, [r7, #20]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4613      	mov	r3, r2
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	4413      	add	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	440b      	add	r3, r1
 800521e:	3360      	adds	r3, #96	@ 0x60
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005224:	6979      	ldr	r1, [r7, #20]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4613      	mov	r3, r2
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4413      	add	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	440b      	add	r3, r1
 8005232:	3364      	adds	r3, #100	@ 0x64
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005238:	6979      	ldr	r1, [r7, #20]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4613      	mov	r3, r2
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	4413      	add	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	440b      	add	r3, r1
 8005246:	3368      	adds	r3, #104	@ 0x68
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800524c:	6979      	ldr	r1, [r7, #20]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4613      	mov	r3, r2
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	4413      	add	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	440b      	add	r3, r1
 800525a:	3370      	adds	r3, #112	@ 0x70
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005260:	6979      	ldr	r1, [r7, #20]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4613      	mov	r3, r2
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	4413      	add	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	440b      	add	r3, r1
 800526e:	336c      	adds	r3, #108	@ 0x6c
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005274:	6979      	ldr	r1, [r7, #20]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4613      	mov	r3, r2
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	4413      	add	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	440b      	add	r3, r1
 8005282:	3374      	adds	r3, #116	@ 0x74
 8005284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005286:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005288:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	e002      	b.n	800529e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005298:	f04f 33ff 	mov.w	r3, #4294967295
 800529c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800529e:	69fb      	ldr	r3, [r7, #28]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20012f14 	.word	0x20012f14

080052ac <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80052bc:	e002      	b.n	80052c4 <_EncodeStr+0x18>
    Len++;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	3301      	adds	r3, #1
 80052c2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4413      	add	r3, r2
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f6      	bne.n	80052be <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d901      	bls.n	80052dc <_EncodeStr+0x30>
    Len = Limit;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2bfe      	cmp	r3, #254	@ 0xfe
 80052e0:	d806      	bhi.n	80052f0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	60fa      	str	r2, [r7, #12]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	e011      	b.n	8005314 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	60fa      	str	r2, [r7, #12]
 80052f6:	22ff      	movs	r2, #255	@ 0xff
 80052f8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	60fa      	str	r2, [r7, #12]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	0a19      	lsrs	r1, r3, #8
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	60fa      	str	r2, [r7, #12]
 8005310:	b2ca      	uxtb	r2, r1
 8005312:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005318:	e00a      	b.n	8005330 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	1c53      	adds	r3, r2, #1
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1c59      	adds	r1, r3, #1
 8005324:	60f9      	str	r1, [r7, #12]
 8005326:	7812      	ldrb	r2, [r2, #0]
 8005328:	701a      	strb	r2, [r3, #0]
    n++;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	3301      	adds	r3, #1
 800532e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	429a      	cmp	r2, r3
 8005336:	d3f0      	bcc.n	800531a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005338:	68fb      	ldr	r3, [r7, #12]
}
 800533a:	4618      	mov	r0, r3
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005366:	4b35      	ldr	r3, [pc, #212]	@ (800543c <_HandleIncomingPacket+0xdc>)
 8005368:	7e1b      	ldrb	r3, [r3, #24]
 800536a:	4618      	mov	r0, r3
 800536c:	1cfb      	adds	r3, r7, #3
 800536e:	2201      	movs	r2, #1
 8005370:	4619      	mov	r1, r3
 8005372:	f7ff fe21 	bl	8004fb8 <SEGGER_RTT_ReadNoLock>
 8005376:	4603      	mov	r3, r0
 8005378:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	dd59      	ble.n	8005434 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	2b80      	cmp	r3, #128	@ 0x80
 8005384:	d032      	beq.n	80053ec <_HandleIncomingPacket+0x8c>
 8005386:	2b80      	cmp	r3, #128	@ 0x80
 8005388:	dc42      	bgt.n	8005410 <_HandleIncomingPacket+0xb0>
 800538a:	2b07      	cmp	r3, #7
 800538c:	dc16      	bgt.n	80053bc <_HandleIncomingPacket+0x5c>
 800538e:	2b00      	cmp	r3, #0
 8005390:	dd3e      	ble.n	8005410 <_HandleIncomingPacket+0xb0>
 8005392:	3b01      	subs	r3, #1
 8005394:	2b06      	cmp	r3, #6
 8005396:	d83b      	bhi.n	8005410 <_HandleIncomingPacket+0xb0>
 8005398:	a201      	add	r2, pc, #4	@ (adr r2, 80053a0 <_HandleIncomingPacket+0x40>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	080053c3 	.word	0x080053c3
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053cf 	.word	0x080053cf
 80053ac:	080053d5 	.word	0x080053d5
 80053b0:	080053db 	.word	0x080053db
 80053b4:	080053e1 	.word	0x080053e1
 80053b8:	080053e7 	.word	0x080053e7
 80053bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80053be:	d034      	beq.n	800542a <_HandleIncomingPacket+0xca>
 80053c0:	e026      	b.n	8005410 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80053c2:	f000 ff3f 	bl	8006244 <SEGGER_SYSVIEW_Start>
      break;
 80053c6:	e035      	b.n	8005434 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80053c8:	f000 fff6 	bl	80063b8 <SEGGER_SYSVIEW_Stop>
      break;
 80053cc:	e032      	b.n	8005434 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80053ce:	f001 f9cf 	bl	8006770 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80053d2:	e02f      	b.n	8005434 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80053d4:	f001 f994 	bl	8006700 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80053d8:	e02c      	b.n	8005434 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80053da:	f001 f813 	bl	8006404 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80053de:	e029      	b.n	8005434 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80053e0:	f001 fc62 	bl	8006ca8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80053e4:	e026      	b.n	8005434 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80053e6:	f001 fc41 	bl	8006c6c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80053ea:	e023      	b.n	8005434 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053ec:	4b13      	ldr	r3, [pc, #76]	@ (800543c <_HandleIncomingPacket+0xdc>)
 80053ee:	7e1b      	ldrb	r3, [r3, #24]
 80053f0:	4618      	mov	r0, r3
 80053f2:	1cfb      	adds	r3, r7, #3
 80053f4:	2201      	movs	r2, #1
 80053f6:	4619      	mov	r1, r3
 80053f8:	f7ff fdde 	bl	8004fb8 <SEGGER_RTT_ReadNoLock>
 80053fc:	4603      	mov	r3, r0
 80053fe:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	dd13      	ble.n	800542e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005406:	78fb      	ldrb	r3, [r7, #3]
 8005408:	4618      	mov	r0, r3
 800540a:	f001 fbaf 	bl	8006b6c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800540e:	e00e      	b.n	800542e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	b25b      	sxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	da0c      	bge.n	8005432 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005418:	4b08      	ldr	r3, [pc, #32]	@ (800543c <_HandleIncomingPacket+0xdc>)
 800541a:	7e1b      	ldrb	r3, [r3, #24]
 800541c:	4618      	mov	r0, r3
 800541e:	1cfb      	adds	r3, r7, #3
 8005420:	2201      	movs	r2, #1
 8005422:	4619      	mov	r1, r3
 8005424:	f7ff fdc8 	bl	8004fb8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005428:	e003      	b.n	8005432 <_HandleIncomingPacket+0xd2>
      break;
 800542a:	bf00      	nop
 800542c:	e002      	b.n	8005434 <_HandleIncomingPacket+0xd4>
      break;
 800542e:	bf00      	nop
 8005430:	e000      	b.n	8005434 <_HandleIncomingPacket+0xd4>
      break;
 8005432:	bf00      	nop
    }
  }
}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	200143d4 	.word	0x200143d4

08005440 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005440:	b580      	push	{r7, lr}
 8005442:	b08c      	sub	sp, #48	@ 0x30
 8005444:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005446:	2301      	movs	r3, #1
 8005448:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800544a:	1d3b      	adds	r3, r7, #4
 800544c:	3301      	adds	r3, #1
 800544e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005454:	4b31      	ldr	r3, [pc, #196]	@ (800551c <_TrySendOverflowPacket+0xdc>)
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800545a:	e00b      	b.n	8005474 <_TrySendOverflowPacket+0x34>
 800545c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545e:	b2da      	uxtb	r2, r3
 8005460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005462:	1c59      	adds	r1, r3, #1
 8005464:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005466:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	09db      	lsrs	r3, r3, #7
 8005472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005476:	2b7f      	cmp	r3, #127	@ 0x7f
 8005478:	d8f0      	bhi.n	800545c <_TrySendOverflowPacket+0x1c>
 800547a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005488:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800548a:	4b25      	ldr	r3, [pc, #148]	@ (8005520 <_TrySendOverflowPacket+0xe0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005490:	4b22      	ldr	r3, [pc, #136]	@ (800551c <_TrySendOverflowPacket+0xdc>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	627b      	str	r3, [r7, #36]	@ 0x24
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	623b      	str	r3, [r7, #32]
 80054a2:	e00b      	b.n	80054bc <_TrySendOverflowPacket+0x7c>
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	1c59      	adds	r1, r3, #1
 80054ac:	6279      	str	r1, [r7, #36]	@ 0x24
 80054ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	09db      	lsrs	r3, r3, #7
 80054ba:	623b      	str	r3, [r7, #32]
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	2b7f      	cmp	r3, #127	@ 0x7f
 80054c0:	d8f0      	bhi.n	80054a4 <_TrySendOverflowPacket+0x64>
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80054c8:	6a3a      	ldr	r2, [r7, #32]
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80054d2:	4b12      	ldr	r3, [pc, #72]	@ (800551c <_TrySendOverflowPacket+0xdc>)
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	4618      	mov	r0, r3
 80054d8:	1d3b      	adds	r3, r7, #4
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	1d3b      	adds	r3, r7, #4
 80054e2:	4619      	mov	r1, r3
 80054e4:	f7fa fe94 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054e8:	4603      	mov	r3, r0
 80054ea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054f2:	4a0a      	ldr	r2, [pc, #40]	@ (800551c <_TrySendOverflowPacket+0xdc>)
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80054f8:	4b08      	ldr	r3, [pc, #32]	@ (800551c <_TrySendOverflowPacket+0xdc>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	4b06      	ldr	r3, [pc, #24]	@ (800551c <_TrySendOverflowPacket+0xdc>)
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	e004      	b.n	8005510 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005506:	4b05      	ldr	r3, [pc, #20]	@ (800551c <_TrySendOverflowPacket+0xdc>)
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	3301      	adds	r3, #1
 800550c:	4a03      	ldr	r2, [pc, #12]	@ (800551c <_TrySendOverflowPacket+0xdc>)
 800550e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005510:	693b      	ldr	r3, [r7, #16]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3730      	adds	r7, #48	@ 0x30
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	200143d4 	.word	0x200143d4
 8005520:	e0001004 	.word	0xe0001004

08005524 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	@ 0x28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005530:	4b6c      	ldr	r3, [pc, #432]	@ (80056e4 <_SendPacket+0x1c0>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d010      	beq.n	800555a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005538:	4b6a      	ldr	r3, [pc, #424]	@ (80056e4 <_SendPacket+0x1c0>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 80a3 	beq.w	8005688 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005542:	4b68      	ldr	r3, [pc, #416]	@ (80056e4 <_SendPacket+0x1c0>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d109      	bne.n	800555e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800554a:	f7ff ff79 	bl	8005440 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800554e:	4b65      	ldr	r3, [pc, #404]	@ (80056e4 <_SendPacket+0x1c0>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b01      	cmp	r3, #1
 8005554:	f040 809a 	bne.w	800568c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005558:	e001      	b.n	800555e <_SendPacket+0x3a>
    goto Send;
 800555a:	bf00      	nop
 800555c:	e000      	b.n	8005560 <_SendPacket+0x3c>
Send:
 800555e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b1f      	cmp	r3, #31
 8005564:	d809      	bhi.n	800557a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005566:	4b5f      	ldr	r3, [pc, #380]	@ (80056e4 <_SendPacket+0x1c0>)
 8005568:	69da      	ldr	r2, [r3, #28]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	fa22 f303 	lsr.w	r3, r2, r3
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	f040 808b 	bne.w	8005690 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b17      	cmp	r3, #23
 800557e:	d807      	bhi.n	8005590 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3b01      	subs	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	b2da      	uxtb	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	e03d      	b.n	800560c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b7f      	cmp	r3, #127	@ 0x7f
 800559c:	d912      	bls.n	80055c4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	09da      	lsrs	r2, r3, #7
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	3a01      	subs	r2, #1
 80055b6:	60fa      	str	r2, [r7, #12]
 80055b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	e006      	b.n	80055d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80055d6:	d912      	bls.n	80055fe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	09da      	lsrs	r2, r3, #7
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3b01      	subs	r3, #1
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	3a01      	subs	r2, #1
 80055f0:	60fa      	str	r2, [r7, #12]
 80055f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	e006      	b.n	800560c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3b01      	subs	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800560c:	4b36      	ldr	r3, [pc, #216]	@ (80056e8 <_SendPacket+0x1c4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005612:	4b34      	ldr	r3, [pc, #208]	@ (80056e4 <_SendPacket+0x1c0>)
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	623b      	str	r3, [r7, #32]
 8005624:	e00b      	b.n	800563e <_SendPacket+0x11a>
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	1c59      	adds	r1, r3, #1
 800562e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005630:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	09db      	lsrs	r3, r3, #7
 800563c:	623b      	str	r3, [r7, #32]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	2b7f      	cmp	r3, #127	@ 0x7f
 8005642:	d8f0      	bhi.n	8005626 <_SendPacket+0x102>
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	627a      	str	r2, [r7, #36]	@ 0x24
 800564a:	6a3a      	ldr	r2, [r7, #32]
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005654:	4b23      	ldr	r3, [pc, #140]	@ (80056e4 <_SendPacket+0x1c0>)
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	4618      	mov	r0, r3
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	461a      	mov	r2, r3
 8005662:	68f9      	ldr	r1, [r7, #12]
 8005664:	f7fa fdd4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005668:	4603      	mov	r3, r0
 800566a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005672:	4a1c      	ldr	r2, [pc, #112]	@ (80056e4 <_SendPacket+0x1c0>)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	60d3      	str	r3, [r2, #12]
 8005678:	e00b      	b.n	8005692 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800567a:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <_SendPacket+0x1c0>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	3301      	adds	r3, #1
 8005680:	b2da      	uxtb	r2, r3
 8005682:	4b18      	ldr	r3, [pc, #96]	@ (80056e4 <_SendPacket+0x1c0>)
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	e004      	b.n	8005692 <_SendPacket+0x16e>
    goto SendDone;
 8005688:	bf00      	nop
 800568a:	e002      	b.n	8005692 <_SendPacket+0x16e>
      goto SendDone;
 800568c:	bf00      	nop
 800568e:	e000      	b.n	8005692 <_SendPacket+0x16e>
      goto SendDone;
 8005690:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005692:	4b14      	ldr	r3, [pc, #80]	@ (80056e4 <_SendPacket+0x1c0>)
 8005694:	7e1b      	ldrb	r3, [r3, #24]
 8005696:	4619      	mov	r1, r3
 8005698:	4a14      	ldr	r2, [pc, #80]	@ (80056ec <_SendPacket+0x1c8>)
 800569a:	460b      	mov	r3, r1
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	440b      	add	r3, r1
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	4413      	add	r3, r2
 80056a4:	336c      	adds	r3, #108	@ 0x6c
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b0e      	ldr	r3, [pc, #56]	@ (80056e4 <_SendPacket+0x1c0>)
 80056aa:	7e1b      	ldrb	r3, [r3, #24]
 80056ac:	4618      	mov	r0, r3
 80056ae:	490f      	ldr	r1, [pc, #60]	@ (80056ec <_SendPacket+0x1c8>)
 80056b0:	4603      	mov	r3, r0
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	4403      	add	r3, r0
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	440b      	add	r3, r1
 80056ba:	3370      	adds	r3, #112	@ 0x70
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d00b      	beq.n	80056da <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80056c2:	4b08      	ldr	r3, [pc, #32]	@ (80056e4 <_SendPacket+0x1c0>)
 80056c4:	789b      	ldrb	r3, [r3, #2]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d107      	bne.n	80056da <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80056ca:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <_SendPacket+0x1c0>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80056d0:	f7ff fe46 	bl	8005360 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80056d4:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <_SendPacket+0x1c0>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80056da:	bf00      	nop
 80056dc:	3728      	adds	r7, #40	@ 0x28
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	200143d4 	.word	0x200143d4
 80056e8:	e0001004 	.word	0xe0001004
 80056ec:	20012f14 	.word	0x20012f14

080056f0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	@ 0x28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	3301      	adds	r3, #1
 8005706:	2b80      	cmp	r3, #128	@ 0x80
 8005708:	d80a      	bhi.n	8005720 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	1c59      	adds	r1, r3, #1
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6051      	str	r1, [r2, #4]
 8005714:	78fa      	ldrb	r2, [r7, #3]
 8005716:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2b80      	cmp	r3, #128	@ 0x80
 8005726:	d15a      	bne.n	80057de <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	623b      	str	r3, [r7, #32]
 8005748:	e00b      	b.n	8005762 <_StoreChar+0x72>
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	1c59      	adds	r1, r3, #1
 8005752:	6279      	str	r1, [r7, #36]	@ 0x24
 8005754:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	09db      	lsrs	r3, r3, #7
 8005760:	623b      	str	r3, [r7, #32]
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	2b7f      	cmp	r3, #127	@ 0x7f
 8005766:	d8f0      	bhi.n	800574a <_StoreChar+0x5a>
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	627a      	str	r2, [r7, #36]	@ 0x24
 800576e:	6a3a      	ldr	r2, [r7, #32]
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	2300      	movs	r3, #0
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	e00b      	b.n	800579a <_StoreChar+0xaa>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	b2da      	uxtb	r2, r3
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	1c59      	adds	r1, r3, #1
 800578a:	61f9      	str	r1, [r7, #28]
 800578c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	09db      	lsrs	r3, r3, #7
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	2b7f      	cmp	r3, #127	@ 0x7f
 800579e:	d8f0      	bhi.n	8005782 <_StoreChar+0x92>
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	61fa      	str	r2, [r7, #28]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	221a      	movs	r2, #26
 80057b6:	6939      	ldr	r1, [r7, #16]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff feb3 	bl	8005524 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fdbf 	bl	8005346 <_PreparePacket>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]
  }
}
 80057de:	bf00      	nop
 80057e0:	3728      	adds	r7, #40	@ 0x28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08a      	sub	sp, #40	@ 0x28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80057fa:	2301      	movs	r3, #1
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80057fe:	2301      	movs	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005802:	e007      	b.n	8005814 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005804:	6a3a      	ldr	r2, [r7, #32]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	fbb2 f3f3 	udiv	r3, r2, r3
 800580c:	623b      	str	r3, [r7, #32]
    Width++;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	3301      	adds	r3, #1
 8005812:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	429a      	cmp	r2, r3
 800581a:	d2f3      	bcs.n	8005804 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	429a      	cmp	r2, r3
 8005822:	d901      	bls.n	8005828 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d000      	beq.n	8005834 <_PrintUnsigned+0x4c>
 8005832:	e01f      	b.n	8005874 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005836:	2b00      	cmp	r3, #0
 8005838:	d01c      	beq.n	8005874 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800583a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <_PrintUnsigned+0x68>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <_PrintUnsigned+0x68>
        c = '0';
 800584a:	2330      	movs	r3, #48	@ 0x30
 800584c:	76fb      	strb	r3, [r7, #27]
 800584e:	e001      	b.n	8005854 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005850:	2320      	movs	r3, #32
 8005852:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005854:	e007      	b.n	8005866 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005858:	3b01      	subs	r3, #1
 800585a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800585c:	7efb      	ldrb	r3, [r7, #27]
 800585e:	4619      	mov	r1, r3
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff ff45 	bl	80056f0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <_PrintUnsigned+0x8c>
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	429a      	cmp	r2, r3
 8005872:	d3f0      	bcc.n	8005856 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d903      	bls.n	8005882 <_PrintUnsigned+0x9a>
      NumDigits--;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	3b01      	subs	r3, #1
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	e009      	b.n	8005896 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	fbb2 f3f3 	udiv	r3, r2, r3
 800588a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d200      	bcs.n	8005896 <_PrintUnsigned+0xae>
        break;
 8005894:	e005      	b.n	80058a2 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80058a0:	e7e8      	b.n	8005874 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058aa:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80058ba:	4a15      	ldr	r2, [pc, #84]	@ (8005910 <_PrintUnsigned+0x128>)
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	4413      	add	r3, r2
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	4619      	mov	r1, r3
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff ff13 	bl	80056f0 <_StoreChar>
    Digit /= Base;
 80058ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e3      	bne.n	80058a2 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80058da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d011      	beq.n	8005908 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00e      	beq.n	8005908 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058ea:	e006      	b.n	80058fa <_PrintUnsigned+0x112>
        FieldWidth--;
 80058ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ee:	3b01      	subs	r3, #1
 80058f0:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80058f2:	2120      	movs	r1, #32
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff fefb 	bl	80056f0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <_PrintUnsigned+0x120>
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005904:	429a      	cmp	r2, r3
 8005906:	d3f1      	bcc.n	80058ec <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005908:	bf00      	nop
 800590a:	3728      	adds	r7, #40	@ 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	08007918 	.word	0x08007918

08005914 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af02      	add	r7, sp, #8
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	bfb8      	it	lt
 8005928:	425b      	neglt	r3, r3
 800592a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800592c:	2301      	movs	r3, #1
 800592e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005930:	e007      	b.n	8005942 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	fb92 f3f3 	sdiv	r3, r2, r3
 800593a:	613b      	str	r3, [r7, #16]
    Width++;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	3301      	adds	r3, #1
 8005940:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	429a      	cmp	r2, r3
 8005948:	daf3      	bge.n	8005932 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	429a      	cmp	r2, r3
 8005950:	d901      	bls.n	8005956 <_PrintInt+0x42>
    Width = NumDigits;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <_PrintInt+0x5e>
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	db04      	blt.n	800596c <_PrintInt+0x58>
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <_PrintInt+0x5e>
    FieldWidth--;
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	3b01      	subs	r3, #1
 8005970:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <_PrintInt+0x6e>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d016      	beq.n	80059b0 <_PrintInt+0x9c>
 8005982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d111      	bne.n	80059b0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00e      	beq.n	80059b0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005992:	e006      	b.n	80059a2 <_PrintInt+0x8e>
        FieldWidth--;
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	3b01      	subs	r3, #1
 8005998:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800599a:	2120      	movs	r1, #32
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff fea7 	bl	80056f0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <_PrintInt+0x9c>
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d3f1      	bcc.n	8005994 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	da07      	bge.n	80059c6 <_PrintInt+0xb2>
    v = -v;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	425b      	negs	r3, r3
 80059ba:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80059bc:	212d      	movs	r1, #45	@ 0x2d
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff fe96 	bl	80056f0 <_StoreChar>
 80059c4:	e008      	b.n	80059d8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80059d0:	212b      	movs	r1, #43	@ 0x2b
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff fe8c 	bl	80056f0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d019      	beq.n	8005a16 <_PrintInt+0x102>
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d114      	bne.n	8005a16 <_PrintInt+0x102>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d111      	bne.n	8005a16 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00e      	beq.n	8005a16 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059f8:	e006      	b.n	8005a08 <_PrintInt+0xf4>
        FieldWidth--;
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005a00:	2130      	movs	r1, #48	@ 0x30
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f7ff fe74 	bl	80056f0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <_PrintInt+0x102>
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d3f1      	bcc.n	80059fa <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff fedf 	bl	80057e8 <_PrintUnsigned>
}
 8005a2a:	bf00      	nop
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b098      	sub	sp, #96	@ 0x60
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a40:	f3ef 8311 	mrs	r3, BASEPRI
 8005a44:	f04f 0120 	mov.w	r1, #32
 8005a48:	f381 8811 	msr	BASEPRI, r1
 8005a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a4e:	48b7      	ldr	r0, [pc, #732]	@ (8005d2c <_VPrintTarget+0x2f8>)
 8005a50:	f7ff fc79 	bl	8005346 <_PreparePacket>
 8005a54:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005a56:	4bb5      	ldr	r3, [pc, #724]	@ (8005d2c <_VPrintTarget+0x2f8>)
 8005a58:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a60:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	3301      	adds	r3, #1
 8005a66:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005a7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 8183 	beq.w	8005d8a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005a84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a88:	2b25      	cmp	r3, #37	@ 0x25
 8005a8a:	f040 8170 	bne.w	8005d6e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005a92:	2301      	movs	r3, #1
 8005a94:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005a9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005aa2:	3b23      	subs	r3, #35	@ 0x23
 8005aa4:	2b0d      	cmp	r3, #13
 8005aa6:	d83f      	bhi.n	8005b28 <_VPrintTarget+0xf4>
 8005aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab0 <_VPrintTarget+0x7c>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005b19 	.word	0x08005b19
 8005ab4:	08005b29 	.word	0x08005b29
 8005ab8:	08005b29 	.word	0x08005b29
 8005abc:	08005b29 	.word	0x08005b29
 8005ac0:	08005b29 	.word	0x08005b29
 8005ac4:	08005b29 	.word	0x08005b29
 8005ac8:	08005b29 	.word	0x08005b29
 8005acc:	08005b29 	.word	0x08005b29
 8005ad0:	08005b09 	.word	0x08005b09
 8005ad4:	08005b29 	.word	0x08005b29
 8005ad8:	08005ae9 	.word	0x08005ae9
 8005adc:	08005b29 	.word	0x08005b29
 8005ae0:	08005b29 	.word	0x08005b29
 8005ae4:	08005af9 	.word	0x08005af9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005ae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aea:	f043 0301 	orr.w	r3, r3, #1
 8005aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3301      	adds	r3, #1
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e01a      	b.n	8005b2e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005af8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005afa:	f043 0302 	orr.w	r3, r3, #2
 8005afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3301      	adds	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	e012      	b.n	8005b2e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b0a:	f043 0304 	orr.w	r3, r3, #4
 8005b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3301      	adds	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e00a      	b.n	8005b2e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005b18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b1a:	f043 0308 	orr.w	r3, r3, #8
 8005b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3301      	adds	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	e002      	b.n	8005b2e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b2c:	bf00      	nop
        }
      } while (v);
 8005b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1b0      	bne.n	8005a96 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005b34:	2300      	movs	r3, #0
 8005b36:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b44:	2b2f      	cmp	r3, #47	@ 0x2f
 8005b46:	d912      	bls.n	8005b6e <_VPrintTarget+0x13a>
 8005b48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b4c:	2b39      	cmp	r3, #57	@ 0x39
 8005b4e:	d80e      	bhi.n	8005b6e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	461a      	mov	r2, r3
 8005b62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b66:	4413      	add	r3, r2
 8005b68:	3b30      	subs	r3, #48	@ 0x30
 8005b6a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005b6c:	e7e4      	b.n	8005b38 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005b7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b80:	d11d      	bne.n	8005bbe <_VPrintTarget+0x18a>
        sFormat++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3301      	adds	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005b90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b94:	2b2f      	cmp	r3, #47	@ 0x2f
 8005b96:	d912      	bls.n	8005bbe <_VPrintTarget+0x18a>
 8005b98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b9c:	2b39      	cmp	r3, #57	@ 0x39
 8005b9e:	d80e      	bhi.n	8005bbe <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005ba6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3b30      	subs	r3, #48	@ 0x30
 8005bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005bbc:	e7e4      	b.n	8005b88 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005bc6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bca:	2b6c      	cmp	r3, #108	@ 0x6c
 8005bcc:	d003      	beq.n	8005bd6 <_VPrintTarget+0x1a2>
 8005bce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bd2:	2b68      	cmp	r3, #104	@ 0x68
 8005bd4:	d107      	bne.n	8005be6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3301      	adds	r3, #1
 8005be2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005be4:	e7ef      	b.n	8005bc6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005be6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bea:	2b25      	cmp	r3, #37	@ 0x25
 8005bec:	f000 80b3 	beq.w	8005d56 <_VPrintTarget+0x322>
 8005bf0:	2b25      	cmp	r3, #37	@ 0x25
 8005bf2:	f2c0 80b7 	blt.w	8005d64 <_VPrintTarget+0x330>
 8005bf6:	2b78      	cmp	r3, #120	@ 0x78
 8005bf8:	f300 80b4 	bgt.w	8005d64 <_VPrintTarget+0x330>
 8005bfc:	2b58      	cmp	r3, #88	@ 0x58
 8005bfe:	f2c0 80b1 	blt.w	8005d64 <_VPrintTarget+0x330>
 8005c02:	3b58      	subs	r3, #88	@ 0x58
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	f200 80ad 	bhi.w	8005d64 <_VPrintTarget+0x330>
 8005c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c10 <_VPrintTarget+0x1dc>)
 8005c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c10:	08005d07 	.word	0x08005d07
 8005c14:	08005d65 	.word	0x08005d65
 8005c18:	08005d65 	.word	0x08005d65
 8005c1c:	08005d65 	.word	0x08005d65
 8005c20:	08005d65 	.word	0x08005d65
 8005c24:	08005d65 	.word	0x08005d65
 8005c28:	08005d65 	.word	0x08005d65
 8005c2c:	08005d65 	.word	0x08005d65
 8005c30:	08005d65 	.word	0x08005d65
 8005c34:	08005d65 	.word	0x08005d65
 8005c38:	08005d65 	.word	0x08005d65
 8005c3c:	08005c95 	.word	0x08005c95
 8005c40:	08005cbb 	.word	0x08005cbb
 8005c44:	08005d65 	.word	0x08005d65
 8005c48:	08005d65 	.word	0x08005d65
 8005c4c:	08005d65 	.word	0x08005d65
 8005c50:	08005d65 	.word	0x08005d65
 8005c54:	08005d65 	.word	0x08005d65
 8005c58:	08005d65 	.word	0x08005d65
 8005c5c:	08005d65 	.word	0x08005d65
 8005c60:	08005d65 	.word	0x08005d65
 8005c64:	08005d65 	.word	0x08005d65
 8005c68:	08005d65 	.word	0x08005d65
 8005c6c:	08005d65 	.word	0x08005d65
 8005c70:	08005d31 	.word	0x08005d31
 8005c74:	08005d65 	.word	0x08005d65
 8005c78:	08005d65 	.word	0x08005d65
 8005c7c:	08005d65 	.word	0x08005d65
 8005c80:	08005d65 	.word	0x08005d65
 8005c84:	08005ce1 	.word	0x08005ce1
 8005c88:	08005d65 	.word	0x08005d65
 8005c8c:	08005d65 	.word	0x08005d65
 8005c90:	08005d07 	.word	0x08005d07
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	1d19      	adds	r1, r3, #4
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6011      	str	r1, [r2, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ca4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8005ca8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005cac:	f107 0314 	add.w	r3, r7, #20
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff fd1c 	bl	80056f0 <_StoreChar>
        break;
 8005cb8:	e055      	b.n	8005d66 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	1d19      	adds	r1, r3, #4
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6011      	str	r1, [r2, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005cc8:	f107 0014 	add.w	r0, r7, #20
 8005ccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd6:	220a      	movs	r2, #10
 8005cd8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cda:	f7ff fe1b 	bl	8005914 <_PrintInt>
        break;
 8005cde:	e042      	b.n	8005d66 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	1d19      	adds	r1, r3, #4
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6011      	str	r1, [r2, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005cee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cf0:	f107 0014 	add.w	r0, r7, #20
 8005cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cfe:	220a      	movs	r2, #10
 8005d00:	f7ff fd72 	bl	80057e8 <_PrintUnsigned>
        break;
 8005d04:	e02f      	b.n	8005d66 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	1d19      	adds	r1, r3, #4
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6011      	str	r1, [r2, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005d14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d16:	f107 0014 	add.w	r0, r7, #20
 8005d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d24:	2210      	movs	r2, #16
 8005d26:	f7ff fd5f 	bl	80057e8 <_PrintUnsigned>
        break;
 8005d2a:	e01c      	b.n	8005d66 <_VPrintTarget+0x332>
 8005d2c:	20014404 	.word	0x20014404
      case 'p':
        v = va_arg(*pParamList, int);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	1d19      	adds	r1, r3, #4
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6011      	str	r1, [r2, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005d3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d40:	f107 0014 	add.w	r0, r7, #20
 8005d44:	2300      	movs	r3, #0
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	2308      	movs	r3, #8
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	2210      	movs	r2, #16
 8005d50:	f7ff fd4a 	bl	80057e8 <_PrintUnsigned>
        break;
 8005d54:	e007      	b.n	8005d66 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005d56:	f107 0314 	add.w	r3, r7, #20
 8005d5a:	2125      	movs	r1, #37	@ 0x25
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff fcc7 	bl	80056f0 <_StoreChar>
        break;
 8005d62:	e000      	b.n	8005d66 <_VPrintTarget+0x332>
      default:
        break;
 8005d64:	bf00      	nop
      }
      sFormat++;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e007      	b.n	8005d7e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005d6e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005d72:	f107 0314 	add.w	r3, r7, #20
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fcb9 	bl	80056f0 <_StoreChar>
    }
  } while (*sFormat);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f47f ae72 	bne.w	8005a6c <_VPrintTarget+0x38>
 8005d88:	e000      	b.n	8005d8c <_VPrintTarget+0x358>
      break;
 8005d8a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d041      	beq.n	8005e16 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005da2:	e00b      	b.n	8005dbc <_VPrintTarget+0x388>
 8005da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005daa:	1c59      	adds	r1, r3, #1
 8005dac:	6439      	str	r1, [r7, #64]	@ 0x40
 8005dae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db8:	09db      	lsrs	r3, r3, #7
 8005dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dc0:	d8f0      	bhi.n	8005da4 <_VPrintTarget+0x370>
 8005dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005dc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dda:	e00b      	b.n	8005df4 <_VPrintTarget+0x3c0>
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de2:	1c59      	adds	r1, r3, #1
 8005de4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005de6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df0:	09db      	lsrs	r3, r3, #7
 8005df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005df8:	d8f0      	bhi.n	8005ddc <_VPrintTarget+0x3a8>
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005e00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e08:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	69b9      	ldr	r1, [r7, #24]
 8005e0e:	221a      	movs	r2, #26
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff fb87 	bl	8005524 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005e1c:	bf00      	nop
 8005e1e:	3758      	adds	r7, #88	@ 0x58
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e32:	2300      	movs	r3, #0
 8005e34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005e38:	4917      	ldr	r1, [pc, #92]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x74>)
 8005e3a:	4818      	ldr	r0, [pc, #96]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x78>)
 8005e3c:	f7ff f942 	bl	80050c4 <SEGGER_RTT_AllocUpBuffer>
 8005e40:	4603      	mov	r3, r0
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	4b16      	ldr	r3, [pc, #88]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e46:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005e48:	4b15      	ldr	r3, [pc, #84]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e4a:	785a      	ldrb	r2, [r3, #1]
 8005e4c:	4b14      	ldr	r3, [pc, #80]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e4e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e50:	4b13      	ldr	r3, [pc, #76]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e52:	7e1b      	ldrb	r3, [r3, #24]
 8005e54:	4618      	mov	r0, r3
 8005e56:	2300      	movs	r3, #0
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	4a11      	ldr	r2, [pc, #68]	@ (8005ea4 <SEGGER_SYSVIEW_Init+0x80>)
 8005e5e:	490f      	ldr	r1, [pc, #60]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x78>)
 8005e60:	f7ff f9b4 	bl	80051cc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e64:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea8 <SEGGER_SYSVIEW_Init+0x84>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e70:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e72:	4a0b      	ldr	r2, [pc, #44]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e78:	4a09      	ldr	r2, [pc, #36]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e84:	4a06      	ldr	r2, [pc, #24]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e8a:	4b05      	ldr	r3, [pc, #20]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	200133cc 	.word	0x200133cc
 8005e9c:	080078e0 	.word	0x080078e0
 8005ea0:	200143d4 	.word	0x200143d4
 8005ea4:	200143cc 	.word	0x200143cc
 8005ea8:	e0001004 	.word	0xe0001004

08005eac <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005eb4:	4a04      	ldr	r2, [pc, #16]	@ (8005ec8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6113      	str	r3, [r2, #16]
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	200143d4 	.word	0x200143d4

08005ecc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed8:	f04f 0120 	mov.w	r1, #32
 8005edc:	f381 8811 	msr	BASEPRI, r1
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	4808      	ldr	r0, [pc, #32]	@ (8005f04 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ee4:	f7ff fa2f 	bl	8005346 <_PreparePacket>
 8005ee8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	68b8      	ldr	r0, [r7, #8]
 8005ef0:	f7ff fb18 	bl	8005524 <_SendPacket>
  RECORD_END();
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f383 8811 	msr	BASEPRI, r3
}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20014404 	.word	0x20014404

08005f08 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f12:	f3ef 8311 	mrs	r3, BASEPRI
 8005f16:	f04f 0120 	mov.w	r1, #32
 8005f1a:	f381 8811 	msr	BASEPRI, r1
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	4816      	ldr	r0, [pc, #88]	@ (8005f7c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005f22:	f7ff fa10 	bl	8005346 <_PreparePacket>
 8005f26:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e00b      	b.n	8005f4e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	1c59      	adds	r1, r3, #1
 8005f3e:	61f9      	str	r1, [r7, #28]
 8005f40:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	701a      	strb	r2, [r3, #0]
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	09db      	lsrs	r3, r3, #7
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f52:	d8f0      	bhi.n	8005f36 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	61fa      	str	r2, [r7, #28]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	68f9      	ldr	r1, [r7, #12]
 8005f68:	6938      	ldr	r0, [r7, #16]
 8005f6a:	f7ff fadb 	bl	8005524 <_SendPacket>
  RECORD_END();
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f383 8811 	msr	BASEPRI, r3
}
 8005f74:	bf00      	nop
 8005f76:	3720      	adds	r7, #32
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	20014404 	.word	0x20014404

08005f80 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08c      	sub	sp, #48	@ 0x30
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f8c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f90:	f04f 0120 	mov.w	r1, #32
 8005f94:	f381 8811 	msr	BASEPRI, r1
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	4825      	ldr	r0, [pc, #148]	@ (8006030 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005f9c:	f7ff f9d3 	bl	8005346 <_PreparePacket>
 8005fa0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fae:	e00b      	b.n	8005fc8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb6:	1c59      	adds	r1, r3, #1
 8005fb8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005fba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]
 8005fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc4:	09db      	lsrs	r3, r3, #7
 8005fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fca:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fcc:	d8f0      	bhi.n	8005fb0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fdc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	623b      	str	r3, [r7, #32]
 8005fe6:	e00b      	b.n	8006000 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fee:	1c59      	adds	r1, r3, #1
 8005ff0:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ff2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	09db      	lsrs	r3, r3, #7
 8005ffe:	623b      	str	r3, [r7, #32]
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	2b7f      	cmp	r3, #127	@ 0x7f
 8006004:	d8f0      	bhi.n	8005fe8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	627a      	str	r2, [r7, #36]	@ 0x24
 800600c:	6a3a      	ldr	r2, [r7, #32]
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	6979      	ldr	r1, [r7, #20]
 800601a:	69b8      	ldr	r0, [r7, #24]
 800601c:	f7ff fa82 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	f383 8811 	msr	BASEPRI, r3
}
 8006026:	bf00      	nop
 8006028:	3730      	adds	r7, #48	@ 0x30
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20014404 	.word	0x20014404

08006034 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b08e      	sub	sp, #56	@ 0x38
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006042:	f3ef 8311 	mrs	r3, BASEPRI
 8006046:	f04f 0120 	mov.w	r1, #32
 800604a:	f381 8811 	msr	BASEPRI, r1
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	4832      	ldr	r0, [pc, #200]	@ (800611c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006052:	f7ff f978 	bl	8005346 <_PreparePacket>
 8006056:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	633b      	str	r3, [r7, #48]	@ 0x30
 8006064:	e00b      	b.n	800607e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006068:	b2da      	uxtb	r2, r3
 800606a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606c:	1c59      	adds	r1, r3, #1
 800606e:	6379      	str	r1, [r7, #52]	@ 0x34
 8006070:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	09db      	lsrs	r3, r3, #7
 800607c:	633b      	str	r3, [r7, #48]	@ 0x30
 800607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006080:	2b7f      	cmp	r3, #127	@ 0x7f
 8006082:	d8f0      	bhi.n	8006066 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	637a      	str	r2, [r7, #52]	@ 0x34
 800608a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006092:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800609c:	e00b      	b.n	80060b6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800609e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a4:	1c59      	adds	r1, r3, #1
 80060a6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80060a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b2:	09db      	lsrs	r3, r3, #7
 80060b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80060ba:	d8f0      	bhi.n	800609e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80060bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	623b      	str	r3, [r7, #32]
 80060d4:	e00b      	b.n	80060ee <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	1c59      	adds	r1, r3, #1
 80060de:	6279      	str	r1, [r7, #36]	@ 0x24
 80060e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	09db      	lsrs	r3, r3, #7
 80060ec:	623b      	str	r3, [r7, #32]
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80060f2:	d8f0      	bhi.n	80060d6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80060fa:	6a3a      	ldr	r2, [r7, #32]
 80060fc:	b2d2      	uxtb	r2, r2
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006102:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	6979      	ldr	r1, [r7, #20]
 8006108:	69b8      	ldr	r0, [r7, #24]
 800610a:	f7ff fa0b 	bl	8005524 <_SendPacket>
  RECORD_END();
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	f383 8811 	msr	BASEPRI, r3
}
 8006114:	bf00      	nop
 8006116:	3738      	adds	r7, #56	@ 0x38
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20014404 	.word	0x20014404

08006120 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006120:	b580      	push	{r7, lr}
 8006122:	b090      	sub	sp, #64	@ 0x40
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800612e:	f3ef 8311 	mrs	r3, BASEPRI
 8006132:	f04f 0120 	mov.w	r1, #32
 8006136:	f381 8811 	msr	BASEPRI, r1
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	4840      	ldr	r0, [pc, #256]	@ (8006240 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800613e:	f7ff f902 	bl	8005346 <_PreparePacket>
 8006142:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006150:	e00b      	b.n	800616a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006154:	b2da      	uxtb	r2, r3
 8006156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006158:	1c59      	adds	r1, r3, #1
 800615a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800615c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006166:	09db      	lsrs	r3, r3, #7
 8006168:	63bb      	str	r3, [r7, #56]	@ 0x38
 800616a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616c:	2b7f      	cmp	r3, #127	@ 0x7f
 800616e:	d8f0      	bhi.n	8006152 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006176:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800617e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	637b      	str	r3, [r7, #52]	@ 0x34
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	633b      	str	r3, [r7, #48]	@ 0x30
 8006188:	e00b      	b.n	80061a2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	b2da      	uxtb	r2, r3
 800618e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006190:	1c59      	adds	r1, r3, #1
 8006192:	6379      	str	r1, [r7, #52]	@ 0x34
 8006194:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	09db      	lsrs	r3, r3, #7
 80061a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80061a6:	d8f0      	bhi.n	800618a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80061a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	637a      	str	r2, [r7, #52]	@ 0x34
 80061ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061c0:	e00b      	b.n	80061da <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80061c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c8:	1c59      	adds	r1, r3, #1
 80061ca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80061cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d6:	09db      	lsrs	r3, r3, #7
 80061d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80061de:	d8f0      	bhi.n	80061c2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80061e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061f6:	623b      	str	r3, [r7, #32]
 80061f8:	e00b      	b.n	8006212 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	1c59      	adds	r1, r3, #1
 8006202:	6279      	str	r1, [r7, #36]	@ 0x24
 8006204:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	09db      	lsrs	r3, r3, #7
 8006210:	623b      	str	r3, [r7, #32]
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	2b7f      	cmp	r3, #127	@ 0x7f
 8006216:	d8f0      	bhi.n	80061fa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	627a      	str	r2, [r7, #36]	@ 0x24
 800621e:	6a3a      	ldr	r2, [r7, #32]
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	6979      	ldr	r1, [r7, #20]
 800622c:	69b8      	ldr	r0, [r7, #24]
 800622e:	f7ff f979 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	f383 8811 	msr	BASEPRI, r3
}
 8006238:	bf00      	nop
 800623a:	3740      	adds	r7, #64	@ 0x40
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20014404 	.word	0x20014404

08006244 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b08c      	sub	sp, #48	@ 0x30
 8006248:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800624a:	4b58      	ldr	r3, [pc, #352]	@ (80063ac <SEGGER_SYSVIEW_Start+0x168>)
 800624c:	2201      	movs	r2, #1
 800624e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006250:	f3ef 8311 	mrs	r3, BASEPRI
 8006254:	f04f 0120 	mov.w	r1, #32
 8006258:	f381 8811 	msr	BASEPRI, r1
 800625c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800625e:	4b53      	ldr	r3, [pc, #332]	@ (80063ac <SEGGER_SYSVIEW_Start+0x168>)
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	220a      	movs	r2, #10
 8006264:	4952      	ldr	r1, [pc, #328]	@ (80063b0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006266:	4618      	mov	r0, r3
 8006268:	f7f9 ffd2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006272:	200a      	movs	r0, #10
 8006274:	f7ff fe2a 	bl	8005ecc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006278:	f3ef 8311 	mrs	r3, BASEPRI
 800627c:	f04f 0120 	mov.w	r1, #32
 8006280:	f381 8811 	msr	BASEPRI, r1
 8006284:	60bb      	str	r3, [r7, #8]
 8006286:	484b      	ldr	r0, [pc, #300]	@ (80063b4 <SEGGER_SYSVIEW_Start+0x170>)
 8006288:	f7ff f85d 	bl	8005346 <_PreparePacket>
 800628c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006296:	4b45      	ldr	r3, [pc, #276]	@ (80063ac <SEGGER_SYSVIEW_Start+0x168>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800629c:	e00b      	b.n	80062b6 <SEGGER_SYSVIEW_Start+0x72>
 800629e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a4:	1c59      	adds	r1, r3, #1
 80062a6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80062a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b2:	09db      	lsrs	r3, r3, #7
 80062b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80062ba:	d8f0      	bhi.n	800629e <SEGGER_SYSVIEW_Start+0x5a>
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80062d0:	4b36      	ldr	r3, [pc, #216]	@ (80063ac <SEGGER_SYSVIEW_Start+0x168>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	623b      	str	r3, [r7, #32]
 80062d6:	e00b      	b.n	80062f0 <SEGGER_SYSVIEW_Start+0xac>
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	1c59      	adds	r1, r3, #1
 80062e0:	6279      	str	r1, [r7, #36]	@ 0x24
 80062e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	09db      	lsrs	r3, r3, #7
 80062ee:	623b      	str	r3, [r7, #32]
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062f4:	d8f0      	bhi.n	80062d8 <SEGGER_SYSVIEW_Start+0x94>
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80062fc:	6a3a      	ldr	r2, [r7, #32]
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	4b28      	ldr	r3, [pc, #160]	@ (80063ac <SEGGER_SYSVIEW_Start+0x168>)
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	61bb      	str	r3, [r7, #24]
 8006310:	e00b      	b.n	800632a <SEGGER_SYSVIEW_Start+0xe6>
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	b2da      	uxtb	r2, r3
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	1c59      	adds	r1, r3, #1
 800631a:	61f9      	str	r1, [r7, #28]
 800631c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	09db      	lsrs	r3, r3, #7
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b7f      	cmp	r3, #127	@ 0x7f
 800632e:	d8f0      	bhi.n	8006312 <SEGGER_SYSVIEW_Start+0xce>
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	61fa      	str	r2, [r7, #28]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	2300      	movs	r3, #0
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	e00b      	b.n	8006362 <SEGGER_SYSVIEW_Start+0x11e>
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	b2da      	uxtb	r2, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	1c59      	adds	r1, r3, #1
 8006352:	6179      	str	r1, [r7, #20]
 8006354:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	09db      	lsrs	r3, r3, #7
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b7f      	cmp	r3, #127	@ 0x7f
 8006366:	d8f0      	bhi.n	800634a <SEGGER_SYSVIEW_Start+0x106>
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	617a      	str	r2, [r7, #20]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006378:	2218      	movs	r2, #24
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff f8d1 	bl	8005524 <_SendPacket>
      RECORD_END();
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006388:	4b08      	ldr	r3, [pc, #32]	@ (80063ac <SEGGER_SYSVIEW_Start+0x168>)
 800638a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006390:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <SEGGER_SYSVIEW_Start+0x168>)
 8006392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006394:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006396:	f000 f9eb 	bl	8006770 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800639a:	f000 f9b1 	bl	8006700 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800639e:	f000 fc83 	bl	8006ca8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80063a2:	bf00      	nop
 80063a4:	3730      	adds	r7, #48	@ 0x30
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	200143d4 	.word	0x200143d4
 80063b0:	0800790c 	.word	0x0800790c
 80063b4:	20014404 	.word	0x20014404

080063b8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063be:	f3ef 8311 	mrs	r3, BASEPRI
 80063c2:	f04f 0120 	mov.w	r1, #32
 80063c6:	f381 8811 	msr	BASEPRI, r1
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	480b      	ldr	r0, [pc, #44]	@ (80063fc <SEGGER_SYSVIEW_Stop+0x44>)
 80063ce:	f7fe ffba 	bl	8005346 <_PreparePacket>
 80063d2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80063d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006400 <SEGGER_SYSVIEW_Stop+0x48>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d007      	beq.n	80063ec <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80063dc:	220b      	movs	r2, #11
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6838      	ldr	r0, [r7, #0]
 80063e2:	f7ff f89f 	bl	8005524 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80063e6:	4b06      	ldr	r3, [pc, #24]	@ (8006400 <SEGGER_SYSVIEW_Stop+0x48>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f383 8811 	msr	BASEPRI, r3
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20014404 	.word	0x20014404
 8006400:	200143d4 	.word	0x200143d4

08006404 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b08c      	sub	sp, #48	@ 0x30
 8006408:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800640a:	f3ef 8311 	mrs	r3, BASEPRI
 800640e:	f04f 0120 	mov.w	r1, #32
 8006412:	f381 8811 	msr	BASEPRI, r1
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	4845      	ldr	r0, [pc, #276]	@ (8006530 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800641a:	f7fe ff94 	bl	8005346 <_PreparePacket>
 800641e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006428:	4b42      	ldr	r3, [pc, #264]	@ (8006534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800642e:	e00b      	b.n	8006448 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	b2da      	uxtb	r2, r3
 8006434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006436:	1c59      	adds	r1, r3, #1
 8006438:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800643a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	09db      	lsrs	r3, r3, #7
 8006446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644a:	2b7f      	cmp	r3, #127	@ 0x7f
 800644c:	d8f0      	bhi.n	8006430 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800644e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
 8006462:	4b34      	ldr	r3, [pc, #208]	@ (8006534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	623b      	str	r3, [r7, #32]
 8006468:	e00b      	b.n	8006482 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	b2da      	uxtb	r2, r3
 800646e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006470:	1c59      	adds	r1, r3, #1
 8006472:	6279      	str	r1, [r7, #36]	@ 0x24
 8006474:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	09db      	lsrs	r3, r3, #7
 8006480:	623b      	str	r3, [r7, #32]
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	2b7f      	cmp	r3, #127	@ 0x7f
 8006486:	d8f0      	bhi.n	800646a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	627a      	str	r2, [r7, #36]	@ 0x24
 800648e:	6a3a      	ldr	r2, [r7, #32]
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	4b25      	ldr	r3, [pc, #148]	@ (8006534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	e00b      	b.n	80064bc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	1c59      	adds	r1, r3, #1
 80064ac:	61f9      	str	r1, [r7, #28]
 80064ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	09db      	lsrs	r3, r3, #7
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b7f      	cmp	r3, #127	@ 0x7f
 80064c0:	d8f0      	bhi.n	80064a4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	61fa      	str	r2, [r7, #28]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	2300      	movs	r3, #0
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	e00b      	b.n	80064f4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	1c59      	adds	r1, r3, #1
 80064e4:	6179      	str	r1, [r7, #20]
 80064e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	09db      	lsrs	r3, r3, #7
 80064f2:	613b      	str	r3, [r7, #16]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80064f8:	d8f0      	bhi.n	80064dc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	617a      	str	r2, [r7, #20]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800650a:	2218      	movs	r2, #24
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	68b8      	ldr	r0, [r7, #8]
 8006510:	f7ff f808 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800651a:	4b06      	ldr	r3, [pc, #24]	@ (8006534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006522:	4b04      	ldr	r3, [pc, #16]	@ (8006534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006526:	4798      	blx	r3
  }
}
 8006528:	bf00      	nop
 800652a:	3730      	adds	r7, #48	@ 0x30
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20014404 	.word	0x20014404
 8006534:	200143d4 	.word	0x200143d4

08006538 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b092      	sub	sp, #72	@ 0x48
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006540:	f3ef 8311 	mrs	r3, BASEPRI
 8006544:	f04f 0120 	mov.w	r1, #32
 8006548:	f381 8811 	msr	BASEPRI, r1
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	486a      	ldr	r0, [pc, #424]	@ (80066f8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006550:	f7fe fef9 	bl	8005346 <_PreparePacket>
 8006554:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	647b      	str	r3, [r7, #68]	@ 0x44
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b66      	ldr	r3, [pc, #408]	@ (80066fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	643b      	str	r3, [r7, #64]	@ 0x40
 800656a:	e00b      	b.n	8006584 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800656c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800656e:	b2da      	uxtb	r2, r3
 8006570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006572:	1c59      	adds	r1, r3, #1
 8006574:	6479      	str	r1, [r7, #68]	@ 0x44
 8006576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006580:	09db      	lsrs	r3, r3, #7
 8006582:	643b      	str	r3, [r7, #64]	@ 0x40
 8006584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006586:	2b7f      	cmp	r3, #127	@ 0x7f
 8006588:	d8f0      	bhi.n	800656c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800658a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006598:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065a4:	e00b      	b.n	80065be <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80065a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ac:	1c59      	adds	r1, r3, #1
 80065ae:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80065b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ba:	09db      	lsrs	r3, r3, #7
 80065bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80065c2:	d8f0      	bhi.n	80065a6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80065c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80065ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065d2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	4619      	mov	r1, r3
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7fe fe65 	bl	80052ac <_EncodeStr>
 80065e2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80065e4:	2209      	movs	r2, #9
 80065e6:	68f9      	ldr	r1, [r7, #12]
 80065e8:	6938      	ldr	r0, [r7, #16]
 80065ea:	f7fe ff9b 	bl	8005524 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4b40      	ldr	r3, [pc, #256]	@ (80066fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	633b      	str	r3, [r7, #48]	@ 0x30
 8006602:	e00b      	b.n	800661c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006606:	b2da      	uxtb	r2, r3
 8006608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660a:	1c59      	adds	r1, r3, #1
 800660c:	6379      	str	r1, [r7, #52]	@ 0x34
 800660e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	09db      	lsrs	r3, r3, #7
 800661a:	633b      	str	r3, [r7, #48]	@ 0x30
 800661c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006620:	d8f0      	bhi.n	8006604 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	637a      	str	r2, [r7, #52]	@ 0x34
 8006628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800663c:	e00b      	b.n	8006656 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800663e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006640:	b2da      	uxtb	r2, r3
 8006642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006644:	1c59      	adds	r1, r3, #1
 8006646:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006648:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	09db      	lsrs	r3, r3, #7
 8006654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	2b7f      	cmp	r3, #127	@ 0x7f
 800665a:	d8f0      	bhi.n	800663e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800665c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	623b      	str	r3, [r7, #32]
 8006676:	e00b      	b.n	8006690 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	b2da      	uxtb	r2, r3
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	1c59      	adds	r1, r3, #1
 8006680:	6279      	str	r1, [r7, #36]	@ 0x24
 8006682:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	09db      	lsrs	r3, r3, #7
 800668e:	623b      	str	r3, [r7, #32]
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	2b7f      	cmp	r3, #127	@ 0x7f
 8006694:	d8f0      	bhi.n	8006678 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	627a      	str	r2, [r7, #36]	@ 0x24
 800669c:	6a3a      	ldr	r2, [r7, #32]
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	61fb      	str	r3, [r7, #28]
 80066aa:	2300      	movs	r3, #0
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	e00b      	b.n	80066c8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	1c59      	adds	r1, r3, #1
 80066b8:	61f9      	str	r1, [r7, #28]
 80066ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	09db      	lsrs	r3, r3, #7
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80066cc:	d8f0      	bhi.n	80066b0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	61fa      	str	r2, [r7, #28]
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80066de:	2215      	movs	r2, #21
 80066e0:	68f9      	ldr	r1, [r7, #12]
 80066e2:	6938      	ldr	r0, [r7, #16]
 80066e4:	f7fe ff1e 	bl	8005524 <_SendPacket>
  RECORD_END();
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f383 8811 	msr	BASEPRI, r3
}
 80066ee:	bf00      	nop
 80066f0:	3748      	adds	r7, #72	@ 0x48
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20014404 	.word	0x20014404
 80066fc:	200143d4 	.word	0x200143d4

08006700 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006704:	4b07      	ldr	r3, [pc, #28]	@ (8006724 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800670c:	4b05      	ldr	r3, [pc, #20]	@ (8006724 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006716:	4b03      	ldr	r3, [pc, #12]	@ (8006724 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	4798      	blx	r3
  }
}
 800671e:	bf00      	nop
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	200143d4 	.word	0x200143d4

08006728 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006730:	f3ef 8311 	mrs	r3, BASEPRI
 8006734:	f04f 0120 	mov.w	r1, #32
 8006738:	f381 8811 	msr	BASEPRI, r1
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	480b      	ldr	r0, [pc, #44]	@ (800676c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006740:	f7fe fe01 	bl	8005346 <_PreparePacket>
 8006744:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006746:	2280      	movs	r2, #128	@ 0x80
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	6938      	ldr	r0, [r7, #16]
 800674c:	f7fe fdae 	bl	80052ac <_EncodeStr>
 8006750:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006752:	220e      	movs	r2, #14
 8006754:	68f9      	ldr	r1, [r7, #12]
 8006756:	6938      	ldr	r0, [r7, #16]
 8006758:	f7fe fee4 	bl	8005524 <_SendPacket>
  RECORD_END();
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f383 8811 	msr	BASEPRI, r3
}
 8006762:	bf00      	nop
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20014404 	.word	0x20014404

08006770 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006776:	4b15      	ldr	r3, [pc, #84]	@ (80067cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01a      	beq.n	80067b4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800677e:	4b13      	ldr	r3, [pc, #76]	@ (80067cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d015      	beq.n	80067b4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006788:	4b10      	ldr	r3, [pc, #64]	@ (80067cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4798      	blx	r3
 8006790:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006794:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	000a      	movs	r2, r1
 80067a4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80067a6:	4613      	mov	r3, r2
 80067a8:	461a      	mov	r2, r3
 80067aa:	4621      	mov	r1, r4
 80067ac:	200d      	movs	r0, #13
 80067ae:	f7ff fbe7 	bl	8005f80 <SEGGER_SYSVIEW_RecordU32x2>
 80067b2:	e006      	b.n	80067c2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80067b4:	4b06      	ldr	r3, [pc, #24]	@ (80067d0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4619      	mov	r1, r3
 80067ba:	200c      	movs	r0, #12
 80067bc:	f7ff fba4 	bl	8005f08 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd90      	pop	{r4, r7, pc}
 80067ca:	bf00      	nop
 80067cc:	200143d4 	.word	0x200143d4
 80067d0:	e0001004 	.word	0xe0001004

080067d4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067da:	f3ef 8311 	mrs	r3, BASEPRI
 80067de:	f04f 0120 	mov.w	r1, #32
 80067e2:	f381 8811 	msr	BASEPRI, r1
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	4819      	ldr	r0, [pc, #100]	@ (8006850 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80067ea:	f7fe fdac 	bl	8005346 <_PreparePacket>
 80067ee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80067f4:	4b17      	ldr	r3, [pc, #92]	@ (8006854 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	e00b      	b.n	8006820 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	b2da      	uxtb	r2, r3
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	1c59      	adds	r1, r3, #1
 8006810:	6179      	str	r1, [r7, #20]
 8006812:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	09db      	lsrs	r3, r3, #7
 800681e:	613b      	str	r3, [r7, #16]
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2b7f      	cmp	r3, #127	@ 0x7f
 8006824:	d8f0      	bhi.n	8006808 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	617a      	str	r2, [r7, #20]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006836:	2202      	movs	r2, #2
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	68b8      	ldr	r0, [r7, #8]
 800683c:	f7fe fe72 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f383 8811 	msr	BASEPRI, r3
}
 8006846:	bf00      	nop
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20014404 	.word	0x20014404
 8006854:	e000ed04 	.word	0xe000ed04

08006858 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800685e:	f3ef 8311 	mrs	r3, BASEPRI
 8006862:	f04f 0120 	mov.w	r1, #32
 8006866:	f381 8811 	msr	BASEPRI, r1
 800686a:	607b      	str	r3, [r7, #4]
 800686c:	4807      	ldr	r0, [pc, #28]	@ (800688c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800686e:	f7fe fd6a 	bl	8005346 <_PreparePacket>
 8006872:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006874:	2203      	movs	r2, #3
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6838      	ldr	r0, [r7, #0]
 800687a:	f7fe fe53 	bl	8005524 <_SendPacket>
  RECORD_END();
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f383 8811 	msr	BASEPRI, r3
}
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20014404 	.word	0x20014404

08006890 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006896:	f3ef 8311 	mrs	r3, BASEPRI
 800689a:	f04f 0120 	mov.w	r1, #32
 800689e:	f381 8811 	msr	BASEPRI, r1
 80068a2:	607b      	str	r3, [r7, #4]
 80068a4:	4807      	ldr	r0, [pc, #28]	@ (80068c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80068a6:	f7fe fd4e 	bl	8005346 <_PreparePacket>
 80068aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80068ac:	2212      	movs	r2, #18
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6838      	ldr	r0, [r7, #0]
 80068b2:	f7fe fe37 	bl	8005524 <_SendPacket>
  RECORD_END();
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f383 8811 	msr	BASEPRI, r3
}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20014404 	.word	0x20014404

080068c8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068ce:	f3ef 8311 	mrs	r3, BASEPRI
 80068d2:	f04f 0120 	mov.w	r1, #32
 80068d6:	f381 8811 	msr	BASEPRI, r1
 80068da:	607b      	str	r3, [r7, #4]
 80068dc:	4807      	ldr	r0, [pc, #28]	@ (80068fc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80068de:	f7fe fd32 	bl	8005346 <_PreparePacket>
 80068e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80068e4:	2211      	movs	r2, #17
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6838      	ldr	r0, [r7, #0]
 80068ea:	f7fe fe1b 	bl	8005524 <_SendPacket>
  RECORD_END();
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f383 8811 	msr	BASEPRI, r3
}
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20014404 	.word	0x20014404

08006900 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006908:	f3ef 8311 	mrs	r3, BASEPRI
 800690c:	f04f 0120 	mov.w	r1, #32
 8006910:	f381 8811 	msr	BASEPRI, r1
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	4819      	ldr	r0, [pc, #100]	@ (800697c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006918:	f7fe fd15 	bl	8005346 <_PreparePacket>
 800691c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006922:	4b17      	ldr	r3, [pc, #92]	@ (8006980 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	61fb      	str	r3, [r7, #28]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	61bb      	str	r3, [r7, #24]
 8006934:	e00b      	b.n	800694e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	b2da      	uxtb	r2, r3
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	1c59      	adds	r1, r3, #1
 800693e:	61f9      	str	r1, [r7, #28]
 8006940:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	701a      	strb	r2, [r3, #0]
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	09db      	lsrs	r3, r3, #7
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2b7f      	cmp	r3, #127	@ 0x7f
 8006952:	d8f0      	bhi.n	8006936 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	61fa      	str	r2, [r7, #28]
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006964:	2208      	movs	r2, #8
 8006966:	68f9      	ldr	r1, [r7, #12]
 8006968:	6938      	ldr	r0, [r7, #16]
 800696a:	f7fe fddb 	bl	8005524 <_SendPacket>
  RECORD_END();
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f383 8811 	msr	BASEPRI, r3
}
 8006974:	bf00      	nop
 8006976:	3720      	adds	r7, #32
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20014404 	.word	0x20014404
 8006980:	200143d4 	.word	0x200143d4

08006984 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800698c:	f3ef 8311 	mrs	r3, BASEPRI
 8006990:	f04f 0120 	mov.w	r1, #32
 8006994:	f381 8811 	msr	BASEPRI, r1
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	4819      	ldr	r0, [pc, #100]	@ (8006a00 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800699c:	f7fe fcd3 	bl	8005346 <_PreparePacket>
 80069a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069a6:	4b17      	ldr	r3, [pc, #92]	@ (8006a04 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	61bb      	str	r3, [r7, #24]
 80069b8:	e00b      	b.n	80069d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	1c59      	adds	r1, r3, #1
 80069c2:	61f9      	str	r1, [r7, #28]
 80069c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	09db      	lsrs	r3, r3, #7
 80069d0:	61bb      	str	r3, [r7, #24]
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80069d6:	d8f0      	bhi.n	80069ba <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	61fa      	str	r2, [r7, #28]
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	701a      	strb	r2, [r3, #0]
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80069e8:	2204      	movs	r2, #4
 80069ea:	68f9      	ldr	r1, [r7, #12]
 80069ec:	6938      	ldr	r0, [r7, #16]
 80069ee:	f7fe fd99 	bl	8005524 <_SendPacket>
  RECORD_END();
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f383 8811 	msr	BASEPRI, r3
}
 80069f8:	bf00      	nop
 80069fa:	3720      	adds	r7, #32
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20014404 	.word	0x20014404
 8006a04:	200143d4 	.word	0x200143d4

08006a08 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a10:	f3ef 8311 	mrs	r3, BASEPRI
 8006a14:	f04f 0120 	mov.w	r1, #32
 8006a18:	f381 8811 	msr	BASEPRI, r1
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	4819      	ldr	r0, [pc, #100]	@ (8006a84 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006a20:	f7fe fc91 	bl	8005346 <_PreparePacket>
 8006a24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a2a:	4b17      	ldr	r3, [pc, #92]	@ (8006a88 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	61fb      	str	r3, [r7, #28]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	e00b      	b.n	8006a56 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	1c59      	adds	r1, r3, #1
 8006a46:	61f9      	str	r1, [r7, #28]
 8006a48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	09db      	lsrs	r3, r3, #7
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a5a:	d8f0      	bhi.n	8006a3e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	61fa      	str	r2, [r7, #28]
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006a6c:	2206      	movs	r2, #6
 8006a6e:	68f9      	ldr	r1, [r7, #12]
 8006a70:	6938      	ldr	r0, [r7, #16]
 8006a72:	f7fe fd57 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f383 8811 	msr	BASEPRI, r3
}
 8006a7c:	bf00      	nop
 8006a7e:	3720      	adds	r7, #32
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20014404 	.word	0x20014404
 8006a88:	200143d4 	.word	0x200143d4

08006a8c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	@ 0x28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a96:	f3ef 8311 	mrs	r3, BASEPRI
 8006a9a:	f04f 0120 	mov.w	r1, #32
 8006a9e:	f381 8811 	msr	BASEPRI, r1
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	4827      	ldr	r0, [pc, #156]	@ (8006b44 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006aa6:	f7fe fc4e 	bl	8005346 <_PreparePacket>
 8006aaa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ab0:	4b25      	ldr	r3, [pc, #148]	@ (8006b48 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	623b      	str	r3, [r7, #32]
 8006ac2:	e00b      	b.n	8006adc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	1c59      	adds	r1, r3, #1
 8006acc:	6279      	str	r1, [r7, #36]	@ 0x24
 8006ace:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	09db      	lsrs	r3, r3, #7
 8006ada:	623b      	str	r3, [r7, #32]
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ae0:	d8f0      	bhi.n	8006ac4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ae8:	6a3a      	ldr	r2, [r7, #32]
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	61fb      	str	r3, [r7, #28]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	e00b      	b.n	8006b14 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	1c59      	adds	r1, r3, #1
 8006b04:	61f9      	str	r1, [r7, #28]
 8006b06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	09db      	lsrs	r3, r3, #7
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b18:	d8f0      	bhi.n	8006afc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	61fa      	str	r2, [r7, #28]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006b2a:	2207      	movs	r2, #7
 8006b2c:	68f9      	ldr	r1, [r7, #12]
 8006b2e:	6938      	ldr	r0, [r7, #16]
 8006b30:	f7fe fcf8 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f383 8811 	msr	BASEPRI, r3
}
 8006b3a:	bf00      	nop
 8006b3c:	3728      	adds	r7, #40	@ 0x28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20014404 	.word	0x20014404
 8006b48:	200143d4 	.word	0x200143d4

08006b4c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006b54:	4b04      	ldr	r3, [pc, #16]	@ (8006b68 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	1ad3      	subs	r3, r2, r3
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	200143d4 	.word	0x200143d4

08006b6c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08c      	sub	sp, #48	@ 0x30
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006b76:	4b3b      	ldr	r3, [pc, #236]	@ (8006c64 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d06d      	beq.n	8006c5a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006b7e:	4b39      	ldr	r3, [pc, #228]	@ (8006c64 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006b84:	2300      	movs	r3, #0
 8006b86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b88:	e008      	b.n	8006b9c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b98:	3301      	adds	r3, #1
 8006b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d3f2      	bcc.n	8006b8a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006ba4:	e000      	b.n	8006ba8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006ba6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d055      	beq.n	8006c5a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bae:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb2:	f04f 0120 	mov.w	r1, #32
 8006bb6:	f381 8811 	msr	BASEPRI, r1
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	482a      	ldr	r0, [pc, #168]	@ (8006c68 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006bbe:	f7fe fbc2 	bl	8005346 <_PreparePacket>
 8006bc2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	623b      	str	r3, [r7, #32]
 8006bd0:	e00b      	b.n	8006bea <SEGGER_SYSVIEW_SendModule+0x7e>
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	1c59      	adds	r1, r3, #1
 8006bda:	6279      	str	r1, [r7, #36]	@ 0x24
 8006bdc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	09db      	lsrs	r3, r3, #7
 8006be8:	623b      	str	r3, [r7, #32]
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bee:	d8f0      	bhi.n	8006bd2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006bf6:	6a3a      	ldr	r2, [r7, #32]
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	61fb      	str	r3, [r7, #28]
 8006c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	e00b      	b.n	8006c24 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	1c59      	adds	r1, r3, #1
 8006c14:	61f9      	str	r1, [r7, #28]
 8006c16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	09db      	lsrs	r3, r3, #7
 8006c22:	61bb      	str	r3, [r7, #24]
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c28:	d8f0      	bhi.n	8006c0c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	61fa      	str	r2, [r7, #28]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2280      	movs	r2, #128	@ 0x80
 8006c40:	4619      	mov	r1, r3
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7fe fb32 	bl	80052ac <_EncodeStr>
 8006c48:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006c4a:	2216      	movs	r2, #22
 8006c4c:	68f9      	ldr	r1, [r7, #12]
 8006c4e:	6938      	ldr	r0, [r7, #16]
 8006c50:	f7fe fc68 	bl	8005524 <_SendPacket>
      RECORD_END();
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006c5a:	bf00      	nop
 8006c5c:	3730      	adds	r7, #48	@ 0x30
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	200143fc 	.word	0x200143fc
 8006c68:	20014404 	.word	0x20014404

08006c6c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006c72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00f      	beq.n	8006c9a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1f2      	bne.n	8006c80 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006c9a:	bf00      	nop
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	200143fc 	.word	0x200143fc

08006ca8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006cae:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb2:	f04f 0120 	mov.w	r1, #32
 8006cb6:	f381 8811 	msr	BASEPRI, r1
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	4817      	ldr	r0, [pc, #92]	@ (8006d1c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006cbe:	f7fe fb42 	bl	8005346 <_PreparePacket>
 8006cc2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	4b14      	ldr	r3, [pc, #80]	@ (8006d20 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	e00b      	b.n	8006cec <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	1c59      	adds	r1, r3, #1
 8006cdc:	6179      	str	r1, [r7, #20]
 8006cde:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	09db      	lsrs	r3, r3, #7
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cf0:	d8f0      	bhi.n	8006cd4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	617a      	str	r2, [r7, #20]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d02:	221b      	movs	r2, #27
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	68b8      	ldr	r0, [r7, #8]
 8006d08:	f7fe fc0c 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f383 8811 	msr	BASEPRI, r3
}
 8006d12:	bf00      	nop
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20014404 	.word	0x20014404
 8006d20:	20014400 	.word	0x20014400

08006d24 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006d24:	b40f      	push	{r0, r1, r2, r3}
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006d2c:	f107 0314 	add.w	r3, r7, #20
 8006d30:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006d32:	1d3b      	adds	r3, r7, #4
 8006d34:	461a      	mov	r2, r3
 8006d36:	2100      	movs	r1, #0
 8006d38:	6938      	ldr	r0, [r7, #16]
 8006d3a:	f7fe fe7b 	bl	8005a34 <_VPrintTarget>
  va_end(ParamList);
}
 8006d3e:	bf00      	nop
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d48:	b004      	add	sp, #16
 8006d4a:	4770      	bx	lr

08006d4c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	@ 0x28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d54:	f3ef 8311 	mrs	r3, BASEPRI
 8006d58:	f04f 0120 	mov.w	r1, #32
 8006d5c:	f381 8811 	msr	BASEPRI, r1
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	4827      	ldr	r0, [pc, #156]	@ (8006e00 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d64:	f7fe faef 	bl	8005346 <_PreparePacket>
 8006d68:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d6a:	2280      	movs	r2, #128	@ 0x80
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	6938      	ldr	r0, [r7, #16]
 8006d70:	f7fe fa9c 	bl	80052ac <_EncodeStr>
 8006d74:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	623b      	str	r3, [r7, #32]
 8006d7e:	e00b      	b.n	8006d98 <SEGGER_SYSVIEW_Warn+0x4c>
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d86:	1c59      	adds	r1, r3, #1
 8006d88:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	09db      	lsrs	r3, r3, #7
 8006d96:	623b      	str	r3, [r7, #32]
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d9c:	d8f0      	bhi.n	8006d80 <SEGGER_SYSVIEW_Warn+0x34>
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006da4:	6a3a      	ldr	r2, [r7, #32]
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	61fb      	str	r3, [r7, #28]
 8006db2:	2300      	movs	r3, #0
 8006db4:	61bb      	str	r3, [r7, #24]
 8006db6:	e00b      	b.n	8006dd0 <SEGGER_SYSVIEW_Warn+0x84>
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	1c59      	adds	r1, r3, #1
 8006dc0:	61f9      	str	r1, [r7, #28]
 8006dc2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	09db      	lsrs	r3, r3, #7
 8006dce:	61bb      	str	r3, [r7, #24]
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dd4:	d8f0      	bhi.n	8006db8 <SEGGER_SYSVIEW_Warn+0x6c>
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	61fa      	str	r2, [r7, #28]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006de6:	221a      	movs	r2, #26
 8006de8:	68f9      	ldr	r1, [r7, #12]
 8006dea:	6938      	ldr	r0, [r7, #16]
 8006dec:	f7fe fb9a 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f383 8811 	msr	BASEPRI, r3
}
 8006df6:	bf00      	nop
 8006df8:	3728      	adds	r7, #40	@ 0x28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20014404 	.word	0x20014404

08006e04 <sniprintf>:
 8006e04:	b40c      	push	{r2, r3}
 8006e06:	b530      	push	{r4, r5, lr}
 8006e08:	4b18      	ldr	r3, [pc, #96]	@ (8006e6c <sniprintf+0x68>)
 8006e0a:	1e0c      	subs	r4, r1, #0
 8006e0c:	681d      	ldr	r5, [r3, #0]
 8006e0e:	b09d      	sub	sp, #116	@ 0x74
 8006e10:	da08      	bge.n	8006e24 <sniprintf+0x20>
 8006e12:	238b      	movs	r3, #139	@ 0x8b
 8006e14:	602b      	str	r3, [r5, #0]
 8006e16:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1a:	b01d      	add	sp, #116	@ 0x74
 8006e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e20:	b002      	add	sp, #8
 8006e22:	4770      	bx	lr
 8006e24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006e28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e2c:	f04f 0300 	mov.w	r3, #0
 8006e30:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006e32:	bf14      	ite	ne
 8006e34:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006e38:	4623      	moveq	r3, r4
 8006e3a:	9304      	str	r3, [sp, #16]
 8006e3c:	9307      	str	r3, [sp, #28]
 8006e3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e42:	9002      	str	r0, [sp, #8]
 8006e44:	9006      	str	r0, [sp, #24]
 8006e46:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e4a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e4c:	ab21      	add	r3, sp, #132	@ 0x84
 8006e4e:	a902      	add	r1, sp, #8
 8006e50:	4628      	mov	r0, r5
 8006e52:	9301      	str	r3, [sp, #4]
 8006e54:	f000 f9ac 	bl	80071b0 <_svfiprintf_r>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	bfbc      	itt	lt
 8006e5c:	238b      	movlt	r3, #139	@ 0x8b
 8006e5e:	602b      	strlt	r3, [r5, #0]
 8006e60:	2c00      	cmp	r4, #0
 8006e62:	d0da      	beq.n	8006e1a <sniprintf+0x16>
 8006e64:	9b02      	ldr	r3, [sp, #8]
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	e7d6      	b.n	8006e1a <sniprintf+0x16>
 8006e6c:	20000010 	.word	0x20000010

08006e70 <memcmp>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	3901      	subs	r1, #1
 8006e74:	4402      	add	r2, r0
 8006e76:	4290      	cmp	r0, r2
 8006e78:	d101      	bne.n	8006e7e <memcmp+0xe>
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	e005      	b.n	8006e8a <memcmp+0x1a>
 8006e7e:	7803      	ldrb	r3, [r0, #0]
 8006e80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	d001      	beq.n	8006e8c <memcmp+0x1c>
 8006e88:	1b18      	subs	r0, r3, r4
 8006e8a:	bd10      	pop	{r4, pc}
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	e7f2      	b.n	8006e76 <memcmp+0x6>

08006e90 <memset>:
 8006e90:	4402      	add	r2, r0
 8006e92:	4603      	mov	r3, r0
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d100      	bne.n	8006e9a <memset+0xa>
 8006e98:	4770      	bx	lr
 8006e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9e:	e7f9      	b.n	8006e94 <memset+0x4>

08006ea0 <__libc_init_array>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8006ed8 <__libc_init_array+0x38>)
 8006ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8006edc <__libc_init_array+0x3c>)
 8006ea6:	1b64      	subs	r4, r4, r5
 8006ea8:	10a4      	asrs	r4, r4, #2
 8006eaa:	2600      	movs	r6, #0
 8006eac:	42a6      	cmp	r6, r4
 8006eae:	d109      	bne.n	8006ec4 <__libc_init_array+0x24>
 8006eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8006ee0 <__libc_init_array+0x40>)
 8006eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ee4 <__libc_init_array+0x44>)
 8006eb4:	f000 fc72 	bl	800779c <_init>
 8006eb8:	1b64      	subs	r4, r4, r5
 8006eba:	10a4      	asrs	r4, r4, #2
 8006ebc:	2600      	movs	r6, #0
 8006ebe:	42a6      	cmp	r6, r4
 8006ec0:	d105      	bne.n	8006ece <__libc_init_array+0x2e>
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec8:	4798      	blx	r3
 8006eca:	3601      	adds	r6, #1
 8006ecc:	e7ee      	b.n	8006eac <__libc_init_array+0xc>
 8006ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed2:	4798      	blx	r3
 8006ed4:	3601      	adds	r6, #1
 8006ed6:	e7f2      	b.n	8006ebe <__libc_init_array+0x1e>
 8006ed8:	08007964 	.word	0x08007964
 8006edc:	08007964 	.word	0x08007964
 8006ee0:	08007964 	.word	0x08007964
 8006ee4:	08007968 	.word	0x08007968

08006ee8 <__retarget_lock_acquire_recursive>:
 8006ee8:	4770      	bx	lr

08006eea <__retarget_lock_release_recursive>:
 8006eea:	4770      	bx	lr

08006eec <memcpy>:
 8006eec:	440a      	add	r2, r1
 8006eee:	4291      	cmp	r1, r2
 8006ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ef4:	d100      	bne.n	8006ef8 <memcpy+0xc>
 8006ef6:	4770      	bx	lr
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f02:	4291      	cmp	r1, r2
 8006f04:	d1f9      	bne.n	8006efa <memcpy+0xe>
 8006f06:	bd10      	pop	{r4, pc}

08006f08 <_free_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	2900      	cmp	r1, #0
 8006f0e:	d041      	beq.n	8006f94 <_free_r+0x8c>
 8006f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f14:	1f0c      	subs	r4, r1, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bfb8      	it	lt
 8006f1a:	18e4      	addlt	r4, r4, r3
 8006f1c:	f000 f8e0 	bl	80070e0 <__malloc_lock>
 8006f20:	4a1d      	ldr	r2, [pc, #116]	@ (8006f98 <_free_r+0x90>)
 8006f22:	6813      	ldr	r3, [r2, #0]
 8006f24:	b933      	cbnz	r3, 8006f34 <_free_r+0x2c>
 8006f26:	6063      	str	r3, [r4, #4]
 8006f28:	6014      	str	r4, [r2, #0]
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f30:	f000 b8dc 	b.w	80070ec <__malloc_unlock>
 8006f34:	42a3      	cmp	r3, r4
 8006f36:	d908      	bls.n	8006f4a <_free_r+0x42>
 8006f38:	6820      	ldr	r0, [r4, #0]
 8006f3a:	1821      	adds	r1, r4, r0
 8006f3c:	428b      	cmp	r3, r1
 8006f3e:	bf01      	itttt	eq
 8006f40:	6819      	ldreq	r1, [r3, #0]
 8006f42:	685b      	ldreq	r3, [r3, #4]
 8006f44:	1809      	addeq	r1, r1, r0
 8006f46:	6021      	streq	r1, [r4, #0]
 8006f48:	e7ed      	b.n	8006f26 <_free_r+0x1e>
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	b10b      	cbz	r3, 8006f54 <_free_r+0x4c>
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	d9fa      	bls.n	8006f4a <_free_r+0x42>
 8006f54:	6811      	ldr	r1, [r2, #0]
 8006f56:	1850      	adds	r0, r2, r1
 8006f58:	42a0      	cmp	r0, r4
 8006f5a:	d10b      	bne.n	8006f74 <_free_r+0x6c>
 8006f5c:	6820      	ldr	r0, [r4, #0]
 8006f5e:	4401      	add	r1, r0
 8006f60:	1850      	adds	r0, r2, r1
 8006f62:	4283      	cmp	r3, r0
 8006f64:	6011      	str	r1, [r2, #0]
 8006f66:	d1e0      	bne.n	8006f2a <_free_r+0x22>
 8006f68:	6818      	ldr	r0, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	6053      	str	r3, [r2, #4]
 8006f6e:	4408      	add	r0, r1
 8006f70:	6010      	str	r0, [r2, #0]
 8006f72:	e7da      	b.n	8006f2a <_free_r+0x22>
 8006f74:	d902      	bls.n	8006f7c <_free_r+0x74>
 8006f76:	230c      	movs	r3, #12
 8006f78:	602b      	str	r3, [r5, #0]
 8006f7a:	e7d6      	b.n	8006f2a <_free_r+0x22>
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	1821      	adds	r1, r4, r0
 8006f80:	428b      	cmp	r3, r1
 8006f82:	bf04      	itt	eq
 8006f84:	6819      	ldreq	r1, [r3, #0]
 8006f86:	685b      	ldreq	r3, [r3, #4]
 8006f88:	6063      	str	r3, [r4, #4]
 8006f8a:	bf04      	itt	eq
 8006f8c:	1809      	addeq	r1, r1, r0
 8006f8e:	6021      	streq	r1, [r4, #0]
 8006f90:	6054      	str	r4, [r2, #4]
 8006f92:	e7ca      	b.n	8006f2a <_free_r+0x22>
 8006f94:	bd38      	pop	{r3, r4, r5, pc}
 8006f96:	bf00      	nop
 8006f98:	2001462c 	.word	0x2001462c

08006f9c <sbrk_aligned>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	4e0f      	ldr	r6, [pc, #60]	@ (8006fdc <sbrk_aligned+0x40>)
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	6831      	ldr	r1, [r6, #0]
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	b911      	cbnz	r1, 8006fae <sbrk_aligned+0x12>
 8006fa8:	f000 fba4 	bl	80076f4 <_sbrk_r>
 8006fac:	6030      	str	r0, [r6, #0]
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f000 fb9f 	bl	80076f4 <_sbrk_r>
 8006fb6:	1c43      	adds	r3, r0, #1
 8006fb8:	d103      	bne.n	8006fc2 <sbrk_aligned+0x26>
 8006fba:	f04f 34ff 	mov.w	r4, #4294967295
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	bd70      	pop	{r4, r5, r6, pc}
 8006fc2:	1cc4      	adds	r4, r0, #3
 8006fc4:	f024 0403 	bic.w	r4, r4, #3
 8006fc8:	42a0      	cmp	r0, r4
 8006fca:	d0f8      	beq.n	8006fbe <sbrk_aligned+0x22>
 8006fcc:	1a21      	subs	r1, r4, r0
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f000 fb90 	bl	80076f4 <_sbrk_r>
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d1f2      	bne.n	8006fbe <sbrk_aligned+0x22>
 8006fd8:	e7ef      	b.n	8006fba <sbrk_aligned+0x1e>
 8006fda:	bf00      	nop
 8006fdc:	20014628 	.word	0x20014628

08006fe0 <_malloc_r>:
 8006fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe4:	1ccd      	adds	r5, r1, #3
 8006fe6:	f025 0503 	bic.w	r5, r5, #3
 8006fea:	3508      	adds	r5, #8
 8006fec:	2d0c      	cmp	r5, #12
 8006fee:	bf38      	it	cc
 8006ff0:	250c      	movcc	r5, #12
 8006ff2:	2d00      	cmp	r5, #0
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	db01      	blt.n	8006ffc <_malloc_r+0x1c>
 8006ff8:	42a9      	cmp	r1, r5
 8006ffa:	d904      	bls.n	8007006 <_malloc_r+0x26>
 8006ffc:	230c      	movs	r3, #12
 8006ffe:	6033      	str	r3, [r6, #0]
 8007000:	2000      	movs	r0, #0
 8007002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007006:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070dc <_malloc_r+0xfc>
 800700a:	f000 f869 	bl	80070e0 <__malloc_lock>
 800700e:	f8d8 3000 	ldr.w	r3, [r8]
 8007012:	461c      	mov	r4, r3
 8007014:	bb44      	cbnz	r4, 8007068 <_malloc_r+0x88>
 8007016:	4629      	mov	r1, r5
 8007018:	4630      	mov	r0, r6
 800701a:	f7ff ffbf 	bl	8006f9c <sbrk_aligned>
 800701e:	1c43      	adds	r3, r0, #1
 8007020:	4604      	mov	r4, r0
 8007022:	d158      	bne.n	80070d6 <_malloc_r+0xf6>
 8007024:	f8d8 4000 	ldr.w	r4, [r8]
 8007028:	4627      	mov	r7, r4
 800702a:	2f00      	cmp	r7, #0
 800702c:	d143      	bne.n	80070b6 <_malloc_r+0xd6>
 800702e:	2c00      	cmp	r4, #0
 8007030:	d04b      	beq.n	80070ca <_malloc_r+0xea>
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	4639      	mov	r1, r7
 8007036:	4630      	mov	r0, r6
 8007038:	eb04 0903 	add.w	r9, r4, r3
 800703c:	f000 fb5a 	bl	80076f4 <_sbrk_r>
 8007040:	4581      	cmp	r9, r0
 8007042:	d142      	bne.n	80070ca <_malloc_r+0xea>
 8007044:	6821      	ldr	r1, [r4, #0]
 8007046:	1a6d      	subs	r5, r5, r1
 8007048:	4629      	mov	r1, r5
 800704a:	4630      	mov	r0, r6
 800704c:	f7ff ffa6 	bl	8006f9c <sbrk_aligned>
 8007050:	3001      	adds	r0, #1
 8007052:	d03a      	beq.n	80070ca <_malloc_r+0xea>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	442b      	add	r3, r5
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	f8d8 3000 	ldr.w	r3, [r8]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	bb62      	cbnz	r2, 80070bc <_malloc_r+0xdc>
 8007062:	f8c8 7000 	str.w	r7, [r8]
 8007066:	e00f      	b.n	8007088 <_malloc_r+0xa8>
 8007068:	6822      	ldr	r2, [r4, #0]
 800706a:	1b52      	subs	r2, r2, r5
 800706c:	d420      	bmi.n	80070b0 <_malloc_r+0xd0>
 800706e:	2a0b      	cmp	r2, #11
 8007070:	d917      	bls.n	80070a2 <_malloc_r+0xc2>
 8007072:	1961      	adds	r1, r4, r5
 8007074:	42a3      	cmp	r3, r4
 8007076:	6025      	str	r5, [r4, #0]
 8007078:	bf18      	it	ne
 800707a:	6059      	strne	r1, [r3, #4]
 800707c:	6863      	ldr	r3, [r4, #4]
 800707e:	bf08      	it	eq
 8007080:	f8c8 1000 	streq.w	r1, [r8]
 8007084:	5162      	str	r2, [r4, r5]
 8007086:	604b      	str	r3, [r1, #4]
 8007088:	4630      	mov	r0, r6
 800708a:	f000 f82f 	bl	80070ec <__malloc_unlock>
 800708e:	f104 000b 	add.w	r0, r4, #11
 8007092:	1d23      	adds	r3, r4, #4
 8007094:	f020 0007 	bic.w	r0, r0, #7
 8007098:	1ac2      	subs	r2, r0, r3
 800709a:	bf1c      	itt	ne
 800709c:	1a1b      	subne	r3, r3, r0
 800709e:	50a3      	strne	r3, [r4, r2]
 80070a0:	e7af      	b.n	8007002 <_malloc_r+0x22>
 80070a2:	6862      	ldr	r2, [r4, #4]
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	bf0c      	ite	eq
 80070a8:	f8c8 2000 	streq.w	r2, [r8]
 80070ac:	605a      	strne	r2, [r3, #4]
 80070ae:	e7eb      	b.n	8007088 <_malloc_r+0xa8>
 80070b0:	4623      	mov	r3, r4
 80070b2:	6864      	ldr	r4, [r4, #4]
 80070b4:	e7ae      	b.n	8007014 <_malloc_r+0x34>
 80070b6:	463c      	mov	r4, r7
 80070b8:	687f      	ldr	r7, [r7, #4]
 80070ba:	e7b6      	b.n	800702a <_malloc_r+0x4a>
 80070bc:	461a      	mov	r2, r3
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	d1fb      	bne.n	80070bc <_malloc_r+0xdc>
 80070c4:	2300      	movs	r3, #0
 80070c6:	6053      	str	r3, [r2, #4]
 80070c8:	e7de      	b.n	8007088 <_malloc_r+0xa8>
 80070ca:	230c      	movs	r3, #12
 80070cc:	6033      	str	r3, [r6, #0]
 80070ce:	4630      	mov	r0, r6
 80070d0:	f000 f80c 	bl	80070ec <__malloc_unlock>
 80070d4:	e794      	b.n	8007000 <_malloc_r+0x20>
 80070d6:	6005      	str	r5, [r0, #0]
 80070d8:	e7d6      	b.n	8007088 <_malloc_r+0xa8>
 80070da:	bf00      	nop
 80070dc:	2001462c 	.word	0x2001462c

080070e0 <__malloc_lock>:
 80070e0:	4801      	ldr	r0, [pc, #4]	@ (80070e8 <__malloc_lock+0x8>)
 80070e2:	f7ff bf01 	b.w	8006ee8 <__retarget_lock_acquire_recursive>
 80070e6:	bf00      	nop
 80070e8:	20014624 	.word	0x20014624

080070ec <__malloc_unlock>:
 80070ec:	4801      	ldr	r0, [pc, #4]	@ (80070f4 <__malloc_unlock+0x8>)
 80070ee:	f7ff befc 	b.w	8006eea <__retarget_lock_release_recursive>
 80070f2:	bf00      	nop
 80070f4:	20014624 	.word	0x20014624

080070f8 <__ssputs_r>:
 80070f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070fc:	688e      	ldr	r6, [r1, #8]
 80070fe:	461f      	mov	r7, r3
 8007100:	42be      	cmp	r6, r7
 8007102:	680b      	ldr	r3, [r1, #0]
 8007104:	4682      	mov	sl, r0
 8007106:	460c      	mov	r4, r1
 8007108:	4690      	mov	r8, r2
 800710a:	d82d      	bhi.n	8007168 <__ssputs_r+0x70>
 800710c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007110:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007114:	d026      	beq.n	8007164 <__ssputs_r+0x6c>
 8007116:	6965      	ldr	r5, [r4, #20]
 8007118:	6909      	ldr	r1, [r1, #16]
 800711a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800711e:	eba3 0901 	sub.w	r9, r3, r1
 8007122:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007126:	1c7b      	adds	r3, r7, #1
 8007128:	444b      	add	r3, r9
 800712a:	106d      	asrs	r5, r5, #1
 800712c:	429d      	cmp	r5, r3
 800712e:	bf38      	it	cc
 8007130:	461d      	movcc	r5, r3
 8007132:	0553      	lsls	r3, r2, #21
 8007134:	d527      	bpl.n	8007186 <__ssputs_r+0x8e>
 8007136:	4629      	mov	r1, r5
 8007138:	f7ff ff52 	bl	8006fe0 <_malloc_r>
 800713c:	4606      	mov	r6, r0
 800713e:	b360      	cbz	r0, 800719a <__ssputs_r+0xa2>
 8007140:	6921      	ldr	r1, [r4, #16]
 8007142:	464a      	mov	r2, r9
 8007144:	f7ff fed2 	bl	8006eec <memcpy>
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800714e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007152:	81a3      	strh	r3, [r4, #12]
 8007154:	6126      	str	r6, [r4, #16]
 8007156:	6165      	str	r5, [r4, #20]
 8007158:	444e      	add	r6, r9
 800715a:	eba5 0509 	sub.w	r5, r5, r9
 800715e:	6026      	str	r6, [r4, #0]
 8007160:	60a5      	str	r5, [r4, #8]
 8007162:	463e      	mov	r6, r7
 8007164:	42be      	cmp	r6, r7
 8007166:	d900      	bls.n	800716a <__ssputs_r+0x72>
 8007168:	463e      	mov	r6, r7
 800716a:	6820      	ldr	r0, [r4, #0]
 800716c:	4632      	mov	r2, r6
 800716e:	4641      	mov	r1, r8
 8007170:	f000 faa6 	bl	80076c0 <memmove>
 8007174:	68a3      	ldr	r3, [r4, #8]
 8007176:	1b9b      	subs	r3, r3, r6
 8007178:	60a3      	str	r3, [r4, #8]
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	4433      	add	r3, r6
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	2000      	movs	r0, #0
 8007182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007186:	462a      	mov	r2, r5
 8007188:	f000 fac4 	bl	8007714 <_realloc_r>
 800718c:	4606      	mov	r6, r0
 800718e:	2800      	cmp	r0, #0
 8007190:	d1e0      	bne.n	8007154 <__ssputs_r+0x5c>
 8007192:	6921      	ldr	r1, [r4, #16]
 8007194:	4650      	mov	r0, sl
 8007196:	f7ff feb7 	bl	8006f08 <_free_r>
 800719a:	230c      	movs	r3, #12
 800719c:	f8ca 3000 	str.w	r3, [sl]
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071a6:	81a3      	strh	r3, [r4, #12]
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ac:	e7e9      	b.n	8007182 <__ssputs_r+0x8a>
	...

080071b0 <_svfiprintf_r>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	4698      	mov	r8, r3
 80071b6:	898b      	ldrh	r3, [r1, #12]
 80071b8:	061b      	lsls	r3, r3, #24
 80071ba:	b09d      	sub	sp, #116	@ 0x74
 80071bc:	4607      	mov	r7, r0
 80071be:	460d      	mov	r5, r1
 80071c0:	4614      	mov	r4, r2
 80071c2:	d510      	bpl.n	80071e6 <_svfiprintf_r+0x36>
 80071c4:	690b      	ldr	r3, [r1, #16]
 80071c6:	b973      	cbnz	r3, 80071e6 <_svfiprintf_r+0x36>
 80071c8:	2140      	movs	r1, #64	@ 0x40
 80071ca:	f7ff ff09 	bl	8006fe0 <_malloc_r>
 80071ce:	6028      	str	r0, [r5, #0]
 80071d0:	6128      	str	r0, [r5, #16]
 80071d2:	b930      	cbnz	r0, 80071e2 <_svfiprintf_r+0x32>
 80071d4:	230c      	movs	r3, #12
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	b01d      	add	sp, #116	@ 0x74
 80071de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e2:	2340      	movs	r3, #64	@ 0x40
 80071e4:	616b      	str	r3, [r5, #20]
 80071e6:	2300      	movs	r3, #0
 80071e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ea:	2320      	movs	r3, #32
 80071ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80071f4:	2330      	movs	r3, #48	@ 0x30
 80071f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007394 <_svfiprintf_r+0x1e4>
 80071fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071fe:	f04f 0901 	mov.w	r9, #1
 8007202:	4623      	mov	r3, r4
 8007204:	469a      	mov	sl, r3
 8007206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800720a:	b10a      	cbz	r2, 8007210 <_svfiprintf_r+0x60>
 800720c:	2a25      	cmp	r2, #37	@ 0x25
 800720e:	d1f9      	bne.n	8007204 <_svfiprintf_r+0x54>
 8007210:	ebba 0b04 	subs.w	fp, sl, r4
 8007214:	d00b      	beq.n	800722e <_svfiprintf_r+0x7e>
 8007216:	465b      	mov	r3, fp
 8007218:	4622      	mov	r2, r4
 800721a:	4629      	mov	r1, r5
 800721c:	4638      	mov	r0, r7
 800721e:	f7ff ff6b 	bl	80070f8 <__ssputs_r>
 8007222:	3001      	adds	r0, #1
 8007224:	f000 80a7 	beq.w	8007376 <_svfiprintf_r+0x1c6>
 8007228:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800722a:	445a      	add	r2, fp
 800722c:	9209      	str	r2, [sp, #36]	@ 0x24
 800722e:	f89a 3000 	ldrb.w	r3, [sl]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 809f 	beq.w	8007376 <_svfiprintf_r+0x1c6>
 8007238:	2300      	movs	r3, #0
 800723a:	f04f 32ff 	mov.w	r2, #4294967295
 800723e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007242:	f10a 0a01 	add.w	sl, sl, #1
 8007246:	9304      	str	r3, [sp, #16]
 8007248:	9307      	str	r3, [sp, #28]
 800724a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800724e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007250:	4654      	mov	r4, sl
 8007252:	2205      	movs	r2, #5
 8007254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007258:	484e      	ldr	r0, [pc, #312]	@ (8007394 <_svfiprintf_r+0x1e4>)
 800725a:	f7f9 f829 	bl	80002b0 <memchr>
 800725e:	9a04      	ldr	r2, [sp, #16]
 8007260:	b9d8      	cbnz	r0, 800729a <_svfiprintf_r+0xea>
 8007262:	06d0      	lsls	r0, r2, #27
 8007264:	bf44      	itt	mi
 8007266:	2320      	movmi	r3, #32
 8007268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800726c:	0711      	lsls	r1, r2, #28
 800726e:	bf44      	itt	mi
 8007270:	232b      	movmi	r3, #43	@ 0x2b
 8007272:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007276:	f89a 3000 	ldrb.w	r3, [sl]
 800727a:	2b2a      	cmp	r3, #42	@ 0x2a
 800727c:	d015      	beq.n	80072aa <_svfiprintf_r+0xfa>
 800727e:	9a07      	ldr	r2, [sp, #28]
 8007280:	4654      	mov	r4, sl
 8007282:	2000      	movs	r0, #0
 8007284:	f04f 0c0a 	mov.w	ip, #10
 8007288:	4621      	mov	r1, r4
 800728a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800728e:	3b30      	subs	r3, #48	@ 0x30
 8007290:	2b09      	cmp	r3, #9
 8007292:	d94b      	bls.n	800732c <_svfiprintf_r+0x17c>
 8007294:	b1b0      	cbz	r0, 80072c4 <_svfiprintf_r+0x114>
 8007296:	9207      	str	r2, [sp, #28]
 8007298:	e014      	b.n	80072c4 <_svfiprintf_r+0x114>
 800729a:	eba0 0308 	sub.w	r3, r0, r8
 800729e:	fa09 f303 	lsl.w	r3, r9, r3
 80072a2:	4313      	orrs	r3, r2
 80072a4:	9304      	str	r3, [sp, #16]
 80072a6:	46a2      	mov	sl, r4
 80072a8:	e7d2      	b.n	8007250 <_svfiprintf_r+0xa0>
 80072aa:	9b03      	ldr	r3, [sp, #12]
 80072ac:	1d19      	adds	r1, r3, #4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	9103      	str	r1, [sp, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	bfbb      	ittet	lt
 80072b6:	425b      	neglt	r3, r3
 80072b8:	f042 0202 	orrlt.w	r2, r2, #2
 80072bc:	9307      	strge	r3, [sp, #28]
 80072be:	9307      	strlt	r3, [sp, #28]
 80072c0:	bfb8      	it	lt
 80072c2:	9204      	strlt	r2, [sp, #16]
 80072c4:	7823      	ldrb	r3, [r4, #0]
 80072c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80072c8:	d10a      	bne.n	80072e0 <_svfiprintf_r+0x130>
 80072ca:	7863      	ldrb	r3, [r4, #1]
 80072cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80072ce:	d132      	bne.n	8007336 <_svfiprintf_r+0x186>
 80072d0:	9b03      	ldr	r3, [sp, #12]
 80072d2:	1d1a      	adds	r2, r3, #4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	9203      	str	r2, [sp, #12]
 80072d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072dc:	3402      	adds	r4, #2
 80072de:	9305      	str	r3, [sp, #20]
 80072e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80073a4 <_svfiprintf_r+0x1f4>
 80072e4:	7821      	ldrb	r1, [r4, #0]
 80072e6:	2203      	movs	r2, #3
 80072e8:	4650      	mov	r0, sl
 80072ea:	f7f8 ffe1 	bl	80002b0 <memchr>
 80072ee:	b138      	cbz	r0, 8007300 <_svfiprintf_r+0x150>
 80072f0:	9b04      	ldr	r3, [sp, #16]
 80072f2:	eba0 000a 	sub.w	r0, r0, sl
 80072f6:	2240      	movs	r2, #64	@ 0x40
 80072f8:	4082      	lsls	r2, r0
 80072fa:	4313      	orrs	r3, r2
 80072fc:	3401      	adds	r4, #1
 80072fe:	9304      	str	r3, [sp, #16]
 8007300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007304:	4824      	ldr	r0, [pc, #144]	@ (8007398 <_svfiprintf_r+0x1e8>)
 8007306:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800730a:	2206      	movs	r2, #6
 800730c:	f7f8 ffd0 	bl	80002b0 <memchr>
 8007310:	2800      	cmp	r0, #0
 8007312:	d036      	beq.n	8007382 <_svfiprintf_r+0x1d2>
 8007314:	4b21      	ldr	r3, [pc, #132]	@ (800739c <_svfiprintf_r+0x1ec>)
 8007316:	bb1b      	cbnz	r3, 8007360 <_svfiprintf_r+0x1b0>
 8007318:	9b03      	ldr	r3, [sp, #12]
 800731a:	3307      	adds	r3, #7
 800731c:	f023 0307 	bic.w	r3, r3, #7
 8007320:	3308      	adds	r3, #8
 8007322:	9303      	str	r3, [sp, #12]
 8007324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007326:	4433      	add	r3, r6
 8007328:	9309      	str	r3, [sp, #36]	@ 0x24
 800732a:	e76a      	b.n	8007202 <_svfiprintf_r+0x52>
 800732c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007330:	460c      	mov	r4, r1
 8007332:	2001      	movs	r0, #1
 8007334:	e7a8      	b.n	8007288 <_svfiprintf_r+0xd8>
 8007336:	2300      	movs	r3, #0
 8007338:	3401      	adds	r4, #1
 800733a:	9305      	str	r3, [sp, #20]
 800733c:	4619      	mov	r1, r3
 800733e:	f04f 0c0a 	mov.w	ip, #10
 8007342:	4620      	mov	r0, r4
 8007344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007348:	3a30      	subs	r2, #48	@ 0x30
 800734a:	2a09      	cmp	r2, #9
 800734c:	d903      	bls.n	8007356 <_svfiprintf_r+0x1a6>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0c6      	beq.n	80072e0 <_svfiprintf_r+0x130>
 8007352:	9105      	str	r1, [sp, #20]
 8007354:	e7c4      	b.n	80072e0 <_svfiprintf_r+0x130>
 8007356:	fb0c 2101 	mla	r1, ip, r1, r2
 800735a:	4604      	mov	r4, r0
 800735c:	2301      	movs	r3, #1
 800735e:	e7f0      	b.n	8007342 <_svfiprintf_r+0x192>
 8007360:	ab03      	add	r3, sp, #12
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	462a      	mov	r2, r5
 8007366:	4b0e      	ldr	r3, [pc, #56]	@ (80073a0 <_svfiprintf_r+0x1f0>)
 8007368:	a904      	add	r1, sp, #16
 800736a:	4638      	mov	r0, r7
 800736c:	f3af 8000 	nop.w
 8007370:	1c42      	adds	r2, r0, #1
 8007372:	4606      	mov	r6, r0
 8007374:	d1d6      	bne.n	8007324 <_svfiprintf_r+0x174>
 8007376:	89ab      	ldrh	r3, [r5, #12]
 8007378:	065b      	lsls	r3, r3, #25
 800737a:	f53f af2d 	bmi.w	80071d8 <_svfiprintf_r+0x28>
 800737e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007380:	e72c      	b.n	80071dc <_svfiprintf_r+0x2c>
 8007382:	ab03      	add	r3, sp, #12
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	462a      	mov	r2, r5
 8007388:	4b05      	ldr	r3, [pc, #20]	@ (80073a0 <_svfiprintf_r+0x1f0>)
 800738a:	a904      	add	r1, sp, #16
 800738c:	4638      	mov	r0, r7
 800738e:	f000 f879 	bl	8007484 <_printf_i>
 8007392:	e7ed      	b.n	8007370 <_svfiprintf_r+0x1c0>
 8007394:	08007928 	.word	0x08007928
 8007398:	08007932 	.word	0x08007932
 800739c:	00000000 	.word	0x00000000
 80073a0:	080070f9 	.word	0x080070f9
 80073a4:	0800792e 	.word	0x0800792e

080073a8 <_printf_common>:
 80073a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	4616      	mov	r6, r2
 80073ae:	4698      	mov	r8, r3
 80073b0:	688a      	ldr	r2, [r1, #8]
 80073b2:	690b      	ldr	r3, [r1, #16]
 80073b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073b8:	4293      	cmp	r3, r2
 80073ba:	bfb8      	it	lt
 80073bc:	4613      	movlt	r3, r2
 80073be:	6033      	str	r3, [r6, #0]
 80073c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073c4:	4607      	mov	r7, r0
 80073c6:	460c      	mov	r4, r1
 80073c8:	b10a      	cbz	r2, 80073ce <_printf_common+0x26>
 80073ca:	3301      	adds	r3, #1
 80073cc:	6033      	str	r3, [r6, #0]
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	0699      	lsls	r1, r3, #26
 80073d2:	bf42      	ittt	mi
 80073d4:	6833      	ldrmi	r3, [r6, #0]
 80073d6:	3302      	addmi	r3, #2
 80073d8:	6033      	strmi	r3, [r6, #0]
 80073da:	6825      	ldr	r5, [r4, #0]
 80073dc:	f015 0506 	ands.w	r5, r5, #6
 80073e0:	d106      	bne.n	80073f0 <_printf_common+0x48>
 80073e2:	f104 0a19 	add.w	sl, r4, #25
 80073e6:	68e3      	ldr	r3, [r4, #12]
 80073e8:	6832      	ldr	r2, [r6, #0]
 80073ea:	1a9b      	subs	r3, r3, r2
 80073ec:	42ab      	cmp	r3, r5
 80073ee:	dc26      	bgt.n	800743e <_printf_common+0x96>
 80073f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073f4:	6822      	ldr	r2, [r4, #0]
 80073f6:	3b00      	subs	r3, #0
 80073f8:	bf18      	it	ne
 80073fa:	2301      	movne	r3, #1
 80073fc:	0692      	lsls	r2, r2, #26
 80073fe:	d42b      	bmi.n	8007458 <_printf_common+0xb0>
 8007400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007404:	4641      	mov	r1, r8
 8007406:	4638      	mov	r0, r7
 8007408:	47c8      	blx	r9
 800740a:	3001      	adds	r0, #1
 800740c:	d01e      	beq.n	800744c <_printf_common+0xa4>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	6922      	ldr	r2, [r4, #16]
 8007412:	f003 0306 	and.w	r3, r3, #6
 8007416:	2b04      	cmp	r3, #4
 8007418:	bf02      	ittt	eq
 800741a:	68e5      	ldreq	r5, [r4, #12]
 800741c:	6833      	ldreq	r3, [r6, #0]
 800741e:	1aed      	subeq	r5, r5, r3
 8007420:	68a3      	ldr	r3, [r4, #8]
 8007422:	bf0c      	ite	eq
 8007424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007428:	2500      	movne	r5, #0
 800742a:	4293      	cmp	r3, r2
 800742c:	bfc4      	itt	gt
 800742e:	1a9b      	subgt	r3, r3, r2
 8007430:	18ed      	addgt	r5, r5, r3
 8007432:	2600      	movs	r6, #0
 8007434:	341a      	adds	r4, #26
 8007436:	42b5      	cmp	r5, r6
 8007438:	d11a      	bne.n	8007470 <_printf_common+0xc8>
 800743a:	2000      	movs	r0, #0
 800743c:	e008      	b.n	8007450 <_printf_common+0xa8>
 800743e:	2301      	movs	r3, #1
 8007440:	4652      	mov	r2, sl
 8007442:	4641      	mov	r1, r8
 8007444:	4638      	mov	r0, r7
 8007446:	47c8      	blx	r9
 8007448:	3001      	adds	r0, #1
 800744a:	d103      	bne.n	8007454 <_printf_common+0xac>
 800744c:	f04f 30ff 	mov.w	r0, #4294967295
 8007450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007454:	3501      	adds	r5, #1
 8007456:	e7c6      	b.n	80073e6 <_printf_common+0x3e>
 8007458:	18e1      	adds	r1, r4, r3
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	2030      	movs	r0, #48	@ 0x30
 800745e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007462:	4422      	add	r2, r4
 8007464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800746c:	3302      	adds	r3, #2
 800746e:	e7c7      	b.n	8007400 <_printf_common+0x58>
 8007470:	2301      	movs	r3, #1
 8007472:	4622      	mov	r2, r4
 8007474:	4641      	mov	r1, r8
 8007476:	4638      	mov	r0, r7
 8007478:	47c8      	blx	r9
 800747a:	3001      	adds	r0, #1
 800747c:	d0e6      	beq.n	800744c <_printf_common+0xa4>
 800747e:	3601      	adds	r6, #1
 8007480:	e7d9      	b.n	8007436 <_printf_common+0x8e>
	...

08007484 <_printf_i>:
 8007484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	7e0f      	ldrb	r7, [r1, #24]
 800748a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800748c:	2f78      	cmp	r7, #120	@ 0x78
 800748e:	4691      	mov	r9, r2
 8007490:	4680      	mov	r8, r0
 8007492:	460c      	mov	r4, r1
 8007494:	469a      	mov	sl, r3
 8007496:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800749a:	d807      	bhi.n	80074ac <_printf_i+0x28>
 800749c:	2f62      	cmp	r7, #98	@ 0x62
 800749e:	d80a      	bhi.n	80074b6 <_printf_i+0x32>
 80074a0:	2f00      	cmp	r7, #0
 80074a2:	f000 80d1 	beq.w	8007648 <_printf_i+0x1c4>
 80074a6:	2f58      	cmp	r7, #88	@ 0x58
 80074a8:	f000 80b8 	beq.w	800761c <_printf_i+0x198>
 80074ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074b4:	e03a      	b.n	800752c <_printf_i+0xa8>
 80074b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074ba:	2b15      	cmp	r3, #21
 80074bc:	d8f6      	bhi.n	80074ac <_printf_i+0x28>
 80074be:	a101      	add	r1, pc, #4	@ (adr r1, 80074c4 <_printf_i+0x40>)
 80074c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074c4:	0800751d 	.word	0x0800751d
 80074c8:	08007531 	.word	0x08007531
 80074cc:	080074ad 	.word	0x080074ad
 80074d0:	080074ad 	.word	0x080074ad
 80074d4:	080074ad 	.word	0x080074ad
 80074d8:	080074ad 	.word	0x080074ad
 80074dc:	08007531 	.word	0x08007531
 80074e0:	080074ad 	.word	0x080074ad
 80074e4:	080074ad 	.word	0x080074ad
 80074e8:	080074ad 	.word	0x080074ad
 80074ec:	080074ad 	.word	0x080074ad
 80074f0:	0800762f 	.word	0x0800762f
 80074f4:	0800755b 	.word	0x0800755b
 80074f8:	080075e9 	.word	0x080075e9
 80074fc:	080074ad 	.word	0x080074ad
 8007500:	080074ad 	.word	0x080074ad
 8007504:	08007651 	.word	0x08007651
 8007508:	080074ad 	.word	0x080074ad
 800750c:	0800755b 	.word	0x0800755b
 8007510:	080074ad 	.word	0x080074ad
 8007514:	080074ad 	.word	0x080074ad
 8007518:	080075f1 	.word	0x080075f1
 800751c:	6833      	ldr	r3, [r6, #0]
 800751e:	1d1a      	adds	r2, r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6032      	str	r2, [r6, #0]
 8007524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007528:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800752c:	2301      	movs	r3, #1
 800752e:	e09c      	b.n	800766a <_printf_i+0x1e6>
 8007530:	6833      	ldr	r3, [r6, #0]
 8007532:	6820      	ldr	r0, [r4, #0]
 8007534:	1d19      	adds	r1, r3, #4
 8007536:	6031      	str	r1, [r6, #0]
 8007538:	0606      	lsls	r6, r0, #24
 800753a:	d501      	bpl.n	8007540 <_printf_i+0xbc>
 800753c:	681d      	ldr	r5, [r3, #0]
 800753e:	e003      	b.n	8007548 <_printf_i+0xc4>
 8007540:	0645      	lsls	r5, r0, #25
 8007542:	d5fb      	bpl.n	800753c <_printf_i+0xb8>
 8007544:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007548:	2d00      	cmp	r5, #0
 800754a:	da03      	bge.n	8007554 <_printf_i+0xd0>
 800754c:	232d      	movs	r3, #45	@ 0x2d
 800754e:	426d      	negs	r5, r5
 8007550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007554:	4858      	ldr	r0, [pc, #352]	@ (80076b8 <_printf_i+0x234>)
 8007556:	230a      	movs	r3, #10
 8007558:	e011      	b.n	800757e <_printf_i+0xfa>
 800755a:	6821      	ldr	r1, [r4, #0]
 800755c:	6833      	ldr	r3, [r6, #0]
 800755e:	0608      	lsls	r0, r1, #24
 8007560:	f853 5b04 	ldr.w	r5, [r3], #4
 8007564:	d402      	bmi.n	800756c <_printf_i+0xe8>
 8007566:	0649      	lsls	r1, r1, #25
 8007568:	bf48      	it	mi
 800756a:	b2ad      	uxthmi	r5, r5
 800756c:	2f6f      	cmp	r7, #111	@ 0x6f
 800756e:	4852      	ldr	r0, [pc, #328]	@ (80076b8 <_printf_i+0x234>)
 8007570:	6033      	str	r3, [r6, #0]
 8007572:	bf14      	ite	ne
 8007574:	230a      	movne	r3, #10
 8007576:	2308      	moveq	r3, #8
 8007578:	2100      	movs	r1, #0
 800757a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800757e:	6866      	ldr	r6, [r4, #4]
 8007580:	60a6      	str	r6, [r4, #8]
 8007582:	2e00      	cmp	r6, #0
 8007584:	db05      	blt.n	8007592 <_printf_i+0x10e>
 8007586:	6821      	ldr	r1, [r4, #0]
 8007588:	432e      	orrs	r6, r5
 800758a:	f021 0104 	bic.w	r1, r1, #4
 800758e:	6021      	str	r1, [r4, #0]
 8007590:	d04b      	beq.n	800762a <_printf_i+0x1a6>
 8007592:	4616      	mov	r6, r2
 8007594:	fbb5 f1f3 	udiv	r1, r5, r3
 8007598:	fb03 5711 	mls	r7, r3, r1, r5
 800759c:	5dc7      	ldrb	r7, [r0, r7]
 800759e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075a2:	462f      	mov	r7, r5
 80075a4:	42bb      	cmp	r3, r7
 80075a6:	460d      	mov	r5, r1
 80075a8:	d9f4      	bls.n	8007594 <_printf_i+0x110>
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d10b      	bne.n	80075c6 <_printf_i+0x142>
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	07df      	lsls	r7, r3, #31
 80075b2:	d508      	bpl.n	80075c6 <_printf_i+0x142>
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	6861      	ldr	r1, [r4, #4]
 80075b8:	4299      	cmp	r1, r3
 80075ba:	bfde      	ittt	le
 80075bc:	2330      	movle	r3, #48	@ 0x30
 80075be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075c6:	1b92      	subs	r2, r2, r6
 80075c8:	6122      	str	r2, [r4, #16]
 80075ca:	f8cd a000 	str.w	sl, [sp]
 80075ce:	464b      	mov	r3, r9
 80075d0:	aa03      	add	r2, sp, #12
 80075d2:	4621      	mov	r1, r4
 80075d4:	4640      	mov	r0, r8
 80075d6:	f7ff fee7 	bl	80073a8 <_printf_common>
 80075da:	3001      	adds	r0, #1
 80075dc:	d14a      	bne.n	8007674 <_printf_i+0x1f0>
 80075de:	f04f 30ff 	mov.w	r0, #4294967295
 80075e2:	b004      	add	sp, #16
 80075e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	f043 0320 	orr.w	r3, r3, #32
 80075ee:	6023      	str	r3, [r4, #0]
 80075f0:	4832      	ldr	r0, [pc, #200]	@ (80076bc <_printf_i+0x238>)
 80075f2:	2778      	movs	r7, #120	@ 0x78
 80075f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	6831      	ldr	r1, [r6, #0]
 80075fc:	061f      	lsls	r7, r3, #24
 80075fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8007602:	d402      	bmi.n	800760a <_printf_i+0x186>
 8007604:	065f      	lsls	r7, r3, #25
 8007606:	bf48      	it	mi
 8007608:	b2ad      	uxthmi	r5, r5
 800760a:	6031      	str	r1, [r6, #0]
 800760c:	07d9      	lsls	r1, r3, #31
 800760e:	bf44      	itt	mi
 8007610:	f043 0320 	orrmi.w	r3, r3, #32
 8007614:	6023      	strmi	r3, [r4, #0]
 8007616:	b11d      	cbz	r5, 8007620 <_printf_i+0x19c>
 8007618:	2310      	movs	r3, #16
 800761a:	e7ad      	b.n	8007578 <_printf_i+0xf4>
 800761c:	4826      	ldr	r0, [pc, #152]	@ (80076b8 <_printf_i+0x234>)
 800761e:	e7e9      	b.n	80075f4 <_printf_i+0x170>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	f023 0320 	bic.w	r3, r3, #32
 8007626:	6023      	str	r3, [r4, #0]
 8007628:	e7f6      	b.n	8007618 <_printf_i+0x194>
 800762a:	4616      	mov	r6, r2
 800762c:	e7bd      	b.n	80075aa <_printf_i+0x126>
 800762e:	6833      	ldr	r3, [r6, #0]
 8007630:	6825      	ldr	r5, [r4, #0]
 8007632:	6961      	ldr	r1, [r4, #20]
 8007634:	1d18      	adds	r0, r3, #4
 8007636:	6030      	str	r0, [r6, #0]
 8007638:	062e      	lsls	r6, r5, #24
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	d501      	bpl.n	8007642 <_printf_i+0x1be>
 800763e:	6019      	str	r1, [r3, #0]
 8007640:	e002      	b.n	8007648 <_printf_i+0x1c4>
 8007642:	0668      	lsls	r0, r5, #25
 8007644:	d5fb      	bpl.n	800763e <_printf_i+0x1ba>
 8007646:	8019      	strh	r1, [r3, #0]
 8007648:	2300      	movs	r3, #0
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	4616      	mov	r6, r2
 800764e:	e7bc      	b.n	80075ca <_printf_i+0x146>
 8007650:	6833      	ldr	r3, [r6, #0]
 8007652:	1d1a      	adds	r2, r3, #4
 8007654:	6032      	str	r2, [r6, #0]
 8007656:	681e      	ldr	r6, [r3, #0]
 8007658:	6862      	ldr	r2, [r4, #4]
 800765a:	2100      	movs	r1, #0
 800765c:	4630      	mov	r0, r6
 800765e:	f7f8 fe27 	bl	80002b0 <memchr>
 8007662:	b108      	cbz	r0, 8007668 <_printf_i+0x1e4>
 8007664:	1b80      	subs	r0, r0, r6
 8007666:	6060      	str	r0, [r4, #4]
 8007668:	6863      	ldr	r3, [r4, #4]
 800766a:	6123      	str	r3, [r4, #16]
 800766c:	2300      	movs	r3, #0
 800766e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007672:	e7aa      	b.n	80075ca <_printf_i+0x146>
 8007674:	6923      	ldr	r3, [r4, #16]
 8007676:	4632      	mov	r2, r6
 8007678:	4649      	mov	r1, r9
 800767a:	4640      	mov	r0, r8
 800767c:	47d0      	blx	sl
 800767e:	3001      	adds	r0, #1
 8007680:	d0ad      	beq.n	80075de <_printf_i+0x15a>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	079b      	lsls	r3, r3, #30
 8007686:	d413      	bmi.n	80076b0 <_printf_i+0x22c>
 8007688:	68e0      	ldr	r0, [r4, #12]
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	4298      	cmp	r0, r3
 800768e:	bfb8      	it	lt
 8007690:	4618      	movlt	r0, r3
 8007692:	e7a6      	b.n	80075e2 <_printf_i+0x15e>
 8007694:	2301      	movs	r3, #1
 8007696:	4632      	mov	r2, r6
 8007698:	4649      	mov	r1, r9
 800769a:	4640      	mov	r0, r8
 800769c:	47d0      	blx	sl
 800769e:	3001      	adds	r0, #1
 80076a0:	d09d      	beq.n	80075de <_printf_i+0x15a>
 80076a2:	3501      	adds	r5, #1
 80076a4:	68e3      	ldr	r3, [r4, #12]
 80076a6:	9903      	ldr	r1, [sp, #12]
 80076a8:	1a5b      	subs	r3, r3, r1
 80076aa:	42ab      	cmp	r3, r5
 80076ac:	dcf2      	bgt.n	8007694 <_printf_i+0x210>
 80076ae:	e7eb      	b.n	8007688 <_printf_i+0x204>
 80076b0:	2500      	movs	r5, #0
 80076b2:	f104 0619 	add.w	r6, r4, #25
 80076b6:	e7f5      	b.n	80076a4 <_printf_i+0x220>
 80076b8:	08007939 	.word	0x08007939
 80076bc:	0800794a 	.word	0x0800794a

080076c0 <memmove>:
 80076c0:	4288      	cmp	r0, r1
 80076c2:	b510      	push	{r4, lr}
 80076c4:	eb01 0402 	add.w	r4, r1, r2
 80076c8:	d902      	bls.n	80076d0 <memmove+0x10>
 80076ca:	4284      	cmp	r4, r0
 80076cc:	4623      	mov	r3, r4
 80076ce:	d807      	bhi.n	80076e0 <memmove+0x20>
 80076d0:	1e43      	subs	r3, r0, #1
 80076d2:	42a1      	cmp	r1, r4
 80076d4:	d008      	beq.n	80076e8 <memmove+0x28>
 80076d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076de:	e7f8      	b.n	80076d2 <memmove+0x12>
 80076e0:	4402      	add	r2, r0
 80076e2:	4601      	mov	r1, r0
 80076e4:	428a      	cmp	r2, r1
 80076e6:	d100      	bne.n	80076ea <memmove+0x2a>
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076f2:	e7f7      	b.n	80076e4 <memmove+0x24>

080076f4 <_sbrk_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4d06      	ldr	r5, [pc, #24]	@ (8007710 <_sbrk_r+0x1c>)
 80076f8:	2300      	movs	r3, #0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4608      	mov	r0, r1
 80076fe:	602b      	str	r3, [r5, #0]
 8007700:	f000 f83e 	bl	8007780 <_sbrk>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_sbrk_r+0x1a>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_sbrk_r+0x1a>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	20014620 	.word	0x20014620

08007714 <_realloc_r>:
 8007714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007718:	4607      	mov	r7, r0
 800771a:	4614      	mov	r4, r2
 800771c:	460d      	mov	r5, r1
 800771e:	b921      	cbnz	r1, 800772a <_realloc_r+0x16>
 8007720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007724:	4611      	mov	r1, r2
 8007726:	f7ff bc5b 	b.w	8006fe0 <_malloc_r>
 800772a:	b92a      	cbnz	r2, 8007738 <_realloc_r+0x24>
 800772c:	f7ff fbec 	bl	8006f08 <_free_r>
 8007730:	4625      	mov	r5, r4
 8007732:	4628      	mov	r0, r5
 8007734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007738:	f000 f81a 	bl	8007770 <_malloc_usable_size_r>
 800773c:	4284      	cmp	r4, r0
 800773e:	4606      	mov	r6, r0
 8007740:	d802      	bhi.n	8007748 <_realloc_r+0x34>
 8007742:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007746:	d8f4      	bhi.n	8007732 <_realloc_r+0x1e>
 8007748:	4621      	mov	r1, r4
 800774a:	4638      	mov	r0, r7
 800774c:	f7ff fc48 	bl	8006fe0 <_malloc_r>
 8007750:	4680      	mov	r8, r0
 8007752:	b908      	cbnz	r0, 8007758 <_realloc_r+0x44>
 8007754:	4645      	mov	r5, r8
 8007756:	e7ec      	b.n	8007732 <_realloc_r+0x1e>
 8007758:	42b4      	cmp	r4, r6
 800775a:	4622      	mov	r2, r4
 800775c:	4629      	mov	r1, r5
 800775e:	bf28      	it	cs
 8007760:	4632      	movcs	r2, r6
 8007762:	f7ff fbc3 	bl	8006eec <memcpy>
 8007766:	4629      	mov	r1, r5
 8007768:	4638      	mov	r0, r7
 800776a:	f7ff fbcd 	bl	8006f08 <_free_r>
 800776e:	e7f1      	b.n	8007754 <_realloc_r+0x40>

08007770 <_malloc_usable_size_r>:
 8007770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007774:	1f18      	subs	r0, r3, #4
 8007776:	2b00      	cmp	r3, #0
 8007778:	bfbc      	itt	lt
 800777a:	580b      	ldrlt	r3, [r1, r0]
 800777c:	18c0      	addlt	r0, r0, r3
 800777e:	4770      	bx	lr

08007780 <_sbrk>:
 8007780:	4a04      	ldr	r2, [pc, #16]	@ (8007794 <_sbrk+0x14>)
 8007782:	6811      	ldr	r1, [r2, #0]
 8007784:	4603      	mov	r3, r0
 8007786:	b909      	cbnz	r1, 800778c <_sbrk+0xc>
 8007788:	4903      	ldr	r1, [pc, #12]	@ (8007798 <_sbrk+0x18>)
 800778a:	6011      	str	r1, [r2, #0]
 800778c:	6810      	ldr	r0, [r2, #0]
 800778e:	4403      	add	r3, r0
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	4770      	bx	lr
 8007794:	20014630 	.word	0x20014630
 8007798:	20014638 	.word	0x20014638

0800779c <_init>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	bf00      	nop
 80077a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a2:	bc08      	pop	{r3}
 80077a4:	469e      	mov	lr, r3
 80077a6:	4770      	bx	lr

080077a8 <_fini>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr
