
001_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080070c0  080070c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007220  08007220  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007220  08007220  00008220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007228  08007228  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007228  08007228  00008228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800722c  0800722c  0000822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007230  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145d8  2000006c  0800729c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014644  0800729c  00009644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bf1  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033db  00000000  00000000  0001dc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00021068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f84  00000000  00000000  000224a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025221  00000000  00000000  0002342c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017636  00000000  00000000  0004864d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df1f2  00000000  00000000  0005fc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ee75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a84  00000000  00000000  0013eeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0014493c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080070a8 	.word	0x080070a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080070a8 	.word	0x080070a8

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f20 	.word	0x20012f20

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b988 	b.w	80005cc <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	468e      	mov	lr, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	4688      	mov	r8, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d962      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 f806 	lsl.w	r8, r1, r6
 80002f8:	fa20 f303 	lsr.w	r3, r0, r3
 80002fc:	40b7      	lsls	r7, r6
 80002fe:	ea43 0808 	orr.w	r8, r3, r8
 8000302:	40b4      	lsls	r4, r6
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000310:	0c23      	lsrs	r3, r4, #16
 8000312:	fb0e 8811 	mls	r8, lr, r1, r8
 8000316:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800031a:	fb01 f20c 	mul.w	r2, r1, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x62>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295
 8000328:	f080 80ea 	bcs.w	8000500 <__udivmoddi4+0x22c>
 800032c:	429a      	cmp	r2, r3
 800032e:	f240 80e7 	bls.w	8000500 <__udivmoddi4+0x22c>
 8000332:	3902      	subs	r1, #2
 8000334:	443b      	add	r3, r7
 8000336:	1a9a      	subs	r2, r3, r2
 8000338:	b2a3      	uxth	r3, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb00 fc0c 	mul.w	ip, r0, ip
 800034a:	459c      	cmp	ip, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	f080 80d6 	bcs.w	8000504 <__udivmoddi4+0x230>
 8000358:	459c      	cmp	ip, r3
 800035a:	f240 80d3 	bls.w	8000504 <__udivmoddi4+0x230>
 800035e:	443b      	add	r3, r7
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba3 030c 	sub.w	r3, r3, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f3      	lsrs	r3, r6
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x14c>
 8000392:	4573      	cmp	r3, lr
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xc8>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 8105 	bhi.w	80005a6 <__udivmoddi4+0x2d2>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb6e 0203 	sbc.w	r2, lr, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	4690      	mov	r8, r2
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0e5      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	e9c5 4800 	strd	r4, r8, [r5]
 80003ae:	e7e2      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f000 8090 	beq.w	80004d6 <__udivmoddi4+0x202>
 80003b6:	fab2 f682 	clz	r6, r2
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f040 80a4 	bne.w	8000508 <__udivmoddi4+0x234>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	0c03      	lsrs	r3, r0, #16
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	b280      	uxth	r0, r0
 80003ca:	b2bc      	uxth	r4, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb2 fcfe 	udiv	ip, r2, lr
 80003d2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003da:	fb04 f20c 	mul.w	r2, r4, ip
 80003de:	429a      	cmp	r2, r3
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x11e>
 80003e2:	18fb      	adds	r3, r7, r3
 80003e4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x11c>
 80003ea:	429a      	cmp	r2, r3
 80003ec:	f200 80e0 	bhi.w	80005b0 <__udivmoddi4+0x2dc>
 80003f0:	46c4      	mov	ip, r8
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003fc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000400:	fb02 f404 	mul.w	r4, r2, r4
 8000404:	429c      	cmp	r4, r3
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x144>
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	f102 30ff 	add.w	r0, r2, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x142>
 8000410:	429c      	cmp	r4, r3
 8000412:	f200 80ca 	bhi.w	80005aa <__udivmoddi4+0x2d6>
 8000416:	4602      	mov	r2, r0
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa0e f401 	lsl.w	r4, lr, r1
 8000430:	fa20 f306 	lsr.w	r3, r0, r6
 8000434:	fa2e fe06 	lsr.w	lr, lr, r6
 8000438:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800043c:	4323      	orrs	r3, r4
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	fa1f fc87 	uxth.w	ip, r7
 8000446:	fbbe f0f9 	udiv	r0, lr, r9
 800044a:	0c1c      	lsrs	r4, r3, #16
 800044c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000450:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000454:	fb00 fe0c 	mul.w	lr, r0, ip
 8000458:	45a6      	cmp	lr, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d909      	bls.n	8000474 <__udivmoddi4+0x1a0>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f100 3aff 	add.w	sl, r0, #4294967295
 8000466:	f080 809c 	bcs.w	80005a2 <__udivmoddi4+0x2ce>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f240 8099 	bls.w	80005a2 <__udivmoddi4+0x2ce>
 8000470:	3802      	subs	r0, #2
 8000472:	443c      	add	r4, r7
 8000474:	eba4 040e 	sub.w	r4, r4, lr
 8000478:	fa1f fe83 	uxth.w	lr, r3
 800047c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000480:	fb09 4413 	mls	r4, r9, r3, r4
 8000484:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000488:	fb03 fc0c 	mul.w	ip, r3, ip
 800048c:	45a4      	cmp	ip, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1ce>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f103 3eff 	add.w	lr, r3, #4294967295
 8000496:	f080 8082 	bcs.w	800059e <__udivmoddi4+0x2ca>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d97f      	bls.n	800059e <__udivmoddi4+0x2ca>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a6:	eba4 040c 	sub.w	r4, r4, ip
 80004aa:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ae:	4564      	cmp	r4, ip
 80004b0:	4673      	mov	r3, lr
 80004b2:	46e1      	mov	r9, ip
 80004b4:	d362      	bcc.n	800057c <__udivmoddi4+0x2a8>
 80004b6:	d05f      	beq.n	8000578 <__udivmoddi4+0x2a4>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x1fe>
 80004ba:	ebb8 0203 	subs.w	r2, r8, r3
 80004be:	eb64 0409 	sbc.w	r4, r4, r9
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431e      	orrs	r6, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c5 6400 	strd	r6, r4, [r5]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e74f      	b.n	8000376 <__udivmoddi4+0xa2>
 80004d6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004da:	0c01      	lsrs	r1, r0, #16
 80004dc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e6:	463b      	mov	r3, r7
 80004e8:	4638      	mov	r0, r7
 80004ea:	463c      	mov	r4, r7
 80004ec:	46b8      	mov	r8, r7
 80004ee:	46be      	mov	lr, r7
 80004f0:	2620      	movs	r6, #32
 80004f2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f6:	eba2 0208 	sub.w	r2, r2, r8
 80004fa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fe:	e766      	b.n	80003ce <__udivmoddi4+0xfa>
 8000500:	4601      	mov	r1, r0
 8000502:	e718      	b.n	8000336 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e72c      	b.n	8000362 <__udivmoddi4+0x8e>
 8000508:	f1c6 0220 	rsb	r2, r6, #32
 800050c:	fa2e f302 	lsr.w	r3, lr, r2
 8000510:	40b7      	lsls	r7, r6
 8000512:	40b1      	lsls	r1, r6
 8000514:	fa20 f202 	lsr.w	r2, r0, r2
 8000518:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800051c:	430a      	orrs	r2, r1
 800051e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000522:	b2bc      	uxth	r4, r7
 8000524:	fb0e 3318 	mls	r3, lr, r8, r3
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052e:	fb08 f904 	mul.w	r9, r8, r4
 8000532:	40b0      	lsls	r0, r6
 8000534:	4589      	cmp	r9, r1
 8000536:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800053a:	b280      	uxth	r0, r0
 800053c:	d93e      	bls.n	80005bc <__udivmoddi4+0x2e8>
 800053e:	1879      	adds	r1, r7, r1
 8000540:	f108 3cff 	add.w	ip, r8, #4294967295
 8000544:	d201      	bcs.n	800054a <__udivmoddi4+0x276>
 8000546:	4589      	cmp	r9, r1
 8000548:	d81f      	bhi.n	800058a <__udivmoddi4+0x2b6>
 800054a:	eba1 0109 	sub.w	r1, r1, r9
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	fb0e 1119 	mls	r1, lr, r9, r1
 800055a:	b292      	uxth	r2, r2
 800055c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000560:	4542      	cmp	r2, r8
 8000562:	d229      	bcs.n	80005b8 <__udivmoddi4+0x2e4>
 8000564:	18ba      	adds	r2, r7, r2
 8000566:	f109 31ff 	add.w	r1, r9, #4294967295
 800056a:	d2c4      	bcs.n	80004f6 <__udivmoddi4+0x222>
 800056c:	4542      	cmp	r2, r8
 800056e:	d2c2      	bcs.n	80004f6 <__udivmoddi4+0x222>
 8000570:	f1a9 0102 	sub.w	r1, r9, #2
 8000574:	443a      	add	r2, r7
 8000576:	e7be      	b.n	80004f6 <__udivmoddi4+0x222>
 8000578:	45f0      	cmp	r8, lr
 800057a:	d29d      	bcs.n	80004b8 <__udivmoddi4+0x1e4>
 800057c:	ebbe 0302 	subs.w	r3, lr, r2
 8000580:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000584:	3801      	subs	r0, #1
 8000586:	46e1      	mov	r9, ip
 8000588:	e796      	b.n	80004b8 <__udivmoddi4+0x1e4>
 800058a:	eba7 0909 	sub.w	r9, r7, r9
 800058e:	4449      	add	r1, r9
 8000590:	f1a8 0c02 	sub.w	ip, r8, #2
 8000594:	fbb1 f9fe 	udiv	r9, r1, lr
 8000598:	fb09 f804 	mul.w	r8, r9, r4
 800059c:	e7db      	b.n	8000556 <__udivmoddi4+0x282>
 800059e:	4673      	mov	r3, lr
 80005a0:	e77f      	b.n	80004a2 <__udivmoddi4+0x1ce>
 80005a2:	4650      	mov	r0, sl
 80005a4:	e766      	b.n	8000474 <__udivmoddi4+0x1a0>
 80005a6:	4608      	mov	r0, r1
 80005a8:	e6fd      	b.n	80003a6 <__udivmoddi4+0xd2>
 80005aa:	443b      	add	r3, r7
 80005ac:	3a02      	subs	r2, #2
 80005ae:	e733      	b.n	8000418 <__udivmoddi4+0x144>
 80005b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b4:	443b      	add	r3, r7
 80005b6:	e71c      	b.n	80003f2 <__udivmoddi4+0x11e>
 80005b8:	4649      	mov	r1, r9
 80005ba:	e79c      	b.n	80004f6 <__udivmoddi4+0x222>
 80005bc:	eba1 0109 	sub.w	r1, r1, r9
 80005c0:	46c4      	mov	ip, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c4      	b.n	8000556 <__udivmoddi4+0x282>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fad9 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f853 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f8bf 	bl	8000760 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //step 5: Enable the Cycle counter CYCCNT
  DWT_CTRL |= (1 << 0);
 80005e2:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <main+0x98>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <main+0x98>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6013      	str	r3, [r2, #0]
  //step 6
  SEGGER_SYSVIEW_Conf();
 80005ee:	f004 fa4f 	bl	8004a90 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 80005f2:	f005 fabb 	bl	8005b6c <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <main+0x9c>)
 8000602:	22c8      	movs	r2, #200	@ 0xc8
 8000604:	491a      	ldr	r1, [pc, #104]	@ (8000670 <main+0xa0>)
 8000606:	481b      	ldr	r0, [pc, #108]	@ (8000674 <main+0xa4>)
 8000608:	f002 fc22 	bl	8002e50 <xTaskCreate>
 800060c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00b      	beq.n	800062c <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	2302      	movs	r3, #2
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <main+0xa8>)
 8000636:	22c8      	movs	r2, #200	@ 0xc8
 8000638:	4910      	ldr	r1, [pc, #64]	@ (800067c <main+0xac>)
 800063a:	4811      	ldr	r0, [pc, #68]	@ (8000680 <main+0xb0>)
 800063c:	f002 fc08 	bl	8002e50 <xTaskCreate>
 8000640:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d00b      	beq.n	8000660 <main+0x90>
        __asm volatile
 8000648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064c:	f383 8811 	msr	BASEPRI, r3
 8000650:	f3bf 8f6f 	isb	sy
 8000654:	f3bf 8f4f 	dsb	sy
 8000658:	60fb      	str	r3, [r7, #12]
    }
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <main+0x8c>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000660:	f002 fd4c 	bl	80030fc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <main+0x94>
 8000668:	0e000100 	.word	0x0e000100
 800066c:	080070c0 	.word	0x080070c0
 8000670:	080070d8 	.word	0x080070d8
 8000674:	0800085d 	.word	0x0800085d
 8000678:	080070e0 	.word	0x080070e0
 800067c:	080070f8 	.word	0x080070f8
 8000680:	08000885 	.word	0x08000885

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	@ 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	@ 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f006 fa50 	bl	8006b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <SystemClock_Config+0xd4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	4a29      	ldr	r2, [pc, #164]	@ (8000758 <SystemClock_Config+0xd4>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b8:	4b27      	ldr	r3, [pc, #156]	@ (8000758 <SystemClock_Config+0xd4>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	4b24      	ldr	r3, [pc, #144]	@ (800075c <SystemClock_Config+0xd8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d0:	4a22      	ldr	r2, [pc, #136]	@ (800075c <SystemClock_Config+0xd8>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b20      	ldr	r3, [pc, #128]	@ (800075c <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006f8:	2310      	movs	r3, #16
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000700:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000702:	2304      	movs	r3, #4
 8000704:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f874 	bl	8001800 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800071e:	f000 f8d7 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2102      	movs	r1, #2
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fcf6 	bl	8001130 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800074a:	f000 f8c1 	bl	80008d0 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b35      	ldr	r3, [pc, #212]	@ (8000850 <MX_GPIO_Init+0xf0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a34      	ldr	r2, [pc, #208]	@ (8000850 <MX_GPIO_Init+0xf0>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <MX_GPIO_Init+0xf0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <MX_GPIO_Init+0xf0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a2d      	ldr	r2, [pc, #180]	@ (8000850 <MX_GPIO_Init+0xf0>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a26      	ldr	r2, [pc, #152]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	481a      	ldr	r0, [pc, #104]	@ (8000854 <MX_GPIO_Init+0xf4>)
 80007ec:	f000 fc86 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4814      	ldr	r0, [pc, #80]	@ (8000858 <MX_GPIO_Init+0xf8>)
 8000808:	f000 fae4 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080c:	230c      	movs	r3, #12
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081c:	2307      	movs	r3, #7
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	480b      	ldr	r0, [pc, #44]	@ (8000854 <MX_GPIO_Init+0xf4>)
 8000828:	f000 fad4 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082c:	2320      	movs	r3, #32
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_GPIO_Init+0xf4>)
 8000844:	f000 fac6 	bl	8000dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	@ 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000
 8000858:	40020800 	.word	0x40020800

0800085c <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

	//char msg[100];

	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f006 f877 	bl	8006958 <puts>
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		taskYIELD();
 800086a:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <task1_handler+0x24>)
 800086c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	f3bf 8f4f 	dsb	sy
 8000876:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 800087a:	bf00      	nop
 800087c:	e7f2      	b.n	8000864 <task1_handler+0x8>
 800087e:	bf00      	nop
 8000880:	e000ed04 	.word	0xe000ed04

08000884 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	//char msg[100];
	while(1)
	{
		printf("%s\n", (char*)parameters);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f006 f863 	bl	8006958 <puts>
		//snprintf(msg,100,"%s\n", (char*)parameters);
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		taskYIELD();
 8000892:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <task2_handler+0x24>)
 8000894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	f3bf 8f4f 	dsb	sy
 800089e:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 80008a2:	bf00      	nop
 80008a4:	e7f2      	b.n	800088c <task2_handler+0x8>
 80008a6:	bf00      	nop
 80008a8:	e000ed04 	.word	0xe000ed04

080008ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d101      	bne.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008be:	f000 f987 	bl	8000bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40001000 	.word	0x40001000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000928 <HAL_MspInit+0x4c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	@ 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4b33      	ldr	r3, [pc, #204]	@ (8000a10 <HAL_InitTick+0xe4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a32      	ldr	r2, [pc, #200]	@ (8000a10 <HAL_InitTick+0xe4>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
 800094c:	4b30      	ldr	r3, [pc, #192]	@ (8000a10 <HAL_InitTick+0xe4>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000958:	f107 0210 	add.w	r2, r7, #16
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fcea 	bl	800133c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800096c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000972:	f000 fccf 	bl	8001314 <HAL_RCC_GetPCLK1Freq>
 8000976:	6378      	str	r0, [r7, #52]	@ 0x34
 8000978:	e004      	b.n	8000984 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800097a:	f000 fccb 	bl	8001314 <HAL_RCC_GetPCLK1Freq>
 800097e:	4603      	mov	r3, r0
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000986:	4a23      	ldr	r2, [pc, #140]	@ (8000a14 <HAL_InitTick+0xe8>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	0c9b      	lsrs	r3, r3, #18
 800098e:	3b01      	subs	r3, #1
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000992:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <HAL_InitTick+0xec>)
 8000994:	4a21      	ldr	r2, [pc, #132]	@ (8000a1c <HAL_InitTick+0xf0>)
 8000996:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000998:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <HAL_InitTick+0xec>)
 800099a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800099e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <HAL_InitTick+0xec>)
 80009a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <HAL_InitTick+0xec>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <HAL_InitTick+0xec>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <HAL_InitTick+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009b8:	4817      	ldr	r0, [pc, #92]	@ (8000a18 <HAL_InitTick+0xec>)
 80009ba:	f001 f9bf 	bl	8001d3c <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d11b      	bne.n	8000a04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009cc:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <HAL_InitTick+0xec>)
 80009ce:	f001 fa0f 	bl	8001df0 <HAL_TIM_Base_Start_IT>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d111      	bne.n	8000a04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009e0:	2036      	movs	r0, #54	@ 0x36
 80009e2:	f000 f9e9 	bl	8000db8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d808      	bhi.n	80009fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2036      	movs	r0, #54	@ 0x36
 80009f2:	f000 f9c5 	bl	8000d80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <HAL_InitTick+0xf4>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	e002      	b.n	8000a04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3738      	adds	r7, #56	@ 0x38
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	20000088 	.word	0x20000088
 8000a1c:	40001000 	.word	0x40001000
 8000a20:	20000004 	.word	0x20000004

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <TIM6_DAC_IRQHandler+0x10>)
 8000a62:	f001 fa35 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000088 	.word	0x20000088

08000a70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
	}

return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_close>:
	}
	return len;
}

int _close(int file)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ad2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <_isatty>:

int _isatty(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	return 1;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
	return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f006 f823 	bl	8006bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fd31 	bl	80005d0 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b7c:	08007230 	.word	0x08007230
  ldr r2, =_sbss
 8000b80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b84:	20014644 	.word	0x20014644

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f8d8 	bl	8000d6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff feb6 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fe8c 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	200000d0 	.word	0x200000d0

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200000d0 	.word	0x200000d0

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	@ (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	@ (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	@ (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	@ 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff4c 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d92:	f7ff ff61 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	6978      	ldr	r0, [r7, #20]
 8000d9e:	f7ff ffb1 	bl	8000d04 <NVIC_EncodePriority>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff80 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff54 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	@ 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	e165      	b.n	80010bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df0:	2201      	movs	r2, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f040 8154 	bne.w	80010b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d005      	beq.n	8000e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d130      	bne.n	8000e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	f003 0201 	and.w	r2, r3, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	d017      	beq.n	8000ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d123      	bne.n	8000f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	69b9      	ldr	r1, [r7, #24]
 8000f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0203 	and.w	r2, r3, #3
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80ae 	beq.w	80010b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80010d4 <HAL_GPIO_Init+0x300>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	4a5c      	ldr	r2, [pc, #368]	@ (80010d4 <HAL_GPIO_Init+0x300>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80010d4 <HAL_GPIO_Init+0x300>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f76:	4a58      	ldr	r2, [pc, #352]	@ (80010d8 <HAL_GPIO_Init+0x304>)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80010dc <HAL_GPIO_Init+0x308>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d025      	beq.n	8000fee <HAL_GPIO_Init+0x21a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80010e0 <HAL_GPIO_Init+0x30c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d01f      	beq.n	8000fea <HAL_GPIO_Init+0x216>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4d      	ldr	r2, [pc, #308]	@ (80010e4 <HAL_GPIO_Init+0x310>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d019      	beq.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	@ (80010e8 <HAL_GPIO_Init+0x314>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d013      	beq.n	8000fe2 <HAL_GPIO_Init+0x20e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80010ec <HAL_GPIO_Init+0x318>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d00d      	beq.n	8000fde <HAL_GPIO_Init+0x20a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80010f0 <HAL_GPIO_Init+0x31c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d007      	beq.n	8000fda <HAL_GPIO_Init+0x206>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a49      	ldr	r2, [pc, #292]	@ (80010f4 <HAL_GPIO_Init+0x320>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d101      	bne.n	8000fd6 <HAL_GPIO_Init+0x202>
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	e00c      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	e00a      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fda:	2305      	movs	r3, #5
 8000fdc:	e008      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fde:	2304      	movs	r3, #4
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001000:	4935      	ldr	r1, [pc, #212]	@ (80010d8 <HAL_GPIO_Init+0x304>)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001032:	4a31      	ldr	r2, [pc, #196]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001038:	4b2f      	ldr	r3, [pc, #188]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800105c:	4a26      	ldr	r2, [pc, #152]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001062:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001086:	4a1c      	ldr	r2, [pc, #112]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b0:	4a11      	ldr	r2, [pc, #68]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	f67f ae96 	bls.w	8000df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	@ 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40021400 	.word	0x40021400
 80010f4:	40021800 	.word	0x40021800
 80010f8:	40013c00 	.word	0x40013c00

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e0cc      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001144:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d90c      	bls.n	800116c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	4b65      	ldr	r3, [pc, #404]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800115a:	4b63      	ldr	r3, [pc, #396]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d001      	beq.n	800116c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0b8      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001184:	4b59      	ldr	r3, [pc, #356]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a58      	ldr	r2, [pc, #352]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800118e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800119c:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4a52      	ldr	r2, [pc, #328]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a8:	4b50      	ldr	r3, [pc, #320]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	494d      	ldr	r1, [pc, #308]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d044      	beq.n	8001250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d107      	bne.n	80011de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b47      	ldr	r3, [pc, #284]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d119      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e07f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d003      	beq.n	80011ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ee:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e06f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e067      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800120e:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f023 0203 	bic.w	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4934      	ldr	r1, [pc, #208]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	4313      	orrs	r3, r2
 800121e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001220:	f7ff fcea 	bl	8000bf8 <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	e00a      	b.n	800123e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001228:	f7ff fce6 	bl	8000bf8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e04f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123e:	4b2b      	ldr	r3, [pc, #172]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 020c 	and.w	r2, r3, #12
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	429a      	cmp	r2, r3
 800124e:	d1eb      	bne.n	8001228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001250:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d20c      	bcs.n	8001278 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125e:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e032      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4916      	ldr	r1, [pc, #88]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	4313      	orrs	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d009      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	490e      	ldr	r1, [pc, #56]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012b6:	f000 f873 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	490a      	ldr	r1, [pc, #40]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	5ccb      	ldrb	r3, [r1, r3]
 80012ca:	fa22 f303 	lsr.w	r3, r2, r3
 80012ce:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fb28 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	080071f0 	.word	0x080071f0
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <HAL_RCC_GetHCLKFreq+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000

08001314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001318:	f7ff fff0 	bl	80012fc <HAL_RCC_GetHCLKFreq>
 800131c:	4602      	mov	r2, r0
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	0a9b      	lsrs	r3, r3, #10
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	4903      	ldr	r1, [pc, #12]	@ (8001338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800132a:	5ccb      	ldrb	r3, [r1, r3]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	08007200 	.word	0x08007200

0800133c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	220f      	movs	r2, #15
 800134a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <HAL_RCC_GetClockConfig+0x60>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 020f 	and.w	r2, r3, #15
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	601a      	str	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40023c00 	.word	0x40023c00

080013a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a4:	b0ae      	sub	sp, #184	@ 0xb8
 80013a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013c6:	4bcb      	ldr	r3, [pc, #812]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	f200 8206 	bhi.w	80017e0 <HAL_RCC_GetSysClockFreq+0x440>
 80013d4:	a201      	add	r2, pc, #4	@ (adr r2, 80013dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	08001411 	.word	0x08001411
 80013e0:	080017e1 	.word	0x080017e1
 80013e4:	080017e1 	.word	0x080017e1
 80013e8:	080017e1 	.word	0x080017e1
 80013ec:	08001419 	.word	0x08001419
 80013f0:	080017e1 	.word	0x080017e1
 80013f4:	080017e1 	.word	0x080017e1
 80013f8:	080017e1 	.word	0x080017e1
 80013fc:	08001421 	.word	0x08001421
 8001400:	080017e1 	.word	0x080017e1
 8001404:	080017e1 	.word	0x080017e1
 8001408:	080017e1 	.word	0x080017e1
 800140c:	08001611 	.word	0x08001611
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001410:	4bb9      	ldr	r3, [pc, #740]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001416:	e1e7      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001418:	4bb8      	ldr	r3, [pc, #736]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800141a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800141e:	e1e3      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001420:	4bb4      	ldr	r3, [pc, #720]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800142c:	4bb1      	ldr	r3, [pc, #708]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d071      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001438:	4bae      	ldr	r3, [pc, #696]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	2200      	movs	r2, #0
 8001440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001444:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800144c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001450:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800145a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800145e:	4622      	mov	r2, r4
 8001460:	462b      	mov	r3, r5
 8001462:	f04f 0000 	mov.w	r0, #0
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	0159      	lsls	r1, r3, #5
 800146c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001470:	0150      	lsls	r0, r2, #5
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4621      	mov	r1, r4
 8001478:	1a51      	subs	r1, r2, r1
 800147a:	6439      	str	r1, [r7, #64]	@ 0x40
 800147c:	4629      	mov	r1, r5
 800147e:	eb63 0301 	sbc.w	r3, r3, r1
 8001482:	647b      	str	r3, [r7, #68]	@ 0x44
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001490:	4649      	mov	r1, r9
 8001492:	018b      	lsls	r3, r1, #6
 8001494:	4641      	mov	r1, r8
 8001496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800149a:	4641      	mov	r1, r8
 800149c:	018a      	lsls	r2, r1, #6
 800149e:	4641      	mov	r1, r8
 80014a0:	1a51      	subs	r1, r2, r1
 80014a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014a4:	4649      	mov	r1, r9
 80014a6:	eb63 0301 	sbc.w	r3, r3, r1
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80014b8:	4649      	mov	r1, r9
 80014ba:	00cb      	lsls	r3, r1, #3
 80014bc:	4641      	mov	r1, r8
 80014be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014c2:	4641      	mov	r1, r8
 80014c4:	00ca      	lsls	r2, r1, #3
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	4622      	mov	r2, r4
 80014ce:	189b      	adds	r3, r3, r2
 80014d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80014d2:	462b      	mov	r3, r5
 80014d4:	460a      	mov	r2, r1
 80014d6:	eb42 0303 	adc.w	r3, r2, r3
 80014da:	637b      	str	r3, [r7, #52]	@ 0x34
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014e8:	4629      	mov	r1, r5
 80014ea:	024b      	lsls	r3, r1, #9
 80014ec:	4621      	mov	r1, r4
 80014ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014f2:	4621      	mov	r1, r4
 80014f4:	024a      	lsls	r2, r1, #9
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014fe:	2200      	movs	r2, #0
 8001500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001508:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800150c:	f7fe feca 	bl	80002a4 <__aeabi_uldivmod>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4613      	mov	r3, r2
 8001516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800151a:	e067      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800151c:	4b75      	ldr	r3, [pc, #468]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	2200      	movs	r2, #0
 8001524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001528:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800152c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001536:	2300      	movs	r3, #0
 8001538:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800153a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800153e:	4622      	mov	r2, r4
 8001540:	462b      	mov	r3, r5
 8001542:	f04f 0000 	mov.w	r0, #0
 8001546:	f04f 0100 	mov.w	r1, #0
 800154a:	0159      	lsls	r1, r3, #5
 800154c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001550:	0150      	lsls	r0, r2, #5
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4621      	mov	r1, r4
 8001558:	1a51      	subs	r1, r2, r1
 800155a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800155c:	4629      	mov	r1, r5
 800155e:	eb63 0301 	sbc.w	r3, r3, r1
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001570:	4649      	mov	r1, r9
 8001572:	018b      	lsls	r3, r1, #6
 8001574:	4641      	mov	r1, r8
 8001576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800157a:	4641      	mov	r1, r8
 800157c:	018a      	lsls	r2, r1, #6
 800157e:	4641      	mov	r1, r8
 8001580:	ebb2 0a01 	subs.w	sl, r2, r1
 8001584:	4649      	mov	r1, r9
 8001586:	eb63 0b01 	sbc.w	fp, r3, r1
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001596:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800159a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800159e:	4692      	mov	sl, r2
 80015a0:	469b      	mov	fp, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	eb1a 0303 	adds.w	r3, sl, r3
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	462b      	mov	r3, r5
 80015ac:	eb4b 0303 	adc.w	r3, fp, r3
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015be:	4629      	mov	r1, r5
 80015c0:	028b      	lsls	r3, r1, #10
 80015c2:	4621      	mov	r1, r4
 80015c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015c8:	4621      	mov	r1, r4
 80015ca:	028a      	lsls	r2, r1, #10
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015d4:	2200      	movs	r2, #0
 80015d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80015d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80015da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015de:	f7fe fe61 	bl	80002a4 <__aeabi_uldivmod>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4613      	mov	r3, r2
 80015e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015ec:	4b41      	ldr	r3, [pc, #260]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	0c1b      	lsrs	r3, r3, #16
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	3301      	adds	r3, #1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80015fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800160e:	e0eb      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001610:	4b38      	ldr	r3, [pc, #224]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001618:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800161c:	4b35      	ldr	r3, [pc, #212]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d06b      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001628:	4b32      	ldr	r3, [pc, #200]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	2200      	movs	r2, #0
 8001630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800163a:	663b      	str	r3, [r7, #96]	@ 0x60
 800163c:	2300      	movs	r3, #0
 800163e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001640:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001644:	4622      	mov	r2, r4
 8001646:	462b      	mov	r3, r5
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	0159      	lsls	r1, r3, #5
 8001652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001656:	0150      	lsls	r0, r2, #5
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4621      	mov	r1, r4
 800165e:	1a51      	subs	r1, r2, r1
 8001660:	61b9      	str	r1, [r7, #24]
 8001662:	4629      	mov	r1, r5
 8001664:	eb63 0301 	sbc.w	r3, r3, r1
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001676:	4659      	mov	r1, fp
 8001678:	018b      	lsls	r3, r1, #6
 800167a:	4651      	mov	r1, sl
 800167c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001680:	4651      	mov	r1, sl
 8001682:	018a      	lsls	r2, r1, #6
 8001684:	4651      	mov	r1, sl
 8001686:	ebb2 0801 	subs.w	r8, r2, r1
 800168a:	4659      	mov	r1, fp
 800168c:	eb63 0901 	sbc.w	r9, r3, r1
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800169c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016a4:	4690      	mov	r8, r2
 80016a6:	4699      	mov	r9, r3
 80016a8:	4623      	mov	r3, r4
 80016aa:	eb18 0303 	adds.w	r3, r8, r3
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	462b      	mov	r3, r5
 80016b2:	eb49 0303 	adc.w	r3, r9, r3
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016c4:	4629      	mov	r1, r5
 80016c6:	024b      	lsls	r3, r1, #9
 80016c8:	4621      	mov	r1, r4
 80016ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016ce:	4621      	mov	r1, r4
 80016d0:	024a      	lsls	r2, r1, #9
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016da:	2200      	movs	r2, #0
 80016dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016e4:	f7fe fdde 	bl	80002a4 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4613      	mov	r3, r2
 80016ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016f2:	e065      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x420>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001700:	4b3d      	ldr	r3, [pc, #244]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	2200      	movs	r2, #0
 8001708:	4618      	mov	r0, r3
 800170a:	4611      	mov	r1, r2
 800170c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001710:	653b      	str	r3, [r7, #80]	@ 0x50
 8001712:	2300      	movs	r3, #0
 8001714:	657b      	str	r3, [r7, #84]	@ 0x54
 8001716:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800171a:	4642      	mov	r2, r8
 800171c:	464b      	mov	r3, r9
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	0159      	lsls	r1, r3, #5
 8001728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800172c:	0150      	lsls	r0, r2, #5
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4641      	mov	r1, r8
 8001734:	1a51      	subs	r1, r2, r1
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	4649      	mov	r1, r9
 800173a:	eb63 0301 	sbc.w	r3, r3, r1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800174c:	4659      	mov	r1, fp
 800174e:	018b      	lsls	r3, r1, #6
 8001750:	4651      	mov	r1, sl
 8001752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001756:	4651      	mov	r1, sl
 8001758:	018a      	lsls	r2, r1, #6
 800175a:	4651      	mov	r1, sl
 800175c:	1a54      	subs	r4, r2, r1
 800175e:	4659      	mov	r1, fp
 8001760:	eb63 0501 	sbc.w	r5, r3, r1
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	00eb      	lsls	r3, r5, #3
 800176e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001772:	00e2      	lsls	r2, r4, #3
 8001774:	4614      	mov	r4, r2
 8001776:	461d      	mov	r5, r3
 8001778:	4643      	mov	r3, r8
 800177a:	18e3      	adds	r3, r4, r3
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	464b      	mov	r3, r9
 8001780:	eb45 0303 	adc.w	r3, r5, r3
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001792:	4629      	mov	r1, r5
 8001794:	028b      	lsls	r3, r1, #10
 8001796:	4621      	mov	r1, r4
 8001798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800179c:	4621      	mov	r1, r4
 800179e:	028a      	lsls	r2, r1, #10
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017a8:	2200      	movs	r2, #0
 80017aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017b2:	f7fe fd77 	bl	80002a4 <__aeabi_uldivmod>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4613      	mov	r3, r2
 80017bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017c0:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0f1b      	lsrs	r3, r3, #28
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80017ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017de:	e003      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80017e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	37b8      	adds	r7, #184	@ 0xb8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	00f42400 	.word	0x00f42400

08001800 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e28d      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8083 	beq.w	8001926 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001820:	4b94      	ldr	r3, [pc, #592]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	d019      	beq.n	8001860 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800182c:	4b91      	ldr	r3, [pc, #580]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
        || \
 8001834:	2b08      	cmp	r3, #8
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001838:	4b8e      	ldr	r3, [pc, #568]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001844:	d00c      	beq.n	8001860 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	4b8b      	ldr	r3, [pc, #556]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d112      	bne.n	8001878 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001852:	4b88      	ldr	r3, [pc, #544]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800185a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800185e:	d10b      	bne.n	8001878 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	4b84      	ldr	r3, [pc, #528]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d05b      	beq.n	8001924 <HAL_RCC_OscConfig+0x124>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d157      	bne.n	8001924 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e25a      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001880:	d106      	bne.n	8001890 <HAL_RCC_OscConfig+0x90>
 8001882:	4b7c      	ldr	r3, [pc, #496]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7b      	ldr	r2, [pc, #492]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xcc>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0xb4>
 800189a:	4b76      	ldr	r3, [pc, #472]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a75      	ldr	r2, [pc, #468]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b73      	ldr	r3, [pc, #460]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a72      	ldr	r2, [pc, #456]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xcc>
 80018b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff f990 	bl	8000bf8 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff f98c 	bl	8000bf8 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	@ 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e21f      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b61      	ldr	r3, [pc, #388]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xdc>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f97c 	bl	8000bf8 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff f978 	bl	8000bf8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	@ 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e20b      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b57      	ldr	r3, [pc, #348]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x104>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d06f      	beq.n	8001a12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001932:	4b50      	ldr	r3, [pc, #320]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d017      	beq.n	800196e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800193e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
        || \
 8001946:	2b08      	cmp	r3, #8
 8001948:	d105      	bne.n	8001956 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800194a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001956:	4b47      	ldr	r3, [pc, #284]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d11c      	bne.n	800199c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001962:	4b44      	ldr	r3, [pc, #272]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	4b41      	ldr	r3, [pc, #260]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x186>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1d3      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b3b      	ldr	r3, [pc, #236]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4937      	ldr	r1, [pc, #220]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	e03a      	b.n	8001a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <HAL_RCC_OscConfig+0x278>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff f925 	bl	8000bf8 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff f921 	bl	8000bf8 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1b4      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b28      	ldr	r3, [pc, #160]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4925      	ldr	r1, [pc, #148]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <HAL_RCC_OscConfig+0x278>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff f904 	bl	8000bf8 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f4:	f7ff f900 	bl	8000bf8 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e193      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	4b1b      	ldr	r3, [pc, #108]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d036      	beq.n	8001a8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d016      	beq.n	8001a54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f8e4 	bl	8000bf8 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff f8e0 	bl	8000bf8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e173      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x234>
 8001a52:	e01b      	b.n	8001a8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f8cd 	bl	8000bf8 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	e00e      	b.n	8001a80 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff f8c9 	bl	8000bf8 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d907      	bls.n	8001a80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e15c      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
 8001a74:	40023800 	.word	0x40023800
 8001a78:	42470000 	.word	0x42470000
 8001a7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	4b8a      	ldr	r3, [pc, #552]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ea      	bne.n	8001a62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8097 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9e:	4b83      	ldr	r3, [pc, #524]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b7f      	ldr	r3, [pc, #508]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b7c      	ldr	r3, [pc, #496]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	4b79      	ldr	r3, [pc, #484]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d118      	bne.n	8001b08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad6:	4b76      	ldr	r3, [pc, #472]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a75      	ldr	r2, [pc, #468]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f889 	bl	8000bf8 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aea:	f7ff f885 	bl	8000bf8 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e118      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b6c      	ldr	r3, [pc, #432]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x31e>
 8001b10:	4b66      	ldr	r3, [pc, #408]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b14:	4a65      	ldr	r2, [pc, #404]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1c:	e01c      	b.n	8001b58 <HAL_RCC_OscConfig+0x358>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x340>
 8001b26:	4b61      	ldr	r3, [pc, #388]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2a:	4a60      	ldr	r2, [pc, #384]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b32:	4b5e      	ldr	r3, [pc, #376]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b36:	4a5d      	ldr	r2, [pc, #372]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0x358>
 8001b40:	4b5a      	ldr	r3, [pc, #360]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b44:	4a59      	ldr	r2, [pc, #356]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4c:	4b57      	ldr	r3, [pc, #348]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b50:	4a56      	ldr	r2, [pc, #344]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d015      	beq.n	8001b8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff f84a 	bl	8000bf8 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7ff f846 	bl	8000bf8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0d7      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0ee      	beq.n	8001b68 <HAL_RCC_OscConfig+0x368>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f834 	bl	8000bf8 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff f830 	bl	8000bf8 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0c1      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001baa:	4b40      	ldr	r3, [pc, #256]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ee      	bne.n	8001b94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80ad 	beq.w	8001d2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd2:	4b36      	ldr	r3, [pc, #216]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d060      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d145      	bne.n	8001c72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be6:	4b33      	ldr	r3, [pc, #204]	@ (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff f804 	bl	8000bf8 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f800 	bl	8000bf8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e093      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	4b29      	ldr	r3, [pc, #164]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	071b      	lsls	r3, r3, #28
 8001c3e:	491b      	ldr	r1, [pc, #108]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7fe ffd5 	bl	8000bf8 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c52:	f7fe ffd1 	bl	8000bf8 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e064      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x452>
 8001c70:	e05c      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7fe ffbe 	bl	8000bf8 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7fe ffba 	bl	8000bf8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e04d      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x480>
 8001c9e:	e045      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e040      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <HAL_RCC_OscConfig+0x538>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d030      	beq.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d129      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d122      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ce8:	4013      	ands	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d119      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	085b      	lsrs	r3, r3, #1
 8001d00:	3b01      	subs	r3, #1
 8001d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d10f      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e041      	b.n	8001dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f839 	bl	8001dda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3304      	adds	r3, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f000 f9c0 	bl	8002100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d001      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e04e      	b.n	8001ea6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a23      	ldr	r2, [pc, #140]	@ (8001eb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d022      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e32:	d01d      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d018      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1e      	ldr	r2, [pc, #120]	@ (8001ebc <HAL_TIM_Base_Start_IT+0xcc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d013      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00e      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	@ (8001ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d004      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d111      	bne.n	8001e94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d010      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e92:	e007      	b.n	8001ea4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	40000800 	.word	0x40000800
 8001ec0:	40000c00 	.word	0x40000c00
 8001ec4:	40010400 	.word	0x40010400
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40001800 	.word	0x40001800

08001ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d020      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01b      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0202 	mvn.w	r2, #2
 8001f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8d2 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8c4 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f8d5 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d020      	beq.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01b      	beq.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0204 	mvn.w	r2, #4
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8ac 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f89e 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8af 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d020      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0208 	mvn.w	r2, #8
 8001f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f886 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f878 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f889 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01b      	beq.n	8002018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0210 	mvn.w	r2, #16
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2208      	movs	r2, #8
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f860 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f852 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f863 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0201 	mvn.w	r2, #1
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fc38 	bl	80008ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00c      	beq.n	8002060 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f900 	bl	8002260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f834 	bl	80020ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0220 	mvn.w	r2, #32
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8d2 	bl	800224c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a43      	ldr	r2, [pc, #268]	@ (8002220 <TIM_Base_SetConfig+0x120>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800211e:	d00f      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a40      	ldr	r2, [pc, #256]	@ (8002224 <TIM_Base_SetConfig+0x124>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00b      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3f      	ldr	r2, [pc, #252]	@ (8002228 <TIM_Base_SetConfig+0x128>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d007      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3e      	ldr	r2, [pc, #248]	@ (800222c <TIM_Base_SetConfig+0x12c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3d      	ldr	r2, [pc, #244]	@ (8002230 <TIM_Base_SetConfig+0x130>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d108      	bne.n	8002152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a32      	ldr	r2, [pc, #200]	@ (8002220 <TIM_Base_SetConfig+0x120>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002160:	d027      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2f      	ldr	r2, [pc, #188]	@ (8002224 <TIM_Base_SetConfig+0x124>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d023      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2e      	ldr	r2, [pc, #184]	@ (8002228 <TIM_Base_SetConfig+0x128>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2d      	ldr	r2, [pc, #180]	@ (800222c <TIM_Base_SetConfig+0x12c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2c      	ldr	r2, [pc, #176]	@ (8002230 <TIM_Base_SetConfig+0x130>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d017      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2b      	ldr	r2, [pc, #172]	@ (8002234 <TIM_Base_SetConfig+0x134>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2a      	ldr	r2, [pc, #168]	@ (8002238 <TIM_Base_SetConfig+0x138>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a29      	ldr	r2, [pc, #164]	@ (800223c <TIM_Base_SetConfig+0x13c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a28      	ldr	r2, [pc, #160]	@ (8002240 <TIM_Base_SetConfig+0x140>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a27      	ldr	r2, [pc, #156]	@ (8002244 <TIM_Base_SetConfig+0x144>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d003      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a26      	ldr	r2, [pc, #152]	@ (8002248 <TIM_Base_SetConfig+0x148>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d108      	bne.n	80021c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002220 <TIM_Base_SetConfig+0x120>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d003      	beq.n	80021f2 <TIM_Base_SetConfig+0xf2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a10      	ldr	r2, [pc, #64]	@ (8002230 <TIM_Base_SetConfig+0x130>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d103      	bne.n	80021fa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f043 0204 	orr.w	r2, r3, #4
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	601a      	str	r2, [r3, #0]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40010000 	.word	0x40010000
 8002224:	40000400 	.word	0x40000400
 8002228:	40000800 	.word	0x40000800
 800222c:	40000c00 	.word	0x40000c00
 8002230:	40010400 	.word	0x40010400
 8002234:	40014000 	.word	0x40014000
 8002238:	40014400 	.word	0x40014400
 800223c:	40014800 	.word	0x40014800
 8002240:	40001800 	.word	0x40001800
 8002244:	40001c00 	.word	0x40001c00
 8002248:	40002000 	.word	0x40002000

0800224c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f103 0208 	add.w	r2, r3, #8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f103 0208 	add.w	r2, r3, #8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f103 0208 	add.w	r2, r3, #8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d103      	bne.n	8002336 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e00c      	b.n	8002350 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3308      	adds	r3, #8
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	e002      	b.n	8002344 <vListInsert+0x2e>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	429a      	cmp	r2, r3
 800234e:	d2f6      	bcs.n	800233e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	601a      	str	r2, [r3, #0]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6892      	ldr	r2, [r2, #8]
 800239e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6852      	ldr	r2, [r2, #4]
 80023a8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d103      	bne.n	80023bc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1e5a      	subs	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10b      	bne.n	8002408 <xQueueGenericReset+0x2c>
        __asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	60bb      	str	r3, [r7, #8]
    }
 8002402:	bf00      	nop
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002408:	f002 f800 	bl	800440c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002414:	68f9      	ldr	r1, [r7, #12]
 8002416:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	441a      	add	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002438:	3b01      	subs	r3, #1
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	441a      	add	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	22ff      	movs	r2, #255	@ 0xff
 800244c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	22ff      	movs	r2, #255	@ 0xff
 8002454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <xQueueGenericReset+0x96>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00f      	beq.n	8002486 <xQueueGenericReset+0xaa>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3310      	adds	r3, #16
 800246a:	4618      	mov	r0, r3
 800246c:	f001 f8c6 	bl	80035fc <xTaskRemoveFromEventList>
 8002470:	e009      	b.n	8002486 <xQueueGenericReset+0xaa>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3310      	adds	r3, #16
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fefc 	bl	8002274 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3324      	adds	r3, #36	@ 0x24
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fef7 	bl	8002274 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002486:	f001 fff3 	bl	8004470 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	@ 0x30
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	4613      	mov	r3, r2
 80024a0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10b      	bne.n	80024c0 <xQueueGenericCreate+0x2c>
        __asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	61bb      	str	r3, [r7, #24]
    }
 80024ba:	bf00      	nop
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <xQueueGenericCreate+0x4a>
 80024d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d101      	bne.n	80024e2 <xQueueGenericCreate+0x4e>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <xQueueGenericCreate+0x50>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <xQueueGenericCreate+0x6c>
        __asm volatile
 80024e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	617b      	str	r3, [r7, #20]
    }
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002506:	d90b      	bls.n	8002520 <xQueueGenericCreate+0x8c>
        __asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	613b      	str	r3, [r7, #16]
    }
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	3350      	adds	r3, #80	@ 0x50
 8002524:	4618      	mov	r0, r3
 8002526:	f002 f8a3 	bl	8004670 <pvPortMalloc>
 800252a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00d      	beq.n	800254e <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3350      	adds	r3, #80	@ 0x50
 800253a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800253c:	79fa      	ldrb	r2, [r7, #7]
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	4613      	mov	r3, r2
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f805 	bl	8002558 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800254e:	6a3b      	ldr	r3, [r7, #32]
    }
 8002550:	4618      	mov	r0, r3
 8002552:	3728      	adds	r7, #40	@ 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e002      	b.n	800257a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002586:	2101      	movs	r1, #1
 8002588:	69b8      	ldr	r0, [r7, #24]
 800258a:	f7ff ff27 	bl	80023dc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	68f9      	ldr	r1, [r7, #12]
 800259c:	2073      	movs	r0, #115	@ 0x73
 800259e:	f003 f9dd 	bl	800595c <SEGGER_SYSVIEW_RecordU32x3>
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b090      	sub	sp, #64	@ 0x40
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025ba:	2300      	movs	r3, #0
 80025bc:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <xQueueGenericSend+0x34>
        __asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <xQueueGenericSend+0x42>
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <xQueueGenericSend+0x46>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <xQueueGenericSend+0x48>
 80025f2:	2300      	movs	r3, #0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <xQueueGenericSend+0x64>
        __asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d103      	bne.n	800261e <xQueueGenericSend+0x72>
 8002616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <xQueueGenericSend+0x76>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <xQueueGenericSend+0x78>
 8002622:	2300      	movs	r3, #0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10b      	bne.n	8002640 <xQueueGenericSend+0x94>
        __asm volatile
 8002628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800262c:	f383 8811 	msr	BASEPRI, r3
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	623b      	str	r3, [r7, #32]
    }
 800263a:	bf00      	nop
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002640:	f001 f97a 	bl	8003938 <xTaskGetSchedulerState>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <xQueueGenericSend+0xa4>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <xQueueGenericSend+0xa8>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <xQueueGenericSend+0xaa>
 8002654:	2300      	movs	r3, #0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10b      	bne.n	8002672 <xQueueGenericSend+0xc6>
        __asm volatile
 800265a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	61fb      	str	r3, [r7, #28]
    }
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	e7fd      	b.n	800266e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002672:	f001 fecb 	bl	800440c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800267a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267e:	429a      	cmp	r2, r3
 8002680:	d302      	bcc.n	8002688 <xQueueGenericSend+0xdc>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d11f      	bne.n	80026c8 <xQueueGenericSend+0x11c>
            {
                traceQUEUE_SEND( pxQueue );
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fef2 	bl	8006474 <SEGGER_SYSVIEW_ShrinkId>
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	460b      	mov	r3, r1
 800269a:	4601      	mov	r1, r0
 800269c:	205a      	movs	r0, #90	@ 0x5a
 800269e:	f003 f9d3 	bl	8005a48 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026a8:	f000 fa5c 	bl	8002b64 <prvCopyDataToQueue>
 80026ac:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <xQueueGenericSend+0x114>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b8:	3324      	adds	r3, #36	@ 0x24
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 ff9e 	bl	80035fc <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80026c0:	f001 fed6 	bl	8004470 <vPortExitCritical>
                return pdPASS;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e07d      	b.n	80027c4 <xQueueGenericSend+0x218>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d110      	bne.n	80026f0 <xQueueGenericSend+0x144>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026ce:	f001 fecf 	bl	8004470 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80026d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 fecd 	bl	8006474 <SEGGER_SYSVIEW_ShrinkId>
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	460b      	mov	r3, r1
 80026e4:	4601      	mov	r1, r0
 80026e6:	205a      	movs	r0, #90	@ 0x5a
 80026e8:	f003 f9ae 	bl	8005a48 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e069      	b.n	80027c4 <xQueueGenericSend+0x218>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <xQueueGenericSend+0x158>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 ffe6 	bl	80036cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002700:	2301      	movs	r3, #1
 8002702:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002704:	f001 feb4 	bl	8004470 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002708:	f000 fd5a 	bl	80031c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800270c:	f001 fe7e 	bl	800440c <vPortEnterCritical>
 8002710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002712:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002716:	b25b      	sxtb	r3, r3
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d103      	bne.n	8002726 <xQueueGenericSend+0x17a>
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002728:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800272c:	b25b      	sxtb	r3, r3
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d103      	bne.n	800273c <xQueueGenericSend+0x190>
 8002734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800273c:	f001 fe98 	bl	8004470 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002740:	1d3a      	adds	r2, r7, #4
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f000 ffd5 	bl	80036f8 <xTaskCheckForTimeOut>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d124      	bne.n	800279e <xQueueGenericSend+0x1f2>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002754:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002756:	f000 fafd 	bl	8002d54 <prvIsQueueFull>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d018      	beq.n	8002792 <xQueueGenericSend+0x1e6>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002762:	3310      	adds	r3, #16
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fef1 	bl	8003550 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800276e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002770:	f000 fa88 	bl	8002c84 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002774:	f000 fd32 	bl	80031dc <xTaskResumeAll>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	f47f af79 	bne.w	8002672 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8002780:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <xQueueGenericSend+0x220>)
 8002782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	e76f      	b.n	8002672 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002792:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002794:	f000 fa76 	bl	8002c84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002798:	f000 fd20 	bl	80031dc <xTaskResumeAll>
 800279c:	e769      	b.n	8002672 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800279e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027a0:	f000 fa70 	bl	8002c84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027a4:	f000 fd1a 	bl	80031dc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80027a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027aa:	4618      	mov	r0, r3
 80027ac:	f003 fe62 	bl	8006474 <SEGGER_SYSVIEW_ShrinkId>
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	460b      	mov	r3, r1
 80027ba:	4601      	mov	r1, r0
 80027bc:	205a      	movs	r0, #90	@ 0x5a
 80027be:	f003 f943 	bl	8005a48 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80027c2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3738      	adds	r7, #56	@ 0x38
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	e000ed04 	.word	0xe000ed04

080027d0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b090      	sub	sp, #64	@ 0x40
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80027e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10b      	bne.n	8002800 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d103      	bne.n	800280e <xQueueGenericSendFromISR+0x3e>
 8002806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <xQueueGenericSendFromISR+0x42>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <xQueueGenericSendFromISR+0x44>
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800282a:	bf00      	nop
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d103      	bne.n	800283e <xQueueGenericSendFromISR+0x6e>
 8002836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <xQueueGenericSendFromISR+0x72>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <xQueueGenericSendFromISR+0x74>
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10b      	bne.n	8002860 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8002848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800284c:	f383 8811 	msr	BASEPRI, r3
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	623b      	str	r3, [r7, #32]
    }
 800285a:	bf00      	nop
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002860:	f001 fec4 	bl	80045ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002864:	f3ef 8211 	mrs	r2, BASEPRI
 8002868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	61fa      	str	r2, [r7, #28]
 800287a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800287c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800287e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002888:	429a      	cmp	r2, r3
 800288a:	d302      	bcc.n	8002892 <xQueueGenericSendFromISR+0xc2>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d149      	bne.n	8002926 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002894:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002898:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800289c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800289e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80028a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 fde5 	bl	8006474 <SEGGER_SYSVIEW_ShrinkId>
 80028aa:	4601      	mov	r1, r0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	461a      	mov	r2, r3
 80028b0:	2060      	movs	r0, #96	@ 0x60
 80028b2:	f002 fff9 	bl	80058a8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80028bc:	f000 f952 	bl	8002b64 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80028c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d112      	bne.n	80028f0 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d026      	beq.n	8002920 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d4:	3324      	adds	r3, #36	@ 0x24
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fe90 	bl	80035fc <xTaskRemoveFromEventList>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01e      	beq.n	8002920 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d01b      	beq.n	8002920 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e017      	b.n	8002920 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80028f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80028f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80028f6:	d10b      	bne.n	8002910 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	617b      	str	r3, [r7, #20]
    }
 800290a:	bf00      	nop
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002910:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002914:	3301      	adds	r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	b25a      	sxtb	r2, r3
 800291a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800291c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8002920:	2301      	movs	r3, #1
 8002922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8002924:	e00b      	b.n	800293e <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002928:	4618      	mov	r0, r3
 800292a:	f003 fda3 	bl	8006474 <SEGGER_SYSVIEW_ShrinkId>
 800292e:	4601      	mov	r1, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	461a      	mov	r2, r3
 8002934:	2060      	movs	r0, #96	@ 0x60
 8002936:	f002 ffb7 	bl	80058a8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800293a:	2300      	movs	r3, #0
 800293c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800293e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002940:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002948:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800294a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800294c:	4618      	mov	r0, r3
 800294e:	3740      	adds	r7, #64	@ 0x40
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b08f      	sub	sp, #60	@ 0x3c
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002960:	2300      	movs	r3, #0
 8002962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10b      	bne.n	8002986 <xQueueReceive+0x32>
        __asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	623b      	str	r3, [r7, #32]
    }
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	e7fd      	b.n	8002982 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d103      	bne.n	8002994 <xQueueReceive+0x40>
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <xQueueReceive+0x44>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <xQueueReceive+0x46>
 8002998:	2300      	movs	r3, #0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10b      	bne.n	80029b6 <xQueueReceive+0x62>
        __asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	61fb      	str	r3, [r7, #28]
    }
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	e7fd      	b.n	80029b2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029b6:	f000 ffbf 	bl	8003938 <xTaskGetSchedulerState>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <xQueueReceive+0x72>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <xQueueReceive+0x76>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <xQueueReceive+0x78>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <xQueueReceive+0x94>
        __asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	61bb      	str	r3, [r7, #24]
    }
 80029e2:	bf00      	nop
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80029e8:	f001 fd10 	bl	800440c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d024      	beq.n	8002a42 <xQueueReceive+0xee>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029fc:	f000 f91c 	bl	8002c38 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 fd36 	bl	8006474 <SEGGER_SYSVIEW_ShrinkId>
 8002a08:	4604      	mov	r4, r0
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f003 fd32 	bl	8006474 <SEGGER_SYSVIEW_ShrinkId>
 8002a10:	4602      	mov	r2, r0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2101      	movs	r1, #1
 8002a16:	9100      	str	r1, [sp, #0]
 8002a18:	4621      	mov	r1, r4
 8002a1a:	205c      	movs	r0, #92	@ 0x5c
 8002a1c:	f003 f814 	bl	8005a48 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	1e5a      	subs	r2, r3, #1
 8002a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a26:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <xQueueReceive+0xe6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a32:	3310      	adds	r3, #16
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fde1 	bl	80035fc <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002a3a:	f001 fd19 	bl	8004470 <vPortExitCritical>
                return pdPASS;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e08a      	b.n	8002b58 <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d113      	bne.n	8002a70 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a48:	f001 fd12 	bl	8004470 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fd10 	bl	8006474 <SEGGER_SYSVIEW_ShrinkId>
 8002a54:	4604      	mov	r4, r0
 8002a56:	2000      	movs	r0, #0
 8002a58:	f003 fd0c 	bl	8006474 <SEGGER_SYSVIEW_ShrinkId>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2101      	movs	r1, #1
 8002a62:	9100      	str	r1, [sp, #0]
 8002a64:	4621      	mov	r1, r4
 8002a66:	205c      	movs	r0, #92	@ 0x5c
 8002a68:	f002 ffee 	bl	8005a48 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e073      	b.n	8002b58 <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <xQueueReceive+0x130>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a76:	f107 0310 	add.w	r3, r7, #16
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fe26 	bl	80036cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a84:	f001 fcf4 	bl	8004470 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002a88:	f000 fb9a 	bl	80031c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a8c:	f001 fcbe 	bl	800440c <vPortEnterCritical>
 8002a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a96:	b25b      	sxtb	r3, r3
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d103      	bne.n	8002aa6 <xQueueReceive+0x152>
 8002a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab2:	d103      	bne.n	8002abc <xQueueReceive+0x168>
 8002ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002abc:	f001 fcd8 	bl	8004470 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ac0:	1d3a      	adds	r2, r7, #4
 8002ac2:	f107 0310 	add.w	r3, r7, #16
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fe15 	bl	80036f8 <xTaskCheckForTimeOut>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d124      	bne.n	8002b1e <xQueueReceive+0x1ca>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ad4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ad6:	f000 f927 	bl	8002d28 <prvIsQueueEmpty>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d018      	beq.n	8002b12 <xQueueReceive+0x1be>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae2:	3324      	adds	r3, #36	@ 0x24
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fd31 	bl	8003550 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002af0:	f000 f8c8 	bl	8002c84 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002af4:	f000 fb72 	bl	80031dc <xTaskResumeAll>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f47f af74 	bne.w	80029e8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002b00:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <xQueueReceive+0x20c>)
 8002b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	e76a      	b.n	80029e8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b14:	f000 f8b6 	bl	8002c84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b18:	f000 fb60 	bl	80031dc <xTaskResumeAll>
 8002b1c:	e764      	b.n	80029e8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b20:	f000 f8b0 	bl	8002c84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b24:	f000 fb5a 	bl	80031dc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b2a:	f000 f8fd 	bl	8002d28 <prvIsQueueEmpty>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f43f af59 	beq.w	80029e8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f003 fc9b 	bl	8006474 <SEGGER_SYSVIEW_ShrinkId>
 8002b3e:	4604      	mov	r4, r0
 8002b40:	2000      	movs	r0, #0
 8002b42:	f003 fc97 	bl	8006474 <SEGGER_SYSVIEW_ShrinkId>
 8002b46:	4602      	mov	r2, r0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	9100      	str	r1, [sp, #0]
 8002b4e:	4621      	mov	r1, r4
 8002b50:	205c      	movs	r0, #92	@ 0x5c
 8002b52:	f002 ff79 	bl	8005a48 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002b56:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3734      	adds	r7, #52	@ 0x34
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd90      	pop	{r4, r7, pc}
 8002b60:	e000ed04 	.word	0xe000ed04

08002b64 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10d      	bne.n	8002b9e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d14d      	bne.n	8002c26 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fef0 	bl	8003974 <xTaskPriorityDisinherit>
 8002b94:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	e043      	b.n	8002c26 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d119      	bne.n	8002bd8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6858      	ldr	r0, [r3, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	461a      	mov	r2, r3
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	f004 f825 	bl	8006bfe <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	441a      	add	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d32b      	bcc.n	8002c26 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	e026      	b.n	8002c26 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	68d8      	ldr	r0, [r3, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	461a      	mov	r2, r3
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	f004 f80b 	bl	8006bfe <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	425b      	negs	r3, r3
 8002bf2:	441a      	add	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d207      	bcs.n	8002c14 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	425b      	negs	r3, r3
 8002c0e:	441a      	add	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d105      	bne.n	8002c26 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002c2e:	697b      	ldr	r3, [r7, #20]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d018      	beq.n	8002c7c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	441a      	add	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d303      	bcc.n	8002c6c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68d9      	ldr	r1, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	461a      	mov	r2, r3
 8002c76:	6838      	ldr	r0, [r7, #0]
 8002c78:	f003 ffc1 	bl	8006bfe <memcpy>
    }
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002c8c:	f001 fbbe 	bl	800440c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c96:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c98:	e011      	b.n	8002cbe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d012      	beq.n	8002cc8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3324      	adds	r3, #36	@ 0x24
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fca8 	bl	80035fc <xTaskRemoveFromEventList>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002cb2:	f000 fd89 	bl	80037c8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	dce9      	bgt.n	8002c9a <prvUnlockQueue+0x16>
 8002cc6:	e000      	b.n	8002cca <prvUnlockQueue+0x46>
                        break;
 8002cc8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	22ff      	movs	r2, #255	@ 0xff
 8002cce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002cd2:	f001 fbcd 	bl	8004470 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002cd6:	f001 fb99 	bl	800440c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ce0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ce2:	e011      	b.n	8002d08 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d012      	beq.n	8002d12 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3310      	adds	r3, #16
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fc83 	bl	80035fc <xTaskRemoveFromEventList>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002cfc:	f000 fd64 	bl	80037c8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d00:	7bbb      	ldrb	r3, [r7, #14]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	dce9      	bgt.n	8002ce4 <prvUnlockQueue+0x60>
 8002d10:	e000      	b.n	8002d14 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d12:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	22ff      	movs	r2, #255	@ 0xff
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002d1c:	f001 fba8 	bl	8004470 <vPortExitCritical>
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d30:	f001 fb6c 	bl	800440c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e001      	b.n	8002d46 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d46:	f001 fb93 	bl	8004470 <vPortExitCritical>

    return xReturn;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d5c:	f001 fb56 	bl	800440c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d102      	bne.n	8002d72 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e001      	b.n	8002d76 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d76:	f001 fb7b 	bl	8004470 <vPortExitCritical>

    return xReturn;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	e01e      	b.n	8002dd2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d94:	4a13      	ldr	r2, [pc, #76]	@ (8002de4 <vQueueAddToRegistry+0x60>)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d115      	bne.n	8002dcc <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002da0:	4910      	ldr	r1, [pc, #64]	@ (8002de4 <vQueueAddToRegistry+0x60>)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002daa:	4a0e      	ldr	r2, [pc, #56]	@ (8002de4 <vQueueAddToRegistry+0x60>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fb5b 	bl	8006474 <SEGGER_SYSVIEW_ShrinkId>
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2071      	movs	r0, #113	@ 0x71
 8002dc6:	f002 fd6f 	bl	80058a8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002dca:	e006      	b.n	8002dda <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b07      	cmp	r3, #7
 8002dd6:	d9dd      	bls.n	8002d94 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200000d4 	.word	0x200000d4

08002de8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002df8:	f001 fb08 	bl	800440c <vPortEnterCritical>
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e02:	b25b      	sxtb	r3, r3
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d103      	bne.n	8002e12 <vQueueWaitForMessageRestricted+0x2a>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e18:	b25b      	sxtb	r3, r3
 8002e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1e:	d103      	bne.n	8002e28 <vQueueWaitForMessageRestricted+0x40>
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e28:	f001 fb22 	bl	8004470 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d106      	bne.n	8002e42 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3324      	adds	r3, #36	@ 0x24
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fbad 	bl	800359c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f7ff ff1e 	bl	8002c84 <prvUnlockQueue>
    }
 8002e48:	bf00      	nop
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08c      	sub	sp, #48	@ 0x30
 8002e54:	af04      	add	r7, sp, #16
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 fc03 	bl	8004670 <pvPortMalloc>
 8002e6a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00e      	beq.n	8002e90 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e72:	2058      	movs	r0, #88	@ 0x58
 8002e74:	f001 fbfc 	bl	8004670 <pvPortMalloc>
 8002e78:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e86:	e005      	b.n	8002e94 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002e88:	6978      	ldr	r0, [r7, #20]
 8002e8a:	f001 fcd3 	bl	8004834 <vPortFree>
 8002e8e:	e001      	b.n	8002e94 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d013      	beq.n	8002ec2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e9a:	88fa      	ldrh	r2, [r7, #6]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	9303      	str	r3, [sp, #12]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	9302      	str	r3, [sp, #8]
 8002ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f80e 	bl	8002ed2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002eb6:	69f8      	ldr	r0, [r7, #28]
 8002eb8:	f000 f8a2 	bl	8003000 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	e002      	b.n	8002ec8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
    }
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b088      	sub	sp, #32
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	21a5      	movs	r1, #165	@ 0xa5
 8002eec:	f003 fe24 	bl	8006b38 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002efa:	3b01      	subs	r3, #1
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f023 0307 	bic.w	r3, r3, #7
 8002f08:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	617b      	str	r3, [r7, #20]
    }
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01f      	beq.n	8002f72 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e012      	b.n	8002f5e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	7819      	ldrb	r1, [r3, #0]
 8002f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	4413      	add	r3, r2
 8002f46:	3334      	adds	r3, #52	@ 0x34
 8002f48:	460a      	mov	r2, r1
 8002f4a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	4413      	add	r3, r2
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	2b09      	cmp	r3, #9
 8002f62:	d9e9      	bls.n	8002f38 <prvInitialiseNewTask+0x66>
 8002f64:	e000      	b.n	8002f68 <prvInitialiseNewTask+0x96>
            {
                break;
 8002f66:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002f70:	e003      	b.n	8002f7a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d901      	bls.n	8002f84 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f80:	2304      	movs	r3, #4
 8002f82:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f88:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f8e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	2200      	movs	r2, #0
 8002f94:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	3304      	adds	r3, #4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff f98a 	bl	80022b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa2:	3318      	adds	r3, #24
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff f985 	bl	80022b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb2:	f1c3 0205 	rsb	r2, r3, #5
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fbe:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc2:	3350      	adds	r3, #80	@ 0x50
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 fdb5 	bl	8006b38 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	3354      	adds	r3, #84	@ 0x54
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 fdae 	bl	8006b38 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	69b8      	ldr	r0, [r7, #24]
 8002fe2:	f001 f8df 	bl	80041a4 <pxPortInitialiseStack>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fea:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ff6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ff8:	bf00      	nop
 8002ffa:	3720      	adds	r7, #32
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af02      	add	r7, sp, #8
 8003006:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003008:	f001 fa00 	bl	800440c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800300c:	4b35      	ldr	r3, [pc, #212]	@ (80030e4 <prvAddNewTaskToReadyList+0xe4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	4a34      	ldr	r2, [pc, #208]	@ (80030e4 <prvAddNewTaskToReadyList+0xe4>)
 8003014:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003016:	4b34      	ldr	r3, [pc, #208]	@ (80030e8 <prvAddNewTaskToReadyList+0xe8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800301e:	4a32      	ldr	r2, [pc, #200]	@ (80030e8 <prvAddNewTaskToReadyList+0xe8>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003024:	4b2f      	ldr	r3, [pc, #188]	@ (80030e4 <prvAddNewTaskToReadyList+0xe4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d110      	bne.n	800304e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800302c:	f000 fbea 	bl	8003804 <prvInitialiseTaskLists>
 8003030:	e00d      	b.n	800304e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003032:	4b2e      	ldr	r3, [pc, #184]	@ (80030ec <prvAddNewTaskToReadyList+0xec>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800303a:	4b2b      	ldr	r3, [pc, #172]	@ (80030e8 <prvAddNewTaskToReadyList+0xe8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	429a      	cmp	r2, r3
 8003046:	d802      	bhi.n	800304e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003048:	4a27      	ldr	r2, [pc, #156]	@ (80030e8 <prvAddNewTaskToReadyList+0xe8>)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800304e:	4b28      	ldr	r3, [pc, #160]	@ (80030f0 <prvAddNewTaskToReadyList+0xf0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3301      	adds	r3, #1
 8003054:	4a26      	ldr	r2, [pc, #152]	@ (80030f0 <prvAddNewTaskToReadyList+0xf0>)
 8003056:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003058:	4b25      	ldr	r3, [pc, #148]	@ (80030f0 <prvAddNewTaskToReadyList+0xf0>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d016      	beq.n	8003094 <prvAddNewTaskToReadyList+0x94>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4618      	mov	r0, r3
 800306a:	f003 f8dd 	bl	8006228 <SEGGER_SYSVIEW_OnTaskCreate>
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	461d      	mov	r5, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	461c      	mov	r4, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	1ae3      	subs	r3, r4, r3
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	462b      	mov	r3, r5
 8003090:	f001 fda0 	bl	8004bd4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4618      	mov	r0, r3
 8003098:	f003 f94a 	bl	8006330 <SEGGER_SYSVIEW_OnTaskStartReady>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a0:	2201      	movs	r2, #1
 80030a2:	409a      	lsls	r2, r3
 80030a4:	4b13      	ldr	r3, [pc, #76]	@ (80030f4 <prvAddNewTaskToReadyList+0xf4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	4a12      	ldr	r2, [pc, #72]	@ (80030f4 <prvAddNewTaskToReadyList+0xf4>)
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4a0f      	ldr	r2, [pc, #60]	@ (80030f8 <prvAddNewTaskToReadyList+0xf8>)
 80030bc:	441a      	add	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	4610      	mov	r0, r2
 80030c6:	f7ff f902 	bl	80022ce <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80030ca:	f001 f9d1 	bl	8004470 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80030ce:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <prvAddNewTaskToReadyList+0xec>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030d6:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <prvAddNewTaskToReadyList+0xe8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bdb0      	pop	{r4, r5, r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200001ec 	.word	0x200001ec
 80030e8:	20000114 	.word	0x20000114
 80030ec:	200001f8 	.word	0x200001f8
 80030f0:	20000208 	.word	0x20000208
 80030f4:	200001f4 	.word	0x200001f4
 80030f8:	20000118 	.word	0x20000118

080030fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003102:	4b27      	ldr	r3, [pc, #156]	@ (80031a0 <vTaskStartScheduler+0xa4>)
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2300      	movs	r3, #0
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	2282      	movs	r2, #130	@ 0x82
 800310e:	4925      	ldr	r1, [pc, #148]	@ (80031a4 <vTaskStartScheduler+0xa8>)
 8003110:	4825      	ldr	r0, [pc, #148]	@ (80031a8 <vTaskStartScheduler+0xac>)
 8003112:	f7ff fe9d 	bl	8002e50 <xTaskCreate>
 8003116:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800311e:	f000 fd23 	bl	8003b68 <xTimerCreateTimerTask>
 8003122:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d124      	bne.n	8003174 <vTaskStartScheduler+0x78>
        __asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	60bb      	str	r3, [r7, #8]
    }
 800313c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800313e:	4b1b      	ldr	r3, [pc, #108]	@ (80031ac <vTaskStartScheduler+0xb0>)
 8003140:	f04f 32ff 	mov.w	r2, #4294967295
 8003144:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003146:	4b1a      	ldr	r3, [pc, #104]	@ (80031b0 <vTaskStartScheduler+0xb4>)
 8003148:	2201      	movs	r2, #1
 800314a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800314c:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <vTaskStartScheduler+0xb8>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003152:	4b19      	ldr	r3, [pc, #100]	@ (80031b8 <vTaskStartScheduler+0xbc>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b12      	ldr	r3, [pc, #72]	@ (80031a0 <vTaskStartScheduler+0xa4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d102      	bne.n	8003164 <vTaskStartScheduler+0x68>
 800315e:	f003 f847 	bl	80061f0 <SEGGER_SYSVIEW_OnIdle>
 8003162:	e004      	b.n	800316e <vTaskStartScheduler+0x72>
 8003164:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <vTaskStartScheduler+0xbc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f003 f89f 	bl	80062ac <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800316e:	f001 f8a9 	bl	80042c4 <xPortStartScheduler>
 8003172:	e00f      	b.n	8003194 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d10b      	bne.n	8003194 <vTaskStartScheduler+0x98>
        __asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	607b      	str	r3, [r7, #4]
    }
 800318e:	bf00      	nop
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003194:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <vTaskStartScheduler+0xc0>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000210 	.word	0x20000210
 80031a4:	08007100 	.word	0x08007100
 80031a8:	080037e1 	.word	0x080037e1
 80031ac:	2000020c 	.word	0x2000020c
 80031b0:	200001f8 	.word	0x200001f8
 80031b4:	200001f0 	.word	0x200001f0
 80031b8:	20000114 	.word	0x20000114
 80031bc:	08007208 	.word	0x08007208

080031c0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80031c4:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <vTaskSuspendAll+0x18>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	4a03      	ldr	r2, [pc, #12]	@ (80031d8 <vTaskSuspendAll+0x18>)
 80031cc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	20000214 	.word	0x20000214

080031dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80031ea:	4b3e      	ldr	r3, [pc, #248]	@ (80032e4 <xTaskResumeAll+0x108>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10b      	bne.n	800320a <xTaskResumeAll+0x2e>
        __asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	603b      	str	r3, [r7, #0]
    }
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	e7fd      	b.n	8003206 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800320a:	f001 f8ff 	bl	800440c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800320e:	4b35      	ldr	r3, [pc, #212]	@ (80032e4 <xTaskResumeAll+0x108>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3b01      	subs	r3, #1
 8003214:	4a33      	ldr	r2, [pc, #204]	@ (80032e4 <xTaskResumeAll+0x108>)
 8003216:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003218:	4b32      	ldr	r3, [pc, #200]	@ (80032e4 <xTaskResumeAll+0x108>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d159      	bne.n	80032d4 <xTaskResumeAll+0xf8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003220:	4b31      	ldr	r3, [pc, #196]	@ (80032e8 <xTaskResumeAll+0x10c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d055      	beq.n	80032d4 <xTaskResumeAll+0xf8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003228:	e032      	b.n	8003290 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800322a:	4b30      	ldr	r3, [pc, #192]	@ (80032ec <xTaskResumeAll+0x110>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3318      	adds	r3, #24
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff f8a6 	bl	8002388 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3304      	adds	r3, #4
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff f8a1 	bl	8002388 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4618      	mov	r0, r3
 800324a:	f003 f871 	bl	8006330 <SEGGER_SYSVIEW_OnTaskStartReady>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003252:	2201      	movs	r2, #1
 8003254:	409a      	lsls	r2, r3
 8003256:	4b26      	ldr	r3, [pc, #152]	@ (80032f0 <xTaskResumeAll+0x114>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	4a24      	ldr	r2, [pc, #144]	@ (80032f0 <xTaskResumeAll+0x114>)
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4a21      	ldr	r2, [pc, #132]	@ (80032f4 <xTaskResumeAll+0x118>)
 800326e:	441a      	add	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3304      	adds	r3, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f7ff f829 	bl	80022ce <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003280:	4b1d      	ldr	r3, [pc, #116]	@ (80032f8 <xTaskResumeAll+0x11c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003286:	429a      	cmp	r2, r3
 8003288:	d302      	bcc.n	8003290 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800328a:	4b1c      	ldr	r3, [pc, #112]	@ (80032fc <xTaskResumeAll+0x120>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003290:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <xTaskResumeAll+0x110>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1c8      	bne.n	800322a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800329e:	f000 fb2f 	bl	8003900 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032a2:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <xTaskResumeAll+0x124>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d010      	beq.n	80032d0 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80032ae:	f000 f84b 	bl	8003348 <xTaskIncrementTick>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 80032b8:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <xTaskResumeAll+0x120>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f1      	bne.n	80032ae <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80032ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <xTaskResumeAll+0x124>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80032d0:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <xTaskResumeAll+0x120>)
 80032d2:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80032d4:	f001 f8cc 	bl	8004470 <vPortExitCritical>

    return xAlreadyYielded;
 80032d8:	687b      	ldr	r3, [r7, #4]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000214 	.word	0x20000214
 80032e8:	200001ec 	.word	0x200001ec
 80032ec:	200001ac 	.word	0x200001ac
 80032f0:	200001f4 	.word	0x200001f4
 80032f4:	20000118 	.word	0x20000118
 80032f8:	20000114 	.word	0x20000114
 80032fc:	20000200 	.word	0x20000200
 8003300:	200001fc 	.word	0x200001fc

08003304 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800330a:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <xTaskGetTickCount+0x1c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003310:	687b      	ldr	r3, [r7, #4]
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	200001f0 	.word	0x200001f0

08003324 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800332a:	f001 f95f 	bl	80045ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003332:	4b04      	ldr	r3, [pc, #16]	@ (8003344 <xTaskGetTickCountFromISR+0x20>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003338:	683b      	ldr	r3, [r7, #0]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	200001f0 	.word	0x200001f0

08003348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003352:	4b41      	ldr	r3, [pc, #260]	@ (8003458 <xTaskIncrementTick+0x110>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d174      	bne.n	8003444 <xTaskIncrementTick+0xfc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800335a:	4b40      	ldr	r3, [pc, #256]	@ (800345c <xTaskIncrementTick+0x114>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3301      	adds	r3, #1
 8003360:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003362:	4a3e      	ldr	r2, [pc, #248]	@ (800345c <xTaskIncrementTick+0x114>)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d121      	bne.n	80033b2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800336e:	4b3c      	ldr	r3, [pc, #240]	@ (8003460 <xTaskIncrementTick+0x118>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <xTaskIncrementTick+0x48>
        __asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	603b      	str	r3, [r7, #0]
    }
 800338a:	bf00      	nop
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <xTaskIncrementTick+0x44>
 8003390:	4b33      	ldr	r3, [pc, #204]	@ (8003460 <xTaskIncrementTick+0x118>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	4b33      	ldr	r3, [pc, #204]	@ (8003464 <xTaskIncrementTick+0x11c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a31      	ldr	r2, [pc, #196]	@ (8003460 <xTaskIncrementTick+0x118>)
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	4a31      	ldr	r2, [pc, #196]	@ (8003464 <xTaskIncrementTick+0x11c>)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	4b30      	ldr	r3, [pc, #192]	@ (8003468 <xTaskIncrementTick+0x120>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003468 <xTaskIncrementTick+0x120>)
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	f000 faa7 	bl	8003900 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80033b2:	4b2e      	ldr	r3, [pc, #184]	@ (800346c <xTaskIncrementTick+0x124>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d348      	bcc.n	800344e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033bc:	4b28      	ldr	r3, [pc, #160]	@ (8003460 <xTaskIncrementTick+0x118>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c6:	4b29      	ldr	r3, [pc, #164]	@ (800346c <xTaskIncrementTick+0x124>)
 80033c8:	f04f 32ff 	mov.w	r2, #4294967295
 80033cc:	601a      	str	r2, [r3, #0]
                    break;
 80033ce:	e03e      	b.n	800344e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033d0:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <xTaskIncrementTick+0x118>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d203      	bcs.n	80033f0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80033e8:	4a20      	ldr	r2, [pc, #128]	@ (800346c <xTaskIncrementTick+0x124>)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033ee:	e02e      	b.n	800344e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe ffc7 	bl	8002388 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3318      	adds	r3, #24
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe ffbe 	bl	8002388 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4618      	mov	r0, r3
 8003410:	f002 ff8e 	bl	8006330 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	2201      	movs	r2, #1
 800341a:	409a      	lsls	r2, r3
 800341c:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <xTaskIncrementTick+0x128>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4313      	orrs	r3, r2
 8003422:	4a13      	ldr	r2, [pc, #76]	@ (8003470 <xTaskIncrementTick+0x128>)
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4a10      	ldr	r2, [pc, #64]	@ (8003474 <xTaskIncrementTick+0x12c>)
 8003434:	441a      	add	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3304      	adds	r3, #4
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f7fe ff46 	bl	80022ce <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003442:	e7bb      	b.n	80033bc <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003444:	4b0c      	ldr	r3, [pc, #48]	@ (8003478 <xTaskIncrementTick+0x130>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3301      	adds	r3, #1
 800344a:	4a0b      	ldr	r2, [pc, #44]	@ (8003478 <xTaskIncrementTick+0x130>)
 800344c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800344e:	697b      	ldr	r3, [r7, #20]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000214 	.word	0x20000214
 800345c:	200001f0 	.word	0x200001f0
 8003460:	200001a4 	.word	0x200001a4
 8003464:	200001a8 	.word	0x200001a8
 8003468:	20000204 	.word	0x20000204
 800346c:	2000020c 	.word	0x2000020c
 8003470:	200001f4 	.word	0x200001f4
 8003474:	20000118 	.word	0x20000118
 8003478:	200001fc 	.word	0x200001fc

0800347c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003482:	4b2d      	ldr	r3, [pc, #180]	@ (8003538 <vTaskSwitchContext+0xbc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800348a:	4b2c      	ldr	r3, [pc, #176]	@ (800353c <vTaskSwitchContext+0xc0>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003490:	e04e      	b.n	8003530 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003492:	4b2a      	ldr	r3, [pc, #168]	@ (800353c <vTaskSwitchContext+0xc0>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003498:	4b29      	ldr	r3, [pc, #164]	@ (8003540 <vTaskSwitchContext+0xc4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80034a6:	7afb      	ldrb	r3, [r7, #11]
 80034a8:	f1c3 031f 	rsb	r3, r3, #31
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	4925      	ldr	r1, [pc, #148]	@ (8003544 <vTaskSwitchContext+0xc8>)
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10b      	bne.n	80034da <vTaskSwitchContext+0x5e>
        __asm volatile
 80034c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	607b      	str	r3, [r7, #4]
    }
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop
 80034d8:	e7fd      	b.n	80034d6 <vTaskSwitchContext+0x5a>
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4a17      	ldr	r2, [pc, #92]	@ (8003544 <vTaskSwitchContext+0xc8>)
 80034e6:	4413      	add	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	3308      	adds	r3, #8
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d104      	bne.n	800350a <vTaskSwitchContext+0x8e>
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a0d      	ldr	r2, [pc, #52]	@ (8003548 <vTaskSwitchContext+0xcc>)
 8003512:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003514:	4b0c      	ldr	r3, [pc, #48]	@ (8003548 <vTaskSwitchContext+0xcc>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b0c      	ldr	r3, [pc, #48]	@ (800354c <vTaskSwitchContext+0xd0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d102      	bne.n	8003526 <vTaskSwitchContext+0xaa>
 8003520:	f002 fe66 	bl	80061f0 <SEGGER_SYSVIEW_OnIdle>
}
 8003524:	e004      	b.n	8003530 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003526:	4b08      	ldr	r3, [pc, #32]	@ (8003548 <vTaskSwitchContext+0xcc>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f002 febe 	bl	80062ac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003530:	bf00      	nop
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000214 	.word	0x20000214
 800353c:	20000200 	.word	0x20000200
 8003540:	200001f4 	.word	0x200001f4
 8003544:	20000118 	.word	0x20000118
 8003548:	20000114 	.word	0x20000114
 800354c:	20000210 	.word	0x20000210

08003550 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	60fb      	str	r3, [r7, #12]
    }
 8003572:	bf00      	nop
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003578:	4b07      	ldr	r3, [pc, #28]	@ (8003598 <vTaskPlaceOnEventList+0x48>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3318      	adds	r3, #24
 800357e:	4619      	mov	r1, r3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7fe fec8 	bl	8002316 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003586:	2101      	movs	r1, #1
 8003588:	6838      	ldr	r0, [r7, #0]
 800358a:	f000 fa75 	bl	8003a78 <prvAddCurrentTaskToDelayedList>
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000114 	.word	0x20000114

0800359c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10b      	bne.n	80035c6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	617b      	str	r3, [r7, #20]
    }
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	e7fd      	b.n	80035c2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035c6:	4b0c      	ldr	r3, [pc, #48]	@ (80035f8 <vTaskPlaceOnEventListRestricted+0x5c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3318      	adds	r3, #24
 80035cc:	4619      	mov	r1, r3
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7fe fe7d 	bl	80022ce <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80035e0:	2024      	movs	r0, #36	@ 0x24
 80035e2:	f002 f907 	bl	80057f4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	68b8      	ldr	r0, [r7, #8]
 80035ea:	f000 fa45 	bl	8003a78 <prvAddCurrentTaskToDelayedList>
    }
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000114 	.word	0x20000114

080035fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10b      	bne.n	800362a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	60fb      	str	r3, [r7, #12]
    }
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	e7fd      	b.n	8003626 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	3318      	adds	r3, #24
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe feaa 	bl	8002388 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003634:	4b1f      	ldr	r3, [pc, #124]	@ (80036b4 <xTaskRemoveFromEventList+0xb8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d120      	bne.n	800367e <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	3304      	adds	r3, #4
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe fea1 	bl	8002388 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4618      	mov	r0, r3
 800364a:	f002 fe71 	bl	8006330 <SEGGER_SYSVIEW_OnTaskStartReady>
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003652:	2201      	movs	r2, #1
 8003654:	409a      	lsls	r2, r3
 8003656:	4b18      	ldr	r3, [pc, #96]	@ (80036b8 <xTaskRemoveFromEventList+0xbc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	4a16      	ldr	r2, [pc, #88]	@ (80036b8 <xTaskRemoveFromEventList+0xbc>)
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4a13      	ldr	r2, [pc, #76]	@ (80036bc <xTaskRemoveFromEventList+0xc0>)
 800366e:	441a      	add	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	3304      	adds	r3, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4610      	mov	r0, r2
 8003678:	f7fe fe29 	bl	80022ce <vListInsertEnd>
 800367c:	e005      	b.n	800368a <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	3318      	adds	r3, #24
 8003682:	4619      	mov	r1, r3
 8003684:	480e      	ldr	r0, [pc, #56]	@ (80036c0 <xTaskRemoveFromEventList+0xc4>)
 8003686:	f7fe fe22 	bl	80022ce <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368e:	4b0d      	ldr	r3, [pc, #52]	@ (80036c4 <xTaskRemoveFromEventList+0xc8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	429a      	cmp	r2, r3
 8003696:	d905      	bls.n	80036a4 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003698:	2301      	movs	r3, #1
 800369a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800369c:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <xTaskRemoveFromEventList+0xcc>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e001      	b.n	80036a8 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80036a8:	697b      	ldr	r3, [r7, #20]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000214 	.word	0x20000214
 80036b8:	200001f4 	.word	0x200001f4
 80036bc:	20000118 	.word	0x20000118
 80036c0:	200001ac 	.word	0x200001ac
 80036c4:	20000114 	.word	0x20000114
 80036c8:	20000200 	.word	0x20000200

080036cc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <vTaskInternalSetTimeOutState+0x24>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80036dc:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <vTaskInternalSetTimeOutState+0x28>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	605a      	str	r2, [r3, #4]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	20000204 	.word	0x20000204
 80036f4:	200001f0 	.word	0x200001f0

080036f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	613b      	str	r3, [r7, #16]
    }
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10b      	bne.n	800373e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	60fb      	str	r3, [r7, #12]
    }
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	e7fd      	b.n	800373a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800373e:	f000 fe65 	bl	800440c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003742:	4b1f      	ldr	r3, [pc, #124]	@ (80037c0 <xTaskCheckForTimeOut+0xc8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d102      	bne.n	8003762 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	e026      	b.n	80037b0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4b17      	ldr	r3, [pc, #92]	@ (80037c4 <xTaskCheckForTimeOut+0xcc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d00a      	beq.n	8003784 <xTaskCheckForTimeOut+0x8c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	429a      	cmp	r2, r3
 8003776:	d305      	bcc.n	8003784 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003778:	2301      	movs	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e015      	b.n	80037b0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	429a      	cmp	r2, r3
 800378c:	d20b      	bcs.n	80037a6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	1ad2      	subs	r2, r2, r3
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ff96 	bl	80036cc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	e004      	b.n	80037b0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80037ac:	2301      	movs	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80037b0:	f000 fe5e 	bl	8004470 <vPortExitCritical>

    return xReturn;
 80037b4:	69fb      	ldr	r3, [r7, #28]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3720      	adds	r7, #32
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	200001f0 	.word	0x200001f0
 80037c4:	20000204 	.word	0x20000204

080037c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80037cc:	4b03      	ldr	r3, [pc, #12]	@ (80037dc <vTaskMissedYield+0x14>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20000200 	.word	0x20000200

080037e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80037e8:	f000 f84c 	bl	8003884 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80037ec:	4b04      	ldr	r3, [pc, #16]	@ (8003800 <prvIdleTask+0x20>)
 80037ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80037fc:	bf00      	nop
 80037fe:	e7f3      	b.n	80037e8 <prvIdleTask+0x8>
 8003800:	e000ed04 	.word	0xe000ed04

08003804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800380a:	2300      	movs	r3, #0
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	e00c      	b.n	800382a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4a12      	ldr	r2, [pc, #72]	@ (8003864 <prvInitialiseTaskLists+0x60>)
 800381c:	4413      	add	r3, r2
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fd28 	bl	8002274 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3301      	adds	r3, #1
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d9ef      	bls.n	8003810 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003830:	480d      	ldr	r0, [pc, #52]	@ (8003868 <prvInitialiseTaskLists+0x64>)
 8003832:	f7fe fd1f 	bl	8002274 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003836:	480d      	ldr	r0, [pc, #52]	@ (800386c <prvInitialiseTaskLists+0x68>)
 8003838:	f7fe fd1c 	bl	8002274 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800383c:	480c      	ldr	r0, [pc, #48]	@ (8003870 <prvInitialiseTaskLists+0x6c>)
 800383e:	f7fe fd19 	bl	8002274 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003842:	480c      	ldr	r0, [pc, #48]	@ (8003874 <prvInitialiseTaskLists+0x70>)
 8003844:	f7fe fd16 	bl	8002274 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003848:	480b      	ldr	r0, [pc, #44]	@ (8003878 <prvInitialiseTaskLists+0x74>)
 800384a:	f7fe fd13 	bl	8002274 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800384e:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <prvInitialiseTaskLists+0x78>)
 8003850:	4a05      	ldr	r2, [pc, #20]	@ (8003868 <prvInitialiseTaskLists+0x64>)
 8003852:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <prvInitialiseTaskLists+0x7c>)
 8003856:	4a05      	ldr	r2, [pc, #20]	@ (800386c <prvInitialiseTaskLists+0x68>)
 8003858:	601a      	str	r2, [r3, #0]
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000118 	.word	0x20000118
 8003868:	2000017c 	.word	0x2000017c
 800386c:	20000190 	.word	0x20000190
 8003870:	200001ac 	.word	0x200001ac
 8003874:	200001c0 	.word	0x200001c0
 8003878:	200001d8 	.word	0x200001d8
 800387c:	200001a4 	.word	0x200001a4
 8003880:	200001a8 	.word	0x200001a8

08003884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800388a:	e019      	b.n	80038c0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800388c:	f000 fdbe 	bl	800440c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003890:	4b10      	ldr	r3, [pc, #64]	@ (80038d4 <prvCheckTasksWaitingTermination+0x50>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe fd73 	bl	8002388 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80038a2:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <prvCheckTasksWaitingTermination+0x54>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	4a0b      	ldr	r2, [pc, #44]	@ (80038d8 <prvCheckTasksWaitingTermination+0x54>)
 80038aa:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <prvCheckTasksWaitingTermination+0x58>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	4a0a      	ldr	r2, [pc, #40]	@ (80038dc <prvCheckTasksWaitingTermination+0x58>)
 80038b4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80038b6:	f000 fddb 	bl	8004470 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f810 	bl	80038e0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038c0:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <prvCheckTasksWaitingTermination+0x58>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e1      	bne.n	800388c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80038c8:	bf00      	nop
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200001c0 	.word	0x200001c0
 80038d8:	200001ec 	.word	0x200001ec
 80038dc:	200001d4 	.word	0x200001d4

080038e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 ffa1 	bl	8004834 <vPortFree>
                vPortFree( pxTCB );
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 ff9e 	bl	8004834 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003904:	4b0a      	ldr	r3, [pc, #40]	@ (8003930 <prvResetNextTaskUnblockTime+0x30>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d104      	bne.n	8003918 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800390e:	4b09      	ldr	r3, [pc, #36]	@ (8003934 <prvResetNextTaskUnblockTime+0x34>)
 8003910:	f04f 32ff 	mov.w	r2, #4294967295
 8003914:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003916:	e005      	b.n	8003924 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003918:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <prvResetNextTaskUnblockTime+0x30>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a04      	ldr	r2, [pc, #16]	@ (8003934 <prvResetNextTaskUnblockTime+0x34>)
 8003922:	6013      	str	r3, [r2, #0]
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	200001a4 	.word	0x200001a4
 8003934:	2000020c 	.word	0x2000020c

08003938 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <xTaskGetSchedulerState+0x34>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003946:	2301      	movs	r3, #1
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	e008      	b.n	800395e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800394c:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <xTaskGetSchedulerState+0x38>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003954:	2302      	movs	r3, #2
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	e001      	b.n	800395e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800395e:	687b      	ldr	r3, [r7, #4]
    }
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	200001f8 	.word	0x200001f8
 8003970:	20000214 	.word	0x20000214

08003974 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d06a      	beq.n	8003a60 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800398a:	4b38      	ldr	r3, [pc, #224]	@ (8003a6c <xTaskPriorityDisinherit+0xf8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	429a      	cmp	r2, r3
 8003992:	d00b      	beq.n	80039ac <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	60fb      	str	r3, [r7, #12]
    }
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	e7fd      	b.n	80039a8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	60bb      	str	r3, [r7, #8]
    }
 80039c6:	bf00      	nop
 80039c8:	bf00      	nop
 80039ca:	e7fd      	b.n	80039c8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d0:	1e5a      	subs	r2, r3, #1
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039de:	429a      	cmp	r2, r3
 80039e0:	d03e      	beq.n	8003a60 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d13a      	bne.n	8003a60 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fcca 	bl	8002388 <uxListRemove>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fe:	2201      	movs	r2, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43da      	mvns	r2, r3
 8003a06:	4b1a      	ldr	r3, [pc, #104]	@ (8003a70 <xTaskPriorityDisinherit+0xfc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	4a18      	ldr	r2, [pc, #96]	@ (8003a70 <xTaskPriorityDisinherit+0xfc>)
 8003a0e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4619      	mov	r1, r3
 8003a14:	204a      	movs	r0, #74	@ 0x4a
 8003a16:	f001 ff0b 	bl	8005830 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	f1c3 0205 	rsb	r2, r3, #5
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	2201      	movs	r2, #1
 8003a34:	409a      	lsls	r2, r3
 8003a36:	4b0e      	ldr	r3, [pc, #56]	@ (8003a70 <xTaskPriorityDisinherit+0xfc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003a70 <xTaskPriorityDisinherit+0xfc>)
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4a09      	ldr	r2, [pc, #36]	@ (8003a74 <xTaskPriorityDisinherit+0x100>)
 8003a4e:	441a      	add	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	3304      	adds	r3, #4
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f7fe fc39 	bl	80022ce <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a60:	697b      	ldr	r3, [r7, #20]
    }
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000114 	.word	0x20000114
 8003a70:	200001f4 	.word	0x200001f4
 8003a74:	20000118 	.word	0x20000118

08003a78 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a82:	4b32      	ldr	r3, [pc, #200]	@ (8003b4c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a88:	4b31      	ldr	r3, [pc, #196]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fc7a 	bl	8002388 <uxListRemove>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10b      	bne.n	8003ab2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b54 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4013      	ands	r3, r2
 8003aae:	4a29      	ldr	r2, [pc, #164]	@ (8003b54 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003ab0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d110      	bne.n	8003adc <prvAddCurrentTaskToDelayedList+0x64>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003ac0:	4b23      	ldr	r3, [pc, #140]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	211b      	movs	r1, #27
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f002 fc74 	bl	80063b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003acc:	4b20      	ldr	r3, [pc, #128]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4820      	ldr	r0, [pc, #128]	@ (8003b58 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003ad6:	f7fe fbfa 	bl	80022ce <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003ada:	e032      	b.n	8003b42 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d20f      	bcs.n	8003b14 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003af4:	4b16      	ldr	r3, [pc, #88]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2104      	movs	r1, #4
 8003afa:	4618      	mov	r0, r3
 8003afc:	f002 fc5a 	bl	80063b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b00:	4b16      	ldr	r3, [pc, #88]	@ (8003b5c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	f7fe fc02 	bl	8002316 <vListInsert>
}
 8003b12:	e016      	b.n	8003b42 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003b14:	4b0e      	ldr	r3, [pc, #56]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2104      	movs	r1, #4
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f002 fc4a 	bl	80063b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b20:	4b0f      	ldr	r3, [pc, #60]	@ (8003b60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b0a      	ldr	r3, [pc, #40]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f7fe fbf2 	bl	8002316 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b32:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d202      	bcs.n	8003b42 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b3c:	4a09      	ldr	r2, [pc, #36]	@ (8003b64 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6013      	str	r3, [r2, #0]
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200001f0 	.word	0x200001f0
 8003b50:	20000114 	.word	0x20000114
 8003b54:	200001f4 	.word	0x200001f4
 8003b58:	200001d8 	.word	0x200001d8
 8003b5c:	200001a8 	.word	0x200001a8
 8003b60:	200001a4 	.word	0x200001a4
 8003b64:	2000020c 	.word	0x2000020c

08003b68 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b72:	f000 fae1 	bl	8004138 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b76:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <xTimerCreateTimerTask+0x58>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003b7e:	4b11      	ldr	r3, [pc, #68]	@ (8003bc4 <xTimerCreateTimerTask+0x5c>)
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	2302      	movs	r3, #2
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2300      	movs	r3, #0
 8003b88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b8c:	490e      	ldr	r1, [pc, #56]	@ (8003bc8 <xTimerCreateTimerTask+0x60>)
 8003b8e:	480f      	ldr	r0, [pc, #60]	@ (8003bcc <xTimerCreateTimerTask+0x64>)
 8003b90:	f7ff f95e 	bl	8002e50 <xTaskCreate>
 8003b94:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	603b      	str	r3, [r7, #0]
    }
 8003bae:	bf00      	nop
 8003bb0:	bf00      	nop
 8003bb2:	e7fd      	b.n	8003bb0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003bb4:	687b      	ldr	r3, [r7, #4]
    }
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000248 	.word	0x20000248
 8003bc4:	2000024c 	.word	0x2000024c
 8003bc8:	08007108 	.word	0x08007108
 8003bcc:	08003d09 	.word	0x08003d09

08003bd0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	@ 0x28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10b      	bne.n	8003c00 <xTimerGenericCommand+0x30>
        __asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	623b      	str	r3, [r7, #32]
    }
 8003bfa:	bf00      	nop
 8003bfc:	bf00      	nop
 8003bfe:	e7fd      	b.n	8003bfc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003c00:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <xTimerGenericCommand+0x98>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d02a      	beq.n	8003c5e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b05      	cmp	r3, #5
 8003c18:	dc18      	bgt.n	8003c4c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c1a:	f7ff fe8d 	bl	8003938 <xTaskGetSchedulerState>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d109      	bne.n	8003c38 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c24:	4b10      	ldr	r3, [pc, #64]	@ (8003c68 <xTimerGenericCommand+0x98>)
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	f107 0114 	add.w	r1, r7, #20
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c30:	f7fe fcbc 	bl	80025ac <xQueueGenericSend>
 8003c34:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c36:	e012      	b.n	8003c5e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c38:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <xTimerGenericCommand+0x98>)
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	f107 0114 	add.w	r1, r7, #20
 8003c40:	2300      	movs	r3, #0
 8003c42:	2200      	movs	r2, #0
 8003c44:	f7fe fcb2 	bl	80025ac <xQueueGenericSend>
 8003c48:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c4a:	e008      	b.n	8003c5e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <xTimerGenericCommand+0x98>)
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	f107 0114 	add.w	r1, r7, #20
 8003c54:	2300      	movs	r3, #0
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	f7fe fdba 	bl	80027d0 <xQueueGenericSendFromISR>
 8003c5c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003c60:	4618      	mov	r0, r3
 8003c62:	3728      	adds	r7, #40	@ 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000248 	.word	0x20000248

08003c6c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c76:	4b23      	ldr	r3, [pc, #140]	@ (8003d04 <prvProcessExpiredTimer+0x98>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fb7f 	bl	8002388 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d023      	beq.n	8003ce0 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	699a      	ldr	r2, [r3, #24]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	18d1      	adds	r1, r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	6978      	ldr	r0, [r7, #20]
 8003ca6:	f000 f8d5 	bl	8003e54 <prvInsertTimerInActiveList>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	2100      	movs	r1, #0
 8003cba:	6978      	ldr	r0, [r7, #20]
 8003cbc:	f7ff ff88 	bl	8003bd0 <xTimerGenericCommand>
 8003cc0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d114      	bne.n	8003cf2 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	60fb      	str	r3, [r7, #12]
    }
 8003cda:	bf00      	nop
 8003cdc:	bf00      	nop
 8003cde:	e7fd      	b.n	8003cdc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	6978      	ldr	r0, [r7, #20]
 8003cf8:	4798      	blx	r3
    }
 8003cfa:	bf00      	nop
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000240 	.word	0x20000240

08003d08 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d10:	f107 0308 	add.w	r3, r7, #8
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 f859 	bl	8003dcc <prvGetNextExpireTime>
 8003d1a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f805 	bl	8003d30 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d26:	f000 f8d7 	bl	8003ed8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d2a:	bf00      	nop
 8003d2c:	e7f0      	b.n	8003d10 <prvTimerTask+0x8>
	...

08003d30 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d3a:	f7ff fa41 	bl	80031c0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d3e:	f107 0308 	add.w	r3, r7, #8
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 f866 	bl	8003e14 <prvSampleTimeNow>
 8003d48:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d130      	bne.n	8003db2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <prvProcessTimerOrBlockTask+0x3c>
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d806      	bhi.n	8003d6c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d5e:	f7ff fa3d 	bl	80031dc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d62:	68f9      	ldr	r1, [r7, #12]
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff81 	bl	8003c6c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d6a:	e024      	b.n	8003db6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d72:	4b13      	ldr	r3, [pc, #76]	@ (8003dc0 <prvProcessTimerOrBlockTask+0x90>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <prvProcessTimerOrBlockTask+0x50>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <prvProcessTimerOrBlockTask+0x52>
 8003d80:	2300      	movs	r3, #0
 8003d82:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d84:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc4 <prvProcessTimerOrBlockTask+0x94>)
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	4619      	mov	r1, r3
 8003d92:	f7ff f829 	bl	8002de8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d96:	f7ff fa21 	bl	80031dc <xTaskResumeAll>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003da0:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <prvProcessTimerOrBlockTask+0x98>)
 8003da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
    }
 8003db0:	e001      	b.n	8003db6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003db2:	f7ff fa13 	bl	80031dc <xTaskResumeAll>
    }
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000244 	.word	0x20000244
 8003dc4:	20000248 	.word	0x20000248
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e10 <prvGetNextExpireTime+0x44>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <prvGetNextExpireTime+0x16>
 8003dde:	2201      	movs	r2, #1
 8003de0:	e000      	b.n	8003de4 <prvGetNextExpireTime+0x18>
 8003de2:	2200      	movs	r2, #0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003df0:	4b07      	ldr	r3, [pc, #28]	@ (8003e10 <prvGetNextExpireTime+0x44>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e001      	b.n	8003e00 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e00:	68fb      	ldr	r3, [r7, #12]
    }
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20000240 	.word	0x20000240

08003e14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e1c:	f7ff fa72 	bl	8003304 <xTaskGetTickCount>
 8003e20:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e22:	4b0b      	ldr	r3, [pc, #44]	@ (8003e50 <prvSampleTimeNow+0x3c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d205      	bcs.n	8003e38 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e2c:	f000 f91e 	bl	800406c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e002      	b.n	8003e3e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e3e:	4a04      	ldr	r2, [pc, #16]	@ (8003e50 <prvSampleTimeNow+0x3c>)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e44:	68fb      	ldr	r3, [r7, #12]
    }
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000250 	.word	0x20000250

08003e54 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d812      	bhi.n	8003ea0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	1ad2      	subs	r2, r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d302      	bcc.n	8003e8e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e01b      	b.n	8003ec6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <prvInsertTimerInActiveList+0x7c>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3304      	adds	r3, #4
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f7fe fa3c 	bl	8002316 <vListInsert>
 8003e9e:	e012      	b.n	8003ec6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d206      	bcs.n	8003eb6 <prvInsertTimerInActiveList+0x62>
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d302      	bcc.n	8003eb6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e007      	b.n	8003ec6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eb6:	4b07      	ldr	r3, [pc, #28]	@ (8003ed4 <prvInsertTimerInActiveList+0x80>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f7fe fa28 	bl	8002316 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003ec6:	697b      	ldr	r3, [r7, #20]
    }
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000244 	.word	0x20000244
 8003ed4:	20000240 	.word	0x20000240

08003ed8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08c      	sub	sp, #48	@ 0x30
 8003edc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ede:	e0b2      	b.n	8004046 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f2c0 80af 	blt.w	8004046 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fa45 	bl	8002388 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff ff87 	bl	8003e14 <prvSampleTimeNow>
 8003f06:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b09      	cmp	r3, #9
 8003f0c:	f200 8098 	bhi.w	8004040 <prvProcessReceivedCommands+0x168>
 8003f10:	a201      	add	r2, pc, #4	@ (adr r2, 8003f18 <prvProcessReceivedCommands+0x40>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f41 	.word	0x08003f41
 8003f1c:	08003f41 	.word	0x08003f41
 8003f20:	08003f41 	.word	0x08003f41
 8003f24:	08003fb7 	.word	0x08003fb7
 8003f28:	08003fcb 	.word	0x08003fcb
 8003f2c:	08004017 	.word	0x08004017
 8003f30:	08003f41 	.word	0x08003f41
 8003f34:	08003f41 	.word	0x08003f41
 8003f38:	08003fb7 	.word	0x08003fb7
 8003f3c:	08003fcb 	.word	0x08003fcb
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	18d1      	adds	r1, r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a3a      	ldr	r2, [r7, #32]
 8003f5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f60:	f7ff ff78 	bl	8003e54 <prvInsertTimerInActiveList>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d06c      	beq.n	8004044 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f70:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d061      	beq.n	8004044 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	441a      	add	r2, r3
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2100      	movs	r1, #0
 8003f90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f92:	f7ff fe1d 	bl	8003bd0 <xTimerGenericCommand>
 8003f96:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d152      	bne.n	8004044 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	61bb      	str	r3, [r7, #24]
    }
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	e7fd      	b.n	8003fb2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003fc8:	e03d      	b.n	8004046 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	617b      	str	r3, [r7, #20]
    }
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	e7fd      	b.n	8003ffe <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	18d1      	adds	r1, r2, r3
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	6a3a      	ldr	r2, [r7, #32]
 800400e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004010:	f7ff ff20 	bl	8003e54 <prvInsertTimerInActiveList>
                        break;
 8004014:	e017      	b.n	8004046 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d103      	bne.n	800402c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8004024:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004026:	f000 fc05 	bl	8004834 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800402a:	e00c      	b.n	8004046 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	b2da      	uxtb	r2, r3
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800403e:	e002      	b.n	8004046 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004040:	bf00      	nop
 8004042:	e000      	b.n	8004046 <prvProcessReceivedCommands+0x16e>
                        break;
 8004044:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004046:	4b08      	ldr	r3, [pc, #32]	@ (8004068 <prvProcessReceivedCommands+0x190>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f107 0108 	add.w	r1, r7, #8
 800404e:	2200      	movs	r2, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe fc7f 	bl	8002954 <xQueueReceive>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	f47f af41 	bne.w	8003ee0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800405e:	bf00      	nop
 8004060:	bf00      	nop
 8004062:	3728      	adds	r7, #40	@ 0x28
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20000248 	.word	0x20000248

0800406c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004072:	e049      	b.n	8004108 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004074:	4b2e      	ldr	r3, [pc, #184]	@ (8004130 <prvSwitchTimerLists+0xc4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800407e:	4b2c      	ldr	r3, [pc, #176]	@ (8004130 <prvSwitchTimerLists+0xc4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3304      	adds	r3, #4
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe f97b 	bl	8002388 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d02f      	beq.n	8004108 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d90e      	bls.n	80040d8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004130 <prvSwitchTimerLists+0xc4>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f7fe f920 	bl	8002316 <vListInsert>
 80040d6:	e017      	b.n	8004108 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040d8:	2300      	movs	r3, #0
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	2300      	movs	r3, #0
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	2100      	movs	r1, #0
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff fd74 	bl	8003bd0 <xTimerGenericCommand>
 80040e8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	603b      	str	r3, [r7, #0]
    }
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004108:	4b09      	ldr	r3, [pc, #36]	@ (8004130 <prvSwitchTimerLists+0xc4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1b0      	bne.n	8004074 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004112:	4b07      	ldr	r3, [pc, #28]	@ (8004130 <prvSwitchTimerLists+0xc4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <prvSwitchTimerLists+0xc8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a04      	ldr	r2, [pc, #16]	@ (8004130 <prvSwitchTimerLists+0xc4>)
 800411e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004120:	4a04      	ldr	r2, [pc, #16]	@ (8004134 <prvSwitchTimerLists+0xc8>)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	6013      	str	r3, [r2, #0]
    }
 8004126:	bf00      	nop
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000240 	.word	0x20000240
 8004134:	20000244 	.word	0x20000244

08004138 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800413c:	f000 f966 	bl	800440c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004140:	4b12      	ldr	r3, [pc, #72]	@ (800418c <prvCheckForValidListAndQueue+0x54>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11d      	bne.n	8004184 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004148:	4811      	ldr	r0, [pc, #68]	@ (8004190 <prvCheckForValidListAndQueue+0x58>)
 800414a:	f7fe f893 	bl	8002274 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800414e:	4811      	ldr	r0, [pc, #68]	@ (8004194 <prvCheckForValidListAndQueue+0x5c>)
 8004150:	f7fe f890 	bl	8002274 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004154:	4b10      	ldr	r3, [pc, #64]	@ (8004198 <prvCheckForValidListAndQueue+0x60>)
 8004156:	4a0e      	ldr	r2, [pc, #56]	@ (8004190 <prvCheckForValidListAndQueue+0x58>)
 8004158:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800415a:	4b10      	ldr	r3, [pc, #64]	@ (800419c <prvCheckForValidListAndQueue+0x64>)
 800415c:	4a0d      	ldr	r2, [pc, #52]	@ (8004194 <prvCheckForValidListAndQueue+0x5c>)
 800415e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004160:	2200      	movs	r2, #0
 8004162:	210c      	movs	r1, #12
 8004164:	200a      	movs	r0, #10
 8004166:	f7fe f995 	bl	8002494 <xQueueGenericCreate>
 800416a:	4603      	mov	r3, r0
 800416c:	4a07      	ldr	r2, [pc, #28]	@ (800418c <prvCheckForValidListAndQueue+0x54>)
 800416e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004170:	4b06      	ldr	r3, [pc, #24]	@ (800418c <prvCheckForValidListAndQueue+0x54>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004178:	4b04      	ldr	r3, [pc, #16]	@ (800418c <prvCheckForValidListAndQueue+0x54>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4908      	ldr	r1, [pc, #32]	@ (80041a0 <prvCheckForValidListAndQueue+0x68>)
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe fe00 	bl	8002d84 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004184:	f000 f974 	bl	8004470 <vPortExitCritical>
    }
 8004188:	bf00      	nop
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000248 	.word	0x20000248
 8004190:	20000218 	.word	0x20000218
 8004194:	2000022c 	.word	0x2000022c
 8004198:	20000240 	.word	0x20000240
 800419c:	20000244 	.word	0x20000244
 80041a0:	08007110 	.word	0x08007110

080041a4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3b04      	subs	r3, #4
 80041b4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b04      	subs	r3, #4
 80041c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f023 0201 	bic.w	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3b04      	subs	r3, #4
 80041d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004208 <pxPortInitialiseStack+0x64>)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3b14      	subs	r3, #20
 80041de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3b04      	subs	r3, #4
 80041ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f06f 0202 	mvn.w	r2, #2
 80041f2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3b20      	subs	r3, #32
 80041f8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	0800420d 	.word	0x0800420d

0800420c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004216:	4b13      	ldr	r3, [pc, #76]	@ (8004264 <prvTaskExitError+0x58>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d00b      	beq.n	8004238 <prvTaskExitError+0x2c>
        __asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	60fb      	str	r3, [r7, #12]
    }
 8004232:	bf00      	nop
 8004234:	bf00      	nop
 8004236:	e7fd      	b.n	8004234 <prvTaskExitError+0x28>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	60bb      	str	r3, [r7, #8]
    }
 800424a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800424c:	bf00      	nop
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0fc      	beq.n	800424e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	2000000c 	.word	0x2000000c
	...

08004270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004270:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <pxCurrentTCBConst2>)
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	6808      	ldr	r0, [r1, #0]
 8004276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	f380 8809 	msr	PSP, r0
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	4770      	bx	lr
 800428c:	f3af 8000 	nop.w

08004290 <pxCurrentTCBConst2>:
 8004290:	20000114 	.word	0x20000114
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop

08004298 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004298:	4808      	ldr	r0, [pc, #32]	@ (80042bc <prvPortStartFirstTask+0x24>)
 800429a:	6800      	ldr	r0, [r0, #0]
 800429c:	6800      	ldr	r0, [r0, #0]
 800429e:	f380 8808 	msr	MSP, r0
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f380 8814 	msr	CONTROL, r0
 80042aa:	b662      	cpsie	i
 80042ac:	b661      	cpsie	f
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	df00      	svc	0
 80042b8:	bf00      	nop
 80042ba:	0000      	.short	0x0000
 80042bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop

080042c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042ca:	4b47      	ldr	r3, [pc, #284]	@ (80043e8 <xPortStartScheduler+0x124>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a47      	ldr	r2, [pc, #284]	@ (80043ec <xPortStartScheduler+0x128>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d10b      	bne.n	80042ec <xPortStartScheduler+0x28>
        __asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	60fb      	str	r3, [r7, #12]
    }
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	e7fd      	b.n	80042e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042ec:	4b3e      	ldr	r3, [pc, #248]	@ (80043e8 <xPortStartScheduler+0x124>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3f      	ldr	r2, [pc, #252]	@ (80043f0 <xPortStartScheduler+0x12c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10b      	bne.n	800430e <xPortStartScheduler+0x4a>
        __asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	613b      	str	r3, [r7, #16]
    }
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	e7fd      	b.n	800430a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800430e:	4b39      	ldr	r3, [pc, #228]	@ (80043f4 <xPortStartScheduler+0x130>)
 8004310:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	22ff      	movs	r2, #255	@ 0xff
 800431e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4b31      	ldr	r3, [pc, #196]	@ (80043f8 <xPortStartScheduler+0x134>)
 8004334:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004336:	4b31      	ldr	r3, [pc, #196]	@ (80043fc <xPortStartScheduler+0x138>)
 8004338:	2207      	movs	r2, #7
 800433a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800433c:	e009      	b.n	8004352 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800433e:	4b2f      	ldr	r3, [pc, #188]	@ (80043fc <xPortStartScheduler+0x138>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3b01      	subs	r3, #1
 8004344:	4a2d      	ldr	r2, [pc, #180]	@ (80043fc <xPortStartScheduler+0x138>)
 8004346:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435a:	2b80      	cmp	r3, #128	@ 0x80
 800435c:	d0ef      	beq.n	800433e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800435e:	4b27      	ldr	r3, [pc, #156]	@ (80043fc <xPortStartScheduler+0x138>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f1c3 0307 	rsb	r3, r3, #7
 8004366:	2b04      	cmp	r3, #4
 8004368:	d00b      	beq.n	8004382 <xPortStartScheduler+0xbe>
        __asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	60bb      	str	r3, [r7, #8]
    }
 800437c:	bf00      	nop
 800437e:	bf00      	nop
 8004380:	e7fd      	b.n	800437e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004382:	4b1e      	ldr	r3, [pc, #120]	@ (80043fc <xPortStartScheduler+0x138>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	4a1c      	ldr	r2, [pc, #112]	@ (80043fc <xPortStartScheduler+0x138>)
 800438a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800438c:	4b1b      	ldr	r3, [pc, #108]	@ (80043fc <xPortStartScheduler+0x138>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004394:	4a19      	ldr	r2, [pc, #100]	@ (80043fc <xPortStartScheduler+0x138>)
 8004396:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043a0:	4b17      	ldr	r3, [pc, #92]	@ (8004400 <xPortStartScheduler+0x13c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a16      	ldr	r2, [pc, #88]	@ (8004400 <xPortStartScheduler+0x13c>)
 80043a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043ac:	4b14      	ldr	r3, [pc, #80]	@ (8004400 <xPortStartScheduler+0x13c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a13      	ldr	r2, [pc, #76]	@ (8004400 <xPortStartScheduler+0x13c>)
 80043b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80043b6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043b8:	f000 f8e8 	bl	800458c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043bc:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <xPortStartScheduler+0x140>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043c2:	f000 f907 	bl	80045d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043c6:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <xPortStartScheduler+0x144>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004408 <xPortStartScheduler+0x144>)
 80043cc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80043d0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043d2:	f7ff ff61 	bl	8004298 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043d6:	f7ff f851 	bl	800347c <vTaskSwitchContext>
    prvTaskExitError();
 80043da:	f7ff ff17 	bl	800420c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	e000ed00 	.word	0xe000ed00
 80043ec:	410fc271 	.word	0x410fc271
 80043f0:	410fc270 	.word	0x410fc270
 80043f4:	e000e400 	.word	0xe000e400
 80043f8:	20000254 	.word	0x20000254
 80043fc:	20000258 	.word	0x20000258
 8004400:	e000ed20 	.word	0xe000ed20
 8004404:	2000000c 	.word	0x2000000c
 8004408:	e000ef34 	.word	0xe000ef34

0800440c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
        __asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	607b      	str	r3, [r7, #4]
    }
 8004424:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004426:	4b10      	ldr	r3, [pc, #64]	@ (8004468 <vPortEnterCritical+0x5c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a0e      	ldr	r2, [pc, #56]	@ (8004468 <vPortEnterCritical+0x5c>)
 800442e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004430:	4b0d      	ldr	r3, [pc, #52]	@ (8004468 <vPortEnterCritical+0x5c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d110      	bne.n	800445a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004438:	4b0c      	ldr	r3, [pc, #48]	@ (800446c <vPortEnterCritical+0x60>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <vPortEnterCritical+0x4e>
        __asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	603b      	str	r3, [r7, #0]
    }
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	e7fd      	b.n	8004456 <vPortEnterCritical+0x4a>
    }
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	2000000c 	.word	0x2000000c
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004476:	4b12      	ldr	r3, [pc, #72]	@ (80044c0 <vPortExitCritical+0x50>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10b      	bne.n	8004496 <vPortExitCritical+0x26>
        __asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	607b      	str	r3, [r7, #4]
    }
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	e7fd      	b.n	8004492 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004496:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <vPortExitCritical+0x50>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3b01      	subs	r3, #1
 800449c:	4a08      	ldr	r2, [pc, #32]	@ (80044c0 <vPortExitCritical+0x50>)
 800449e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80044a0:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <vPortExitCritical+0x50>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d105      	bne.n	80044b4 <vPortExitCritical+0x44>
 80044a8:	2300      	movs	r3, #0
 80044aa:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	f383 8811 	msr	BASEPRI, r3
    }
 80044b2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	2000000c 	.word	0x2000000c
	...

080044d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044d0:	f3ef 8009 	mrs	r0, PSP
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	4b15      	ldr	r3, [pc, #84]	@ (8004530 <pxCurrentTCBConst>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	f01e 0f10 	tst.w	lr, #16
 80044e0:	bf08      	it	eq
 80044e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ea:	6010      	str	r0, [r2, #0]
 80044ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80044f4:	f380 8811 	msr	BASEPRI, r0
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f7fe ffbc 	bl	800347c <vTaskSwitchContext>
 8004504:	f04f 0000 	mov.w	r0, #0
 8004508:	f380 8811 	msr	BASEPRI, r0
 800450c:	bc09      	pop	{r0, r3}
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	6808      	ldr	r0, [r1, #0]
 8004512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004516:	f01e 0f10 	tst.w	lr, #16
 800451a:	bf08      	it	eq
 800451c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004520:	f380 8809 	msr	PSP, r0
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	f3af 8000 	nop.w

08004530 <pxCurrentTCBConst>:
 8004530:	20000114 	.word	0x20000114
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop

08004538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
        __asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	607b      	str	r3, [r7, #4]
    }
 8004550:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004552:	f001 fdd3 	bl	80060fc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004556:	f7fe fef7 	bl	8003348 <xTaskIncrementTick>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d006      	beq.n	800456e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004560:	f001 fe2a 	bl	80061b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004564:	4b08      	ldr	r3, [pc, #32]	@ (8004588 <SysTick_Handler+0x50>)
 8004566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e001      	b.n	8004572 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800456e:	f001 fe07 	bl	8006180 <SEGGER_SYSVIEW_RecordExitISR>
 8004572:	2300      	movs	r3, #0
 8004574:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f383 8811 	msr	BASEPRI, r3
    }
 800457c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <vPortSetupTimerInterrupt+0x34>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <vPortSetupTimerInterrupt+0x38>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800459c:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <vPortSetupTimerInterrupt+0x3c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	@ (80045cc <vPortSetupTimerInterrupt+0x40>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	099b      	lsrs	r3, r3, #6
 80045a8:	4a09      	ldr	r2, [pc, #36]	@ (80045d0 <vPortSetupTimerInterrupt+0x44>)
 80045aa:	3b01      	subs	r3, #1
 80045ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ae:	4b04      	ldr	r3, [pc, #16]	@ (80045c0 <vPortSetupTimerInterrupt+0x34>)
 80045b0:	2207      	movs	r2, #7
 80045b2:	601a      	str	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000e010 	.word	0xe000e010
 80045c4:	e000e018 	.word	0xe000e018
 80045c8:	20000000 	.word	0x20000000
 80045cc:	10624dd3 	.word	0x10624dd3
 80045d0:	e000e014 	.word	0xe000e014

080045d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80045d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80045e4 <vPortEnableVFP+0x10>
 80045d8:	6801      	ldr	r1, [r0, #0]
 80045da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80045de:	6001      	str	r1, [r0, #0]
 80045e0:	4770      	bx	lr
 80045e2:	0000      	.short	0x0000
 80045e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop

080045ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80045f2:	f3ef 8305 	mrs	r3, IPSR
 80045f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b0f      	cmp	r3, #15
 80045fc:	d915      	bls.n	800462a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045fe:	4a18      	ldr	r2, [pc, #96]	@ (8004660 <vPortValidateInterruptPriority+0x74>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004608:	4b16      	ldr	r3, [pc, #88]	@ (8004664 <vPortValidateInterruptPriority+0x78>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	7afa      	ldrb	r2, [r7, #11]
 800460e:	429a      	cmp	r2, r3
 8004610:	d20b      	bcs.n	800462a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	607b      	str	r3, [r7, #4]
    }
 8004624:	bf00      	nop
 8004626:	bf00      	nop
 8004628:	e7fd      	b.n	8004626 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800462a:	4b0f      	ldr	r3, [pc, #60]	@ (8004668 <vPortValidateInterruptPriority+0x7c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <vPortValidateInterruptPriority+0x80>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d90b      	bls.n	8004652 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	603b      	str	r3, [r7, #0]
    }
 800464c:	bf00      	nop
 800464e:	bf00      	nop
 8004650:	e7fd      	b.n	800464e <vPortValidateInterruptPriority+0x62>
    }
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	e000e3f0 	.word	0xe000e3f0
 8004664:	20000254 	.word	0x20000254
 8004668:	e000ed0c 	.word	0xe000ed0c
 800466c:	20000258 	.word	0x20000258

08004670 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	@ 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800467c:	f7fe fda0 	bl	80031c0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004680:	4b66      	ldr	r3, [pc, #408]	@ (800481c <pvPortMalloc+0x1ac>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004688:	f000 f938 	bl	80048fc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800468c:	4b64      	ldr	r3, [pc, #400]	@ (8004820 <pvPortMalloc+0x1b0>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	f040 80a9 	bne.w	80047ec <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d02e      	beq.n	80046fe <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80046a0:	2208      	movs	r2, #8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d228      	bcs.n	80046fe <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80046ac:	2208      	movs	r2, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d022      	beq.n	8004704 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f023 0307 	bic.w	r3, r3, #7
 80046c4:	3308      	adds	r3, #8
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d215      	bcs.n	80046f8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f023 0307 	bic.w	r3, r3, #7
 80046d2:	3308      	adds	r3, #8
 80046d4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d011      	beq.n	8004704 <pvPortMalloc+0x94>
        __asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	617b      	str	r3, [r7, #20]
    }
 80046f2:	bf00      	nop
 80046f4:	bf00      	nop
 80046f6:	e7fd      	b.n	80046f4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046fc:	e002      	b.n	8004704 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	e000      	b.n	8004706 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004704:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d06f      	beq.n	80047ec <pvPortMalloc+0x17c>
 800470c:	4b45      	ldr	r3, [pc, #276]	@ (8004824 <pvPortMalloc+0x1b4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d86a      	bhi.n	80047ec <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004716:	4b44      	ldr	r3, [pc, #272]	@ (8004828 <pvPortMalloc+0x1b8>)
 8004718:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800471a:	4b43      	ldr	r3, [pc, #268]	@ (8004828 <pvPortMalloc+0x1b8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004720:	e004      	b.n	800472c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	429a      	cmp	r2, r3
 8004734:	d903      	bls.n	800473e <pvPortMalloc+0xce>
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f1      	bne.n	8004722 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800473e:	4b37      	ldr	r3, [pc, #220]	@ (800481c <pvPortMalloc+0x1ac>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004744:	429a      	cmp	r2, r3
 8004746:	d051      	beq.n	80047ec <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2208      	movs	r2, #8
 800474e:	4413      	add	r3, r2
 8004750:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	1ad2      	subs	r2, r2, r3
 8004762:	2308      	movs	r3, #8
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	429a      	cmp	r2, r3
 8004768:	d920      	bls.n	80047ac <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800476a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4413      	add	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <pvPortMalloc+0x124>
        __asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	613b      	str	r3, [r7, #16]
    }
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	e7fd      	b.n	8004790 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	1ad2      	subs	r2, r2, r3
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047a6:	69b8      	ldr	r0, [r7, #24]
 80047a8:	f000 f90a 	bl	80049c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004824 <pvPortMalloc+0x1b4>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004824 <pvPortMalloc+0x1b4>)
 80047b8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004824 <pvPortMalloc+0x1b4>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b1b      	ldr	r3, [pc, #108]	@ (800482c <pvPortMalloc+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d203      	bcs.n	80047ce <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047c6:	4b17      	ldr	r3, [pc, #92]	@ (8004824 <pvPortMalloc+0x1b4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a18      	ldr	r2, [pc, #96]	@ (800482c <pvPortMalloc+0x1bc>)
 80047cc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	4b13      	ldr	r3, [pc, #76]	@ (8004820 <pvPortMalloc+0x1b0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80047e2:	4b13      	ldr	r3, [pc, #76]	@ (8004830 <pvPortMalloc+0x1c0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3301      	adds	r3, #1
 80047e8:	4a11      	ldr	r2, [pc, #68]	@ (8004830 <pvPortMalloc+0x1c0>)
 80047ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80047ec:	f7fe fcf6 	bl	80031dc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00b      	beq.n	8004812 <pvPortMalloc+0x1a2>
        __asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	60fb      	str	r3, [r7, #12]
    }
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	e7fd      	b.n	800480e <pvPortMalloc+0x19e>
    return pvReturn;
 8004812:	69fb      	ldr	r3, [r7, #28]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3728      	adds	r7, #40	@ 0x28
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	20012e64 	.word	0x20012e64
 8004820:	20012e78 	.word	0x20012e78
 8004824:	20012e68 	.word	0x20012e68
 8004828:	20012e5c 	.word	0x20012e5c
 800482c:	20012e6c 	.word	0x20012e6c
 8004830:	20012e70 	.word	0x20012e70

08004834 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d04f      	beq.n	80048e6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004846:	2308      	movs	r3, #8
 8004848:	425b      	negs	r3, r3
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4413      	add	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <vPortFree+0xbc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <vPortFree+0x46>
        __asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	60fb      	str	r3, [r7, #12]
    }
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <vPortFree+0x66>
        __asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	60bb      	str	r3, [r7, #8]
    }
 8004894:	bf00      	nop
 8004896:	bf00      	nop
 8004898:	e7fd      	b.n	8004896 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	4b14      	ldr	r3, [pc, #80]	@ (80048f0 <vPortFree+0xbc>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01e      	beq.n	80048e6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d11a      	bne.n	80048e6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	4b0e      	ldr	r3, [pc, #56]	@ (80048f0 <vPortFree+0xbc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	401a      	ands	r2, r3
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80048c0:	f7fe fc7e 	bl	80031c0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	4b0a      	ldr	r3, [pc, #40]	@ (80048f4 <vPortFree+0xc0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4413      	add	r3, r2
 80048ce:	4a09      	ldr	r2, [pc, #36]	@ (80048f4 <vPortFree+0xc0>)
 80048d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048d2:	6938      	ldr	r0, [r7, #16]
 80048d4:	f000 f874 	bl	80049c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80048d8:	4b07      	ldr	r3, [pc, #28]	@ (80048f8 <vPortFree+0xc4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3301      	adds	r3, #1
 80048de:	4a06      	ldr	r2, [pc, #24]	@ (80048f8 <vPortFree+0xc4>)
 80048e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80048e2:	f7fe fc7b 	bl	80031dc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80048e6:	bf00      	nop
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20012e78 	.word	0x20012e78
 80048f4:	20012e68 	.word	0x20012e68
 80048f8:	20012e74 	.word	0x20012e74

080048fc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004902:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004906:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004908:	4b27      	ldr	r3, [pc, #156]	@ (80049a8 <prvHeapInit+0xac>)
 800490a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00c      	beq.n	8004930 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3307      	adds	r3, #7
 800491a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0307 	bic.w	r3, r3, #7
 8004922:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	4a1f      	ldr	r2, [pc, #124]	@ (80049a8 <prvHeapInit+0xac>)
 800492c:	4413      	add	r3, r2
 800492e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004934:	4a1d      	ldr	r2, [pc, #116]	@ (80049ac <prvHeapInit+0xb0>)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800493a:	4b1c      	ldr	r3, [pc, #112]	@ (80049ac <prvHeapInit+0xb0>)
 800493c:	2200      	movs	r2, #0
 800493e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	4413      	add	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004948:	2208      	movs	r2, #8
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0307 	bic.w	r3, r3, #7
 8004956:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4a15      	ldr	r2, [pc, #84]	@ (80049b0 <prvHeapInit+0xb4>)
 800495c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800495e:	4b14      	ldr	r3, [pc, #80]	@ (80049b0 <prvHeapInit+0xb4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2200      	movs	r2, #0
 8004964:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004966:	4b12      	ldr	r3, [pc, #72]	@ (80049b0 <prvHeapInit+0xb4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	1ad2      	subs	r2, r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800497c:	4b0c      	ldr	r3, [pc, #48]	@ (80049b0 <prvHeapInit+0xb4>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4a0a      	ldr	r2, [pc, #40]	@ (80049b4 <prvHeapInit+0xb8>)
 800498a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4a09      	ldr	r2, [pc, #36]	@ (80049b8 <prvHeapInit+0xbc>)
 8004992:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004994:	4b09      	ldr	r3, [pc, #36]	@ (80049bc <prvHeapInit+0xc0>)
 8004996:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800499a:	601a      	str	r2, [r3, #0]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	2000025c 	.word	0x2000025c
 80049ac:	20012e5c 	.word	0x20012e5c
 80049b0:	20012e64 	.word	0x20012e64
 80049b4:	20012e6c 	.word	0x20012e6c
 80049b8:	20012e68 	.word	0x20012e68
 80049bc:	20012e78 	.word	0x20012e78

080049c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049c8:	4b28      	ldr	r3, [pc, #160]	@ (8004a6c <prvInsertBlockIntoFreeList+0xac>)
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	e002      	b.n	80049d4 <prvInsertBlockIntoFreeList+0x14>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d8f7      	bhi.n	80049ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4413      	add	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d108      	bne.n	8004a02 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	441a      	add	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	441a      	add	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d118      	bne.n	8004a48 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4b15      	ldr	r3, [pc, #84]	@ (8004a70 <prvInsertBlockIntoFreeList+0xb0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d00d      	beq.n	8004a3e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	441a      	add	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e008      	b.n	8004a50 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a70 <prvInsertBlockIntoFreeList+0xb0>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e003      	b.n	8004a50 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d002      	beq.n	8004a5e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	20012e5c 	.word	0x20012e5c
 8004a70:	20012e64 	.word	0x20012e64

08004a74 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a78:	4803      	ldr	r0, [pc, #12]	@ (8004a88 <_cbSendSystemDesc+0x14>)
 8004a7a:	f001 fae9 	bl	8006050 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a7e:	4803      	ldr	r0, [pc, #12]	@ (8004a8c <_cbSendSystemDesc+0x18>)
 8004a80:	f001 fae6 	bl	8006050 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a84:	bf00      	nop
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	08007118 	.word	0x08007118
 8004a8c:	08007168 	.word	0x08007168

08004a90 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a94:	4b06      	ldr	r3, [pc, #24]	@ (8004ab0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a9a:	6819      	ldr	r1, [r3, #0]
 8004a9c:	4b05      	ldr	r3, [pc, #20]	@ (8004ab4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a9e:	4a06      	ldr	r2, [pc, #24]	@ (8004ab8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004aa0:	f000 fe54 	bl	800574c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004aa4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004aa8:	f000 fe94 	bl	80057d4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004aac:	bf00      	nop
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000000 	.word	0x20000000
 8004ab4:	08004a75 	.word	0x08004a75
 8004ab8:	0800720c 	.word	0x0800720c

08004abc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	607b      	str	r3, [r7, #4]
 8004ac6:	e033      	b.n	8004b30 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ac8:	491e      	ldr	r1, [pc, #120]	@ (8004b44 <_cbSendTaskList+0x88>)
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	491a      	ldr	r1, [pc, #104]	@ (8004b44 <_cbSendTaskList+0x88>)
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	6819      	ldr	r1, [r3, #0]
 8004aea:	4c16      	ldr	r4, [pc, #88]	@ (8004b44 <_cbSendTaskList+0x88>)
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4423      	add	r3, r4
 8004af8:	3308      	adds	r3, #8
 8004afa:	681c      	ldr	r4, [r3, #0]
 8004afc:	4d11      	ldr	r5, [pc, #68]	@ (8004b44 <_cbSendTaskList+0x88>)
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	442b      	add	r3, r5
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	681d      	ldr	r5, [r3, #0]
 8004b0e:	4e0d      	ldr	r6, [pc, #52]	@ (8004b44 <_cbSendTaskList+0x88>)
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4433      	add	r3, r6
 8004b1c:	3310      	adds	r3, #16
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	462b      	mov	r3, r5
 8004b24:	4622      	mov	r2, r4
 8004b26:	f000 f8bd 	bl	8004ca4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	607b      	str	r3, [r7, #4]
 8004b30:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <_cbSendTaskList+0x8c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d3c6      	bcc.n	8004ac8 <_cbSendTaskList+0xc>
  }
}
 8004b3a:	bf00      	nop
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b44:	20012e7c 	.word	0x20012e7c
 8004b48:	20012f1c 	.word	0x20012f1c

08004b4c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b54:	f7fe fbe6 	bl	8003324 <xTaskGetTickCountFromISR>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	469a      	mov	sl, r3
 8004b5e:	4693      	mov	fp, r2
 8004b60:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	f04f 0a00 	mov.w	sl, #0
 8004b70:	f04f 0b00 	mov.w	fp, #0
 8004b74:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004b78:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004b7c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004b80:	4652      	mov	r2, sl
 8004b82:	465b      	mov	r3, fp
 8004b84:	1a14      	subs	r4, r2, r0
 8004b86:	eb63 0501 	sbc.w	r5, r3, r1
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	00ab      	lsls	r3, r5, #2
 8004b94:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004b98:	00a2      	lsls	r2, r4, #2
 8004b9a:	4614      	mov	r4, r2
 8004b9c:	461d      	mov	r5, r3
 8004b9e:	eb14 0800 	adds.w	r8, r4, r0
 8004ba2:	eb45 0901 	adc.w	r9, r5, r1
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bba:	4690      	mov	r8, r2
 8004bbc:	4699      	mov	r9, r3
 8004bbe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004bc2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	4619      	mov	r1, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004bd4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004be2:	2205      	movs	r2, #5
 8004be4:	492b      	ldr	r1, [pc, #172]	@ (8004c94 <SYSVIEW_AddTask+0xc0>)
 8004be6:	68b8      	ldr	r0, [r7, #8]
 8004be8:	f001 ff96 	bl	8006b18 <memcmp>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d04b      	beq.n	8004c8a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004bf2:	4b29      	ldr	r3, [pc, #164]	@ (8004c98 <SYSVIEW_AddTask+0xc4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b07      	cmp	r3, #7
 8004bf8:	d903      	bls.n	8004c02 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004bfa:	4828      	ldr	r0, [pc, #160]	@ (8004c9c <SYSVIEW_AddTask+0xc8>)
 8004bfc:	f001 fd26 	bl	800664c <SEGGER_SYSVIEW_Warn>
    return;
 8004c00:	e044      	b.n	8004c8c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c02:	4b25      	ldr	r3, [pc, #148]	@ (8004c98 <SYSVIEW_AddTask+0xc4>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4926      	ldr	r1, [pc, #152]	@ (8004ca0 <SYSVIEW_AddTask+0xcc>)
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c16:	4b20      	ldr	r3, [pc, #128]	@ (8004c98 <SYSVIEW_AddTask+0xc4>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4921      	ldr	r1, [pc, #132]	@ (8004ca0 <SYSVIEW_AddTask+0xcc>)
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	3304      	adds	r3, #4
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c98 <SYSVIEW_AddTask+0xc4>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	491b      	ldr	r1, [pc, #108]	@ (8004ca0 <SYSVIEW_AddTask+0xcc>)
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004c42:	4b15      	ldr	r3, [pc, #84]	@ (8004c98 <SYSVIEW_AddTask+0xc4>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4916      	ldr	r1, [pc, #88]	@ (8004ca0 <SYSVIEW_AddTask+0xcc>)
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	330c      	adds	r3, #12
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004c58:	4b0f      	ldr	r3, [pc, #60]	@ (8004c98 <SYSVIEW_AddTask+0xc4>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4910      	ldr	r1, [pc, #64]	@ (8004ca0 <SYSVIEW_AddTask+0xcc>)
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3310      	adds	r3, #16
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <SYSVIEW_AddTask+0xc4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a08      	ldr	r2, [pc, #32]	@ (8004c98 <SYSVIEW_AddTask+0xc4>)
 8004c76:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f80e 	bl	8004ca4 <SYSVIEW_SendTaskInfo>
 8004c88:	e000      	b.n	8004c8c <SYSVIEW_AddTask+0xb8>
    return;
 8004c8a:	bf00      	nop

}
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	08007178 	.word	0x08007178
 8004c98:	20012f1c 	.word	0x20012f1c
 8004c9c:	08007180 	.word	0x08007180
 8004ca0:	20012e7c 	.word	0x20012e7c

08004ca4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08a      	sub	sp, #40	@ 0x28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004cb2:	f107 0314 	add.w	r3, r7, #20
 8004cb6:	2214      	movs	r2, #20
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 ff3c 	bl	8006b38 <memset>
  TaskInfo.TaskID     = TaskID;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004cd4:	f107 0314 	add.w	r3, r7, #20
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 f8c1 	bl	8005e60 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004cde:	bf00      	nop
 8004ce0:	3728      	adds	r7, #40	@ 0x28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004cee:	4b24      	ldr	r3, [pc, #144]	@ (8004d80 <_DoInit+0x98>)
 8004cf0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a20      	ldr	r2, [pc, #128]	@ (8004d84 <_DoInit+0x9c>)
 8004d02:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a20      	ldr	r2, [pc, #128]	@ (8004d88 <_DoInit+0xa0>)
 8004d08:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d10:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a17      	ldr	r2, [pc, #92]	@ (8004d84 <_DoInit+0x9c>)
 8004d28:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a17      	ldr	r2, [pc, #92]	@ (8004d8c <_DoInit+0xa4>)
 8004d2e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2210      	movs	r2, #16
 8004d34:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3307      	adds	r3, #7
 8004d4c:	4a10      	ldr	r2, [pc, #64]	@ (8004d90 <_DoInit+0xa8>)
 8004d4e:	6810      	ldr	r0, [r2, #0]
 8004d50:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d52:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a0e      	ldr	r2, [pc, #56]	@ (8004d94 <_DoInit+0xac>)
 8004d5a:	6810      	ldr	r0, [r2, #0]
 8004d5c:	6018      	str	r0, [r3, #0]
 8004d5e:	8891      	ldrh	r1, [r2, #4]
 8004d60:	7992      	ldrb	r2, [r2, #6]
 8004d62:	8099      	strh	r1, [r3, #4]
 8004d64:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d66:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d70:	f3bf 8f5f 	dmb	sy
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20012f20 	.word	0x20012f20
 8004d84:	080071d0 	.word	0x080071d0
 8004d88:	20012fc8 	.word	0x20012fc8
 8004d8c:	200133c8 	.word	0x200133c8
 8004d90:	080071dc 	.word	0x080071dc
 8004d94:	080071e0 	.word	0x080071e0

08004d98 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	@ 0x28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004da4:	2300      	movs	r3, #0
 8004da6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d905      	bls.n	8004dc8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc6:	e007      	b.n	8004dd8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	69b9      	ldr	r1, [r7, #24]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	1acb      	subs	r3, r1, r3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de2:	4293      	cmp	r3, r2
 8004de4:	bf28      	it	cs
 8004de6:	4613      	movcs	r3, r2
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4293      	cmp	r3, r2
 8004df0:	bf28      	it	cs
 8004df2:	4613      	movcs	r3, r2
 8004df4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	6978      	ldr	r0, [r7, #20]
 8004e06:	f001 fefa 	bl	8006bfe <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004e0a:	6a3a      	ldr	r2, [r7, #32]
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	4413      	add	r3, r2
 8004e10:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	4413      	add	r3, r2
 8004e18:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e26:	4413      	add	r3, r2
 8004e28:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d101      	bne.n	8004e38 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e38:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1b2      	bne.n	8004dae <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004e48:	6a3b      	ldr	r3, [r7, #32]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3728      	adds	r7, #40	@ 0x28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b088      	sub	sp, #32
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d911      	bls.n	8004e9a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	6938      	ldr	r0, [r7, #16]
 8004e86:	f001 feba 	bl	8006bfe <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e8a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004e8e:	69fa      	ldr	r2, [r7, #28]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	441a      	add	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004e98:	e01f      	b.n	8004eda <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	6938      	ldr	r0, [r7, #16]
 8004eae:	f001 fea6 	bl	8006bfe <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6938      	ldr	r0, [r7, #16]
 8004ecc:	f001 fe97 	bl	8006bfe <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ed0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	60da      	str	r2, [r3, #12]
}
 8004eda:	bf00      	nop
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004ee2:	b480      	push	{r7}
 8004ee4:	b087      	sub	sp, #28
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d808      	bhi.n	8004f10 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1ad2      	subs	r2, r2, r3
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e004      	b.n	8004f1a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004f1a:	697b      	ldr	r3, [r7, #20]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	@ 0x30
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004f34:	4b3e      	ldr	r3, [pc, #248]	@ (8005030 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f36:	623b      	str	r3, [r7, #32]
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <SEGGER_RTT_ReadNoLock+0x1e>
 8004f42:	f7ff fed1 	bl	8004ce8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	4413      	add	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	3360      	adds	r3, #96	@ 0x60
 8004f52:	4a37      	ldr	r2, [pc, #220]	@ (8005030 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f54:	4413      	add	r3, r2
 8004f56:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d92b      	bls.n	8004fcc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4293      	cmp	r3, r2
 8004f84:	bf28      	it	cs
 8004f86:	4613      	movcs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f90:	4413      	add	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	6939      	ldr	r1, [r7, #16]
 8004f98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f9a:	f001 fe30 	bl	8006bfe <memcpy>
    NumBytesRead += NumBytesRem;
 8004f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	4413      	add	r3, r2
 8004fac:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	4413      	add	r3, r2
 8004fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d101      	bne.n	8004fcc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	bf28      	it	cs
 8004fdc:	4613      	movcs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d019      	beq.n	800501a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fec:	4413      	add	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	6939      	ldr	r1, [r7, #16]
 8004ff4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ff6:	f001 fe02 	bl	8006bfe <memcpy>
    NumBytesRead += NumBytesRem;
 8004ffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	4413      	add	r3, r2
 8005000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	4413      	add	r3, r2
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	4413      	add	r3, r2
 8005018:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800501a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005024:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005028:	4618      	mov	r0, r3
 800502a:	3730      	adds	r7, #48	@ 0x30
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20012f20 	.word	0x20012f20

08005034 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	4613      	mov	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4413      	add	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	4a1f      	ldr	r2, [pc, #124]	@ (80050d0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005052:	4413      	add	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d029      	beq.n	80050b2 <SEGGER_RTT_WriteNoLock+0x7e>
 800505e:	2b02      	cmp	r3, #2
 8005060:	d82e      	bhi.n	80050c0 <SEGGER_RTT_WriteNoLock+0x8c>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <SEGGER_RTT_WriteNoLock+0x38>
 8005066:	2b01      	cmp	r3, #1
 8005068:	d013      	beq.n	8005092 <SEGGER_RTT_WriteNoLock+0x5e>
 800506a:	e029      	b.n	80050c0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800506c:	6978      	ldr	r0, [r7, #20]
 800506e:	f7ff ff38 	bl	8004ee2 <_GetAvailWriteSpace>
 8005072:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	429a      	cmp	r2, r3
 800507a:	d202      	bcs.n	8005082 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800507c:	2300      	movs	r3, #0
 800507e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005080:	e021      	b.n	80050c6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	69b9      	ldr	r1, [r7, #24]
 800508a:	6978      	ldr	r0, [r7, #20]
 800508c:	f7ff fee1 	bl	8004e52 <_WriteNoCheck>
    break;
 8005090:	e019      	b.n	80050c6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005092:	6978      	ldr	r0, [r7, #20]
 8005094:	f7ff ff25 	bl	8004ee2 <_GetAvailWriteSpace>
 8005098:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4293      	cmp	r3, r2
 80050a0:	bf28      	it	cs
 80050a2:	4613      	movcs	r3, r2
 80050a4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	69b9      	ldr	r1, [r7, #24]
 80050aa:	6978      	ldr	r0, [r7, #20]
 80050ac:	f7ff fed1 	bl	8004e52 <_WriteNoCheck>
    break;
 80050b0:	e009      	b.n	80050c6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	69b9      	ldr	r1, [r7, #24]
 80050b6:	6978      	ldr	r0, [r7, #20]
 80050b8:	f7ff fe6e 	bl	8004d98 <_WriteBlocking>
 80050bc:	61f8      	str	r0, [r7, #28]
    break;
 80050be:	e002      	b.n	80050c6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
    break;
 80050c4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80050c6:	69fb      	ldr	r3, [r7, #28]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20012f20 	.word	0x20012f20

080050d4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80050e0:	4b0e      	ldr	r3, [pc, #56]	@ (800511c <SEGGER_RTT_Write+0x48>)
 80050e2:	61fb      	str	r3, [r7, #28]
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <SEGGER_RTT_Write+0x1e>
 80050ee:	f7ff fdfb 	bl	8004ce8 <_DoInit>
  SEGGER_RTT_LOCK();
 80050f2:	f3ef 8311 	mrs	r3, BASEPRI
 80050f6:	f04f 0120 	mov.w	r1, #32
 80050fa:	f381 8811 	msr	BASEPRI, r1
 80050fe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff ff95 	bl	8005034 <SEGGER_RTT_WriteNoLock>
 800510a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005112:	697b      	ldr	r3, [r7, #20]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3720      	adds	r7, #32
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20012f20 	.word	0x20012f20

08005120 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800512e:	4b3d      	ldr	r3, [pc, #244]	@ (8005224 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <SEGGER_RTT_AllocUpBuffer+0x20>
 800513c:	f7ff fdd4 	bl	8004ce8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005140:	f3ef 8311 	mrs	r3, BASEPRI
 8005144:	f04f 0120 	mov.w	r1, #32
 8005148:	f381 8811 	msr	BASEPRI, r1
 800514c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800514e:	4b35      	ldr	r3, [pc, #212]	@ (8005224 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005150:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005156:	6939      	ldr	r1, [r7, #16]
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	4613      	mov	r3, r2
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	4413      	add	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	440b      	add	r3, r1
 8005166:	3304      	adds	r3, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	3301      	adds	r3, #1
 8005172:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	429a      	cmp	r2, r3
 800517c:	dbeb      	blt.n	8005156 <SEGGER_RTT_AllocUpBuffer+0x36>
 800517e:	e000      	b.n	8005182 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005180:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	429a      	cmp	r2, r3
 800518a:	da3f      	bge.n	800520c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800518c:	6939      	ldr	r1, [r7, #16]
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	4613      	mov	r3, r2
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	4413      	add	r3, r2
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	440b      	add	r3, r1
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80051a0:	6939      	ldr	r1, [r7, #16]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	440b      	add	r3, r1
 80051b0:	3304      	adds	r3, #4
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80051b6:	6939      	ldr	r1, [r7, #16]
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	4613      	mov	r3, r2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	4413      	add	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	440b      	add	r3, r1
 80051c4:	3320      	adds	r3, #32
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80051ca:	6939      	ldr	r1, [r7, #16]
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	4613      	mov	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	4413      	add	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	440b      	add	r3, r1
 80051d8:	3328      	adds	r3, #40	@ 0x28
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80051de:	6939      	ldr	r1, [r7, #16]
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	440b      	add	r3, r1
 80051ec:	3324      	adds	r3, #36	@ 0x24
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80051f2:	6939      	ldr	r1, [r7, #16]
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	4613      	mov	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4413      	add	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	440b      	add	r3, r1
 8005200:	332c      	adds	r3, #44	@ 0x2c
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005206:	f3bf 8f5f 	dmb	sy
 800520a:	e002      	b.n	8005212 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800520c:	f04f 33ff 	mov.w	r3, #4294967295
 8005210:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005218:	69fb      	ldr	r3, [r7, #28]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20012f20 	.word	0x20012f20

08005228 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005236:	4b33      	ldr	r3, [pc, #204]	@ (8005304 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005244:	f7ff fd50 	bl	8004ce8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005248:	4b2e      	ldr	r3, [pc, #184]	@ (8005304 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800524a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	461a      	mov	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4293      	cmp	r3, r2
 8005256:	d24d      	bcs.n	80052f4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005258:	f3ef 8311 	mrs	r3, BASEPRI
 800525c:	f04f 0120 	mov.w	r1, #32
 8005260:	f381 8811 	msr	BASEPRI, r1
 8005264:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d031      	beq.n	80052d0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800526c:	6979      	ldr	r1, [r7, #20]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4613      	mov	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4413      	add	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	440b      	add	r3, r1
 800527a:	3360      	adds	r3, #96	@ 0x60
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005280:	6979      	ldr	r1, [r7, #20]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4613      	mov	r3, r2
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4413      	add	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	440b      	add	r3, r1
 800528e:	3364      	adds	r3, #100	@ 0x64
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005294:	6979      	ldr	r1, [r7, #20]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4613      	mov	r3, r2
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	4413      	add	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	440b      	add	r3, r1
 80052a2:	3368      	adds	r3, #104	@ 0x68
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80052a8:	6979      	ldr	r1, [r7, #20]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4613      	mov	r3, r2
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	4413      	add	r3, r2
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	440b      	add	r3, r1
 80052b6:	3370      	adds	r3, #112	@ 0x70
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80052bc:	6979      	ldr	r1, [r7, #20]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4613      	mov	r3, r2
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	4413      	add	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	440b      	add	r3, r1
 80052ca:	336c      	adds	r3, #108	@ 0x6c
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80052d0:	6979      	ldr	r1, [r7, #20]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4613      	mov	r3, r2
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	4413      	add	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	440b      	add	r3, r1
 80052de:	3374      	adds	r3, #116	@ 0x74
 80052e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052e2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052e4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	e002      	b.n	80052fa <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80052f4:	f04f 33ff 	mov.w	r3, #4294967295
 80052f8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80052fa:	69fb      	ldr	r3, [r7, #28]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3720      	adds	r7, #32
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20012f20 	.word	0x20012f20

08005308 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005318:	e002      	b.n	8005320 <_EncodeStr+0x18>
    Len++;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	3301      	adds	r3, #1
 800531e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4413      	add	r3, r2
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f6      	bne.n	800531a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	429a      	cmp	r2, r3
 8005332:	d901      	bls.n	8005338 <_EncodeStr+0x30>
    Len = Limit;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2bfe      	cmp	r3, #254	@ 0xfe
 800533c:	d806      	bhi.n	800534c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	60fa      	str	r2, [r7, #12]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	e011      	b.n	8005370 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	60fa      	str	r2, [r7, #12]
 8005352:	22ff      	movs	r2, #255	@ 0xff
 8005354:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	60fa      	str	r2, [r7, #12]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	0a19      	lsrs	r1, r3, #8
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	60fa      	str	r2, [r7, #12]
 800536c:	b2ca      	uxtb	r2, r1
 800536e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005374:	e00a      	b.n	800538c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	1c53      	adds	r3, r2, #1
 800537a:	60bb      	str	r3, [r7, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	1c59      	adds	r1, r3, #1
 8005380:	60f9      	str	r1, [r7, #12]
 8005382:	7812      	ldrb	r2, [r2, #0]
 8005384:	701a      	strb	r2, [r3, #0]
    n++;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	3301      	adds	r3, #1
 800538a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	429a      	cmp	r2, r3
 8005392:	d3f0      	bcc.n	8005376 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005394:	68fb      	ldr	r3, [r7, #12]
}
 8005396:	4618      	mov	r0, r3
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3304      	adds	r3, #4
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053c2:	4b35      	ldr	r3, [pc, #212]	@ (8005498 <_HandleIncomingPacket+0xdc>)
 80053c4:	7e1b      	ldrb	r3, [r3, #24]
 80053c6:	4618      	mov	r0, r3
 80053c8:	1cfb      	adds	r3, r7, #3
 80053ca:	2201      	movs	r2, #1
 80053cc:	4619      	mov	r1, r3
 80053ce:	f7ff fdab 	bl	8004f28 <SEGGER_RTT_ReadNoLock>
 80053d2:	4603      	mov	r3, r0
 80053d4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	dd59      	ble.n	8005490 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	2b80      	cmp	r3, #128	@ 0x80
 80053e0:	d032      	beq.n	8005448 <_HandleIncomingPacket+0x8c>
 80053e2:	2b80      	cmp	r3, #128	@ 0x80
 80053e4:	dc42      	bgt.n	800546c <_HandleIncomingPacket+0xb0>
 80053e6:	2b07      	cmp	r3, #7
 80053e8:	dc16      	bgt.n	8005418 <_HandleIncomingPacket+0x5c>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	dd3e      	ble.n	800546c <_HandleIncomingPacket+0xb0>
 80053ee:	3b01      	subs	r3, #1
 80053f0:	2b06      	cmp	r3, #6
 80053f2:	d83b      	bhi.n	800546c <_HandleIncomingPacket+0xb0>
 80053f4:	a201      	add	r2, pc, #4	@ (adr r2, 80053fc <_HandleIncomingPacket+0x40>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	0800541f 	.word	0x0800541f
 8005400:	08005425 	.word	0x08005425
 8005404:	0800542b 	.word	0x0800542b
 8005408:	08005431 	.word	0x08005431
 800540c:	08005437 	.word	0x08005437
 8005410:	0800543d 	.word	0x0800543d
 8005414:	08005443 	.word	0x08005443
 8005418:	2b7f      	cmp	r3, #127	@ 0x7f
 800541a:	d034      	beq.n	8005486 <_HandleIncomingPacket+0xca>
 800541c:	e026      	b.n	800546c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800541e:	f000 fba5 	bl	8005b6c <SEGGER_SYSVIEW_Start>
      break;
 8005422:	e035      	b.n	8005490 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005424:	f000 fc5c 	bl	8005ce0 <SEGGER_SYSVIEW_Stop>
      break;
 8005428:	e032      	b.n	8005490 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800542a:	f000 fe35 	bl	8006098 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800542e:	e02f      	b.n	8005490 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005430:	f000 fdfa 	bl	8006028 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005434:	e02c      	b.n	8005490 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005436:	f000 fc79 	bl	8005d2c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800543a:	e029      	b.n	8005490 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800543c:	f001 f8c8 	bl	80065d0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005440:	e026      	b.n	8005490 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005442:	f001 f8a7 	bl	8006594 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005446:	e023      	b.n	8005490 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005448:	4b13      	ldr	r3, [pc, #76]	@ (8005498 <_HandleIncomingPacket+0xdc>)
 800544a:	7e1b      	ldrb	r3, [r3, #24]
 800544c:	4618      	mov	r0, r3
 800544e:	1cfb      	adds	r3, r7, #3
 8005450:	2201      	movs	r2, #1
 8005452:	4619      	mov	r1, r3
 8005454:	f7ff fd68 	bl	8004f28 <SEGGER_RTT_ReadNoLock>
 8005458:	4603      	mov	r3, r0
 800545a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	dd13      	ble.n	800548a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	4618      	mov	r0, r3
 8005466:	f001 f815 	bl	8006494 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800546a:	e00e      	b.n	800548a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	b25b      	sxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	da0c      	bge.n	800548e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005474:	4b08      	ldr	r3, [pc, #32]	@ (8005498 <_HandleIncomingPacket+0xdc>)
 8005476:	7e1b      	ldrb	r3, [r3, #24]
 8005478:	4618      	mov	r0, r3
 800547a:	1cfb      	adds	r3, r7, #3
 800547c:	2201      	movs	r2, #1
 800547e:	4619      	mov	r1, r3
 8005480:	f7ff fd52 	bl	8004f28 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005484:	e003      	b.n	800548e <_HandleIncomingPacket+0xd2>
      break;
 8005486:	bf00      	nop
 8005488:	e002      	b.n	8005490 <_HandleIncomingPacket+0xd4>
      break;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <_HandleIncomingPacket+0xd4>
      break;
 800548e:	bf00      	nop
    }
  }
}
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	200143e0 	.word	0x200143e0

0800549c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	@ 0x30
 80054a0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80054a2:	2301      	movs	r3, #1
 80054a4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80054a6:	1d3b      	adds	r3, r7, #4
 80054a8:	3301      	adds	r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054b0:	4b31      	ldr	r3, [pc, #196]	@ (8005578 <_TrySendOverflowPacket+0xdc>)
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054b6:	e00b      	b.n	80054d0 <_TrySendOverflowPacket+0x34>
 80054b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054be:	1c59      	adds	r1, r3, #1
 80054c0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80054c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054cc:	09db      	lsrs	r3, r3, #7
 80054ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80054d4:	d8f0      	bhi.n	80054b8 <_TrySendOverflowPacket+0x1c>
 80054d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054e6:	4b25      	ldr	r3, [pc, #148]	@ (800557c <_TrySendOverflowPacket+0xe0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054ec:	4b22      	ldr	r3, [pc, #136]	@ (8005578 <_TrySendOverflowPacket+0xdc>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	623b      	str	r3, [r7, #32]
 80054fe:	e00b      	b.n	8005518 <_TrySendOverflowPacket+0x7c>
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	1c59      	adds	r1, r3, #1
 8005508:	6279      	str	r1, [r7, #36]	@ 0x24
 800550a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	09db      	lsrs	r3, r3, #7
 8005516:	623b      	str	r3, [r7, #32]
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	2b7f      	cmp	r3, #127	@ 0x7f
 800551c:	d8f0      	bhi.n	8005500 <_TrySendOverflowPacket+0x64>
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	627a      	str	r2, [r7, #36]	@ 0x24
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800552e:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <_TrySendOverflowPacket+0xdc>)
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	4618      	mov	r0, r3
 8005534:	1d3b      	adds	r3, r7, #4
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	461a      	mov	r2, r3
 800553c:	1d3b      	adds	r3, r7, #4
 800553e:	4619      	mov	r1, r3
 8005540:	f7fa fe66 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005544:	4603      	mov	r3, r0
 8005546:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800554e:	4a0a      	ldr	r2, [pc, #40]	@ (8005578 <_TrySendOverflowPacket+0xdc>)
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005554:	4b08      	ldr	r3, [pc, #32]	@ (8005578 <_TrySendOverflowPacket+0xdc>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	3b01      	subs	r3, #1
 800555a:	b2da      	uxtb	r2, r3
 800555c:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <_TrySendOverflowPacket+0xdc>)
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	e004      	b.n	800556c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005562:	4b05      	ldr	r3, [pc, #20]	@ (8005578 <_TrySendOverflowPacket+0xdc>)
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	3301      	adds	r3, #1
 8005568:	4a03      	ldr	r2, [pc, #12]	@ (8005578 <_TrySendOverflowPacket+0xdc>)
 800556a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800556c:	693b      	ldr	r3, [r7, #16]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3730      	adds	r7, #48	@ 0x30
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	200143e0 	.word	0x200143e0
 800557c:	e0001004 	.word	0xe0001004

08005580 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	@ 0x28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800558c:	4b6c      	ldr	r3, [pc, #432]	@ (8005740 <_SendPacket+0x1c0>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d010      	beq.n	80055b6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005594:	4b6a      	ldr	r3, [pc, #424]	@ (8005740 <_SendPacket+0x1c0>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 80a3 	beq.w	80056e4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800559e:	4b68      	ldr	r3, [pc, #416]	@ (8005740 <_SendPacket+0x1c0>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d109      	bne.n	80055ba <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80055a6:	f7ff ff79 	bl	800549c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80055aa:	4b65      	ldr	r3, [pc, #404]	@ (8005740 <_SendPacket+0x1c0>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	f040 809a 	bne.w	80056e8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80055b4:	e001      	b.n	80055ba <_SendPacket+0x3a>
    goto Send;
 80055b6:	bf00      	nop
 80055b8:	e000      	b.n	80055bc <_SendPacket+0x3c>
Send:
 80055ba:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b1f      	cmp	r3, #31
 80055c0:	d809      	bhi.n	80055d6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80055c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005740 <_SendPacket+0x1c0>)
 80055c4:	69da      	ldr	r2, [r3, #28]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f040 808b 	bne.w	80056ec <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b17      	cmp	r3, #23
 80055da:	d807      	bhi.n	80055ec <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3b01      	subs	r3, #1
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	e03d      	b.n	8005668 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80055f8:	d912      	bls.n	8005620 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	09da      	lsrs	r2, r3, #7
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3b01      	subs	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	3a01      	subs	r2, #1
 8005612:	60fa      	str	r2, [r7, #12]
 8005614:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005618:	b2da      	uxtb	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	e006      	b.n	800562e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3b01      	subs	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b7f      	cmp	r3, #127	@ 0x7f
 8005632:	d912      	bls.n	800565a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	09da      	lsrs	r2, r3, #7
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3b01      	subs	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	3a01      	subs	r2, #1
 800564c:	60fa      	str	r2, [r7, #12]
 800564e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005652:	b2da      	uxtb	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	e006      	b.n	8005668 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3b01      	subs	r3, #1
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	b2da      	uxtb	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005668:	4b36      	ldr	r3, [pc, #216]	@ (8005744 <_SendPacket+0x1c4>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800566e:	4b34      	ldr	r3, [pc, #208]	@ (8005740 <_SendPacket+0x1c0>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	627b      	str	r3, [r7, #36]	@ 0x24
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	623b      	str	r3, [r7, #32]
 8005680:	e00b      	b.n	800569a <_SendPacket+0x11a>
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	b2da      	uxtb	r2, r3
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	1c59      	adds	r1, r3, #1
 800568a:	6279      	str	r1, [r7, #36]	@ 0x24
 800568c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	09db      	lsrs	r3, r3, #7
 8005698:	623b      	str	r3, [r7, #32]
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	2b7f      	cmp	r3, #127	@ 0x7f
 800569e:	d8f0      	bhi.n	8005682 <_SendPacket+0x102>
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80056a6:	6a3a      	ldr	r2, [r7, #32]
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]
 80056ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ae:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80056b0:	4b23      	ldr	r3, [pc, #140]	@ (8005740 <_SendPacket+0x1c0>)
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	4618      	mov	r0, r3
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	f7fa fda6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056c4:	4603      	mov	r3, r0
 80056c6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80056ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005740 <_SendPacket+0x1c0>)
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	60d3      	str	r3, [r2, #12]
 80056d4:	e00b      	b.n	80056ee <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80056d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005740 <_SendPacket+0x1c0>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	4b18      	ldr	r3, [pc, #96]	@ (8005740 <_SendPacket+0x1c0>)
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	e004      	b.n	80056ee <_SendPacket+0x16e>
    goto SendDone;
 80056e4:	bf00      	nop
 80056e6:	e002      	b.n	80056ee <_SendPacket+0x16e>
      goto SendDone;
 80056e8:	bf00      	nop
 80056ea:	e000      	b.n	80056ee <_SendPacket+0x16e>
      goto SendDone;
 80056ec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80056ee:	4b14      	ldr	r3, [pc, #80]	@ (8005740 <_SendPacket+0x1c0>)
 80056f0:	7e1b      	ldrb	r3, [r3, #24]
 80056f2:	4619      	mov	r1, r3
 80056f4:	4a14      	ldr	r2, [pc, #80]	@ (8005748 <_SendPacket+0x1c8>)
 80056f6:	460b      	mov	r3, r1
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	440b      	add	r3, r1
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4413      	add	r3, r2
 8005700:	336c      	adds	r3, #108	@ 0x6c
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	4b0e      	ldr	r3, [pc, #56]	@ (8005740 <_SendPacket+0x1c0>)
 8005706:	7e1b      	ldrb	r3, [r3, #24]
 8005708:	4618      	mov	r0, r3
 800570a:	490f      	ldr	r1, [pc, #60]	@ (8005748 <_SendPacket+0x1c8>)
 800570c:	4603      	mov	r3, r0
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	4403      	add	r3, r0
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	440b      	add	r3, r1
 8005716:	3370      	adds	r3, #112	@ 0x70
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d00b      	beq.n	8005736 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800571e:	4b08      	ldr	r3, [pc, #32]	@ (8005740 <_SendPacket+0x1c0>)
 8005720:	789b      	ldrb	r3, [r3, #2]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d107      	bne.n	8005736 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005726:	4b06      	ldr	r3, [pc, #24]	@ (8005740 <_SendPacket+0x1c0>)
 8005728:	2201      	movs	r2, #1
 800572a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800572c:	f7ff fe46 	bl	80053bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005730:	4b03      	ldr	r3, [pc, #12]	@ (8005740 <_SendPacket+0x1c0>)
 8005732:	2200      	movs	r2, #0
 8005734:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005736:	bf00      	nop
 8005738:	3728      	adds	r7, #40	@ 0x28
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200143e0 	.word	0x200143e0
 8005744:	e0001004 	.word	0xe0001004
 8005748:	20012f20 	.word	0x20012f20

0800574c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800575a:	2300      	movs	r3, #0
 800575c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005760:	4917      	ldr	r1, [pc, #92]	@ (80057c0 <SEGGER_SYSVIEW_Init+0x74>)
 8005762:	4818      	ldr	r0, [pc, #96]	@ (80057c4 <SEGGER_SYSVIEW_Init+0x78>)
 8005764:	f7ff fcdc 	bl	8005120 <SEGGER_RTT_AllocUpBuffer>
 8005768:	4603      	mov	r3, r0
 800576a:	b2da      	uxtb	r2, r3
 800576c:	4b16      	ldr	r3, [pc, #88]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800576e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005770:	4b15      	ldr	r3, [pc, #84]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005772:	785a      	ldrb	r2, [r3, #1]
 8005774:	4b14      	ldr	r3, [pc, #80]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005776:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005778:	4b13      	ldr	r3, [pc, #76]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800577a:	7e1b      	ldrb	r3, [r3, #24]
 800577c:	4618      	mov	r0, r3
 800577e:	2300      	movs	r3, #0
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2308      	movs	r3, #8
 8005784:	4a11      	ldr	r2, [pc, #68]	@ (80057cc <SEGGER_SYSVIEW_Init+0x80>)
 8005786:	490f      	ldr	r1, [pc, #60]	@ (80057c4 <SEGGER_SYSVIEW_Init+0x78>)
 8005788:	f7ff fd4e 	bl	8005228 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800578c:	4b0e      	ldr	r3, [pc, #56]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800578e:	2200      	movs	r2, #0
 8005790:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005792:	4b0f      	ldr	r3, [pc, #60]	@ (80057d0 <SEGGER_SYSVIEW_Init+0x84>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a0c      	ldr	r2, [pc, #48]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005798:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800579a:	4a0b      	ldr	r2, [pc, #44]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80057a0:	4a09      	ldr	r2, [pc, #36]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80057a6:	4a08      	ldr	r2, [pc, #32]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80057ac:	4a06      	ldr	r2, [pc, #24]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80057b2:	4b05      	ldr	r3, [pc, #20]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	200133d8 	.word	0x200133d8
 80057c4:	080071e8 	.word	0x080071e8
 80057c8:	200143e0 	.word	0x200143e0
 80057cc:	200143d8 	.word	0x200143d8
 80057d0:	e0001004 	.word	0xe0001004

080057d4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80057dc:	4a04      	ldr	r2, [pc, #16]	@ (80057f0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6113      	str	r3, [r2, #16]
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	200143e0 	.word	0x200143e0

080057f4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80057fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005800:	f04f 0120 	mov.w	r1, #32
 8005804:	f381 8811 	msr	BASEPRI, r1
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	4808      	ldr	r0, [pc, #32]	@ (800582c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800580c:	f7ff fdc9 	bl	80053a2 <_PreparePacket>
 8005810:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	68b8      	ldr	r0, [r7, #8]
 8005818:	f7ff feb2 	bl	8005580 <_SendPacket>
  RECORD_END();
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f383 8811 	msr	BASEPRI, r3
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20014410 	.word	0x20014410

08005830 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800583a:	f3ef 8311 	mrs	r3, BASEPRI
 800583e:	f04f 0120 	mov.w	r1, #32
 8005842:	f381 8811 	msr	BASEPRI, r1
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	4816      	ldr	r0, [pc, #88]	@ (80058a4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800584a:	f7ff fdaa 	bl	80053a2 <_PreparePacket>
 800584e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	e00b      	b.n	8005876 <SEGGER_SYSVIEW_RecordU32+0x46>
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	1c59      	adds	r1, r3, #1
 8005866:	61f9      	str	r1, [r7, #28]
 8005868:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	09db      	lsrs	r3, r3, #7
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	2b7f      	cmp	r3, #127	@ 0x7f
 800587a:	d8f0      	bhi.n	800585e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	61fa      	str	r2, [r7, #28]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	68f9      	ldr	r1, [r7, #12]
 8005890:	6938      	ldr	r0, [r7, #16]
 8005892:	f7ff fe75 	bl	8005580 <_SendPacket>
  RECORD_END();
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f383 8811 	msr	BASEPRI, r3
}
 800589c:	bf00      	nop
 800589e:	3720      	adds	r7, #32
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20014410 	.word	0x20014410

080058a8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08c      	sub	sp, #48	@ 0x30
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80058b4:	f3ef 8311 	mrs	r3, BASEPRI
 80058b8:	f04f 0120 	mov.w	r1, #32
 80058bc:	f381 8811 	msr	BASEPRI, r1
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	4825      	ldr	r0, [pc, #148]	@ (8005958 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80058c4:	f7ff fd6d 	bl	80053a2 <_PreparePacket>
 80058c8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058d6:	e00b      	b.n	80058f0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058de:	1c59      	adds	r1, r3, #1
 80058e0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80058e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ec:	09db      	lsrs	r3, r3, #7
 80058ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80058f4:	d8f0      	bhi.n	80058d8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80058f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005904:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	623b      	str	r3, [r7, #32]
 800590e:	e00b      	b.n	8005928 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	b2da      	uxtb	r2, r3
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	1c59      	adds	r1, r3, #1
 8005918:	6279      	str	r1, [r7, #36]	@ 0x24
 800591a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	09db      	lsrs	r3, r3, #7
 8005926:	623b      	str	r3, [r7, #32]
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	2b7f      	cmp	r3, #127	@ 0x7f
 800592c:	d8f0      	bhi.n	8005910 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	627a      	str	r2, [r7, #36]	@ 0x24
 8005934:	6a3a      	ldr	r2, [r7, #32]
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	6979      	ldr	r1, [r7, #20]
 8005942:	69b8      	ldr	r0, [r7, #24]
 8005944:	f7ff fe1c 	bl	8005580 <_SendPacket>
  RECORD_END();
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f383 8811 	msr	BASEPRI, r3
}
 800594e:	bf00      	nop
 8005950:	3730      	adds	r7, #48	@ 0x30
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20014410 	.word	0x20014410

0800595c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b08e      	sub	sp, #56	@ 0x38
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800596a:	f3ef 8311 	mrs	r3, BASEPRI
 800596e:	f04f 0120 	mov.w	r1, #32
 8005972:	f381 8811 	msr	BASEPRI, r1
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	4832      	ldr	r0, [pc, #200]	@ (8005a44 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800597a:	f7ff fd12 	bl	80053a2 <_PreparePacket>
 800597e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	637b      	str	r3, [r7, #52]	@ 0x34
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	633b      	str	r3, [r7, #48]	@ 0x30
 800598c:	e00b      	b.n	80059a6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	b2da      	uxtb	r2, r3
 8005992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005994:	1c59      	adds	r1, r3, #1
 8005996:	6379      	str	r1, [r7, #52]	@ 0x34
 8005998:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a2:	09db      	lsrs	r3, r3, #7
 80059a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80059aa:	d8f0      	bhi.n	800598e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80059ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	637a      	str	r2, [r7, #52]	@ 0x34
 80059b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059c4:	e00b      	b.n	80059de <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059cc:	1c59      	adds	r1, r3, #1
 80059ce:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80059d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059da:	09db      	lsrs	r3, r3, #7
 80059dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80059e2:	d8f0      	bhi.n	80059c6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80059e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	623b      	str	r3, [r7, #32]
 80059fc:	e00b      	b.n	8005a16 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	1c59      	adds	r1, r3, #1
 8005a06:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	09db      	lsrs	r3, r3, #7
 8005a14:	623b      	str	r3, [r7, #32]
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a1a:	d8f0      	bhi.n	80059fe <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a22:	6a3a      	ldr	r2, [r7, #32]
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	6979      	ldr	r1, [r7, #20]
 8005a30:	69b8      	ldr	r0, [r7, #24]
 8005a32:	f7ff fda5 	bl	8005580 <_SendPacket>
  RECORD_END();
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	f383 8811 	msr	BASEPRI, r3
}
 8005a3c:	bf00      	nop
 8005a3e:	3738      	adds	r7, #56	@ 0x38
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	20014410 	.word	0x20014410

08005a48 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b090      	sub	sp, #64	@ 0x40
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a56:	f3ef 8311 	mrs	r3, BASEPRI
 8005a5a:	f04f 0120 	mov.w	r1, #32
 8005a5e:	f381 8811 	msr	BASEPRI, r1
 8005a62:	61fb      	str	r3, [r7, #28]
 8005a64:	4840      	ldr	r0, [pc, #256]	@ (8005b68 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005a66:	f7ff fc9c 	bl	80053a2 <_PreparePacket>
 8005a6a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a78:	e00b      	b.n	8005a92 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a80:	1c59      	adds	r1, r3, #1
 8005a82:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005a84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8e:	09db      	lsrs	r3, r3, #7
 8005a90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a94:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a96:	d8f0      	bhi.n	8005a7a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ab0:	e00b      	b.n	8005aca <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab8:	1c59      	adds	r1, r3, #1
 8005aba:	6379      	str	r1, [r7, #52]	@ 0x34
 8005abc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	09db      	lsrs	r3, r3, #7
 8005ac8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ace:	d8f0      	bhi.n	8005ab2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	637a      	str	r2, [r7, #52]	@ 0x34
 8005ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ade:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ae8:	e00b      	b.n	8005b02 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af0:	1c59      	adds	r1, r3, #1
 8005af2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005af4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afe:	09db      	lsrs	r3, r3, #7
 8005b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b04:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b06:	d8f0      	bhi.n	8005aea <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b1e:	623b      	str	r3, [r7, #32]
 8005b20:	e00b      	b.n	8005b3a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	1c59      	adds	r1, r3, #1
 8005b2a:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	09db      	lsrs	r3, r3, #7
 8005b38:	623b      	str	r3, [r7, #32]
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b3e:	d8f0      	bhi.n	8005b22 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b46:	6a3a      	ldr	r2, [r7, #32]
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	6979      	ldr	r1, [r7, #20]
 8005b54:	69b8      	ldr	r0, [r7, #24]
 8005b56:	f7ff fd13 	bl	8005580 <_SendPacket>
  RECORD_END();
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f383 8811 	msr	BASEPRI, r3
}
 8005b60:	bf00      	nop
 8005b62:	3740      	adds	r7, #64	@ 0x40
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20014410 	.word	0x20014410

08005b6c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08c      	sub	sp, #48	@ 0x30
 8005b70:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005b72:	4b58      	ldr	r3, [pc, #352]	@ (8005cd4 <SEGGER_SYSVIEW_Start+0x168>)
 8005b74:	2201      	movs	r2, #1
 8005b76:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005b78:	f3ef 8311 	mrs	r3, BASEPRI
 8005b7c:	f04f 0120 	mov.w	r1, #32
 8005b80:	f381 8811 	msr	BASEPRI, r1
 8005b84:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005b86:	4b53      	ldr	r3, [pc, #332]	@ (8005cd4 <SEGGER_SYSVIEW_Start+0x168>)
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	220a      	movs	r2, #10
 8005b8c:	4952      	ldr	r1, [pc, #328]	@ (8005cd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fa fb3e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005b9a:	200a      	movs	r0, #10
 8005b9c:	f7ff fe2a 	bl	80057f4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ba0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ba4:	f04f 0120 	mov.w	r1, #32
 8005ba8:	f381 8811 	msr	BASEPRI, r1
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	484b      	ldr	r0, [pc, #300]	@ (8005cdc <SEGGER_SYSVIEW_Start+0x170>)
 8005bb0:	f7ff fbf7 	bl	80053a2 <_PreparePacket>
 8005bb4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bbe:	4b45      	ldr	r3, [pc, #276]	@ (8005cd4 <SEGGER_SYSVIEW_Start+0x168>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bc4:	e00b      	b.n	8005bde <SEGGER_SYSVIEW_Start+0x72>
 8005bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bcc:	1c59      	adds	r1, r3, #1
 8005bce:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005bd0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bda:	09db      	lsrs	r3, r3, #7
 8005bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005be2:	d8f0      	bhi.n	8005bc6 <SEGGER_SYSVIEW_Start+0x5a>
 8005be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf8:	4b36      	ldr	r3, [pc, #216]	@ (8005cd4 <SEGGER_SYSVIEW_Start+0x168>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	623b      	str	r3, [r7, #32]
 8005bfe:	e00b      	b.n	8005c18 <SEGGER_SYSVIEW_Start+0xac>
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	1c59      	adds	r1, r3, #1
 8005c08:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	09db      	lsrs	r3, r3, #7
 8005c16:	623b      	str	r3, [r7, #32]
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c1c:	d8f0      	bhi.n	8005c00 <SEGGER_SYSVIEW_Start+0x94>
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c24:	6a3a      	ldr	r2, [r7, #32]
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	4b28      	ldr	r3, [pc, #160]	@ (8005cd4 <SEGGER_SYSVIEW_Start+0x168>)
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	e00b      	b.n	8005c52 <SEGGER_SYSVIEW_Start+0xe6>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	1c59      	adds	r1, r3, #1
 8005c42:	61f9      	str	r1, [r7, #28]
 8005c44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	09db      	lsrs	r3, r3, #7
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c56:	d8f0      	bhi.n	8005c3a <SEGGER_SYSVIEW_Start+0xce>
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	61fa      	str	r2, [r7, #28]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	e00b      	b.n	8005c8a <SEGGER_SYSVIEW_Start+0x11e>
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	1c59      	adds	r1, r3, #1
 8005c7a:	6179      	str	r1, [r7, #20]
 8005c7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	09db      	lsrs	r3, r3, #7
 8005c88:	613b      	str	r3, [r7, #16]
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c8e:	d8f0      	bhi.n	8005c72 <SEGGER_SYSVIEW_Start+0x106>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	617a      	str	r2, [r7, #20]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ca0:	2218      	movs	r2, #24
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff fc6b 	bl	8005580 <_SendPacket>
      RECORD_END();
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005cb0:	4b08      	ldr	r3, [pc, #32]	@ (8005cd4 <SEGGER_SYSVIEW_Start+0x168>)
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005cb8:	4b06      	ldr	r3, [pc, #24]	@ (8005cd4 <SEGGER_SYSVIEW_Start+0x168>)
 8005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005cbe:	f000 f9eb 	bl	8006098 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005cc2:	f000 f9b1 	bl	8006028 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005cc6:	f000 fc83 	bl	80065d0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005cca:	bf00      	nop
 8005ccc:	3730      	adds	r7, #48	@ 0x30
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	200143e0 	.word	0x200143e0
 8005cd8:	08007214 	.word	0x08007214
 8005cdc:	20014410 	.word	0x20014410

08005ce0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ce6:	f3ef 8311 	mrs	r3, BASEPRI
 8005cea:	f04f 0120 	mov.w	r1, #32
 8005cee:	f381 8811 	msr	BASEPRI, r1
 8005cf2:	607b      	str	r3, [r7, #4]
 8005cf4:	480b      	ldr	r0, [pc, #44]	@ (8005d24 <SEGGER_SYSVIEW_Stop+0x44>)
 8005cf6:	f7ff fb54 	bl	80053a2 <_PreparePacket>
 8005cfa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d28 <SEGGER_SYSVIEW_Stop+0x48>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d007      	beq.n	8005d14 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005d04:	220b      	movs	r2, #11
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	6838      	ldr	r0, [r7, #0]
 8005d0a:	f7ff fc39 	bl	8005580 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005d0e:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f383 8811 	msr	BASEPRI, r3
}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20014410 	.word	0x20014410
 8005d28:	200143e0 	.word	0x200143e0

08005d2c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08c      	sub	sp, #48	@ 0x30
 8005d30:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d32:	f3ef 8311 	mrs	r3, BASEPRI
 8005d36:	f04f 0120 	mov.w	r1, #32
 8005d3a:	f381 8811 	msr	BASEPRI, r1
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	4845      	ldr	r0, [pc, #276]	@ (8005e58 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005d42:	f7ff fb2e 	bl	80053a2 <_PreparePacket>
 8005d46:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d50:	4b42      	ldr	r3, [pc, #264]	@ (8005e5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d56:	e00b      	b.n	8005d70 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6c:	09db      	lsrs	r3, r3, #7
 8005d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d72:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d74:	d8f0      	bhi.n	8005d58 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d8a:	4b34      	ldr	r3, [pc, #208]	@ (8005e5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	623b      	str	r3, [r7, #32]
 8005d90:	e00b      	b.n	8005daa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	1c59      	adds	r1, r3, #1
 8005d9a:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	09db      	lsrs	r3, r3, #7
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dae:	d8f0      	bhi.n	8005d92 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005db6:	6a3a      	ldr	r2, [r7, #32]
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	4b25      	ldr	r3, [pc, #148]	@ (8005e5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	61bb      	str	r3, [r7, #24]
 8005dca:	e00b      	b.n	8005de4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	1c59      	adds	r1, r3, #1
 8005dd4:	61f9      	str	r1, [r7, #28]
 8005dd6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	09db      	lsrs	r3, r3, #7
 8005de2:	61bb      	str	r3, [r7, #24]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005de8:	d8f0      	bhi.n	8005dcc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	61fa      	str	r2, [r7, #28]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	e00b      	b.n	8005e1c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1c59      	adds	r1, r3, #1
 8005e0c:	6179      	str	r1, [r7, #20]
 8005e0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	09db      	lsrs	r3, r3, #7
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e20:	d8f0      	bhi.n	8005e04 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	617a      	str	r2, [r7, #20]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005e32:	2218      	movs	r2, #24
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	68b8      	ldr	r0, [r7, #8]
 8005e38:	f7ff fba2 	bl	8005580 <_SendPacket>
  RECORD_END();
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005e42:	4b06      	ldr	r3, [pc, #24]	@ (8005e5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005e4a:	4b04      	ldr	r3, [pc, #16]	@ (8005e5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	4798      	blx	r3
  }
}
 8005e50:	bf00      	nop
 8005e52:	3730      	adds	r7, #48	@ 0x30
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20014410 	.word	0x20014410
 8005e5c:	200143e0 	.word	0x200143e0

08005e60 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b092      	sub	sp, #72	@ 0x48
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005e68:	f3ef 8311 	mrs	r3, BASEPRI
 8005e6c:	f04f 0120 	mov.w	r1, #32
 8005e70:	f381 8811 	msr	BASEPRI, r1
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	486a      	ldr	r0, [pc, #424]	@ (8006020 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005e78:	f7ff fa93 	bl	80053a2 <_PreparePacket>
 8005e7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4b66      	ldr	r3, [pc, #408]	@ (8006024 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e92:	e00b      	b.n	8005eac <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e9a:	1c59      	adds	r1, r3, #1
 8005e9c:	6479      	str	r1, [r7, #68]	@ 0x44
 8005e9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ea8:	09db      	lsrs	r3, r3, #7
 8005eaa:	643b      	str	r3, [r7, #64]	@ 0x40
 8005eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eae:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eb0:	d8f0      	bhi.n	8005e94 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005eb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ecc:	e00b      	b.n	8005ee6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed4:	1c59      	adds	r1, r3, #1
 8005ed6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005ed8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee2:	09db      	lsrs	r3, r3, #7
 8005ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eea:	d8f0      	bhi.n	8005ece <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ef2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	4619      	mov	r1, r3
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7ff f9ff 	bl	8005308 <_EncodeStr>
 8005f0a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005f0c:	2209      	movs	r2, #9
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	6938      	ldr	r0, [r7, #16]
 8005f12:	f7ff fb35 	bl	8005580 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b40      	ldr	r3, [pc, #256]	@ (8006024 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f2a:	e00b      	b.n	8005f44 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	1c59      	adds	r1, r3, #1
 8005f34:	6379      	str	r1, [r7, #52]	@ 0x34
 8005f36:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	09db      	lsrs	r3, r3, #7
 8005f42:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f46:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f48:	d8f0      	bhi.n	8005f2c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f64:	e00b      	b.n	8005f7e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005f70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7a:	09db      	lsrs	r3, r3, #7
 8005f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f80:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f82:	d8f0      	bhi.n	8005f66 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f92:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	623b      	str	r3, [r7, #32]
 8005f9e:	e00b      	b.n	8005fb8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	6279      	str	r1, [r7, #36]	@ 0x24
 8005faa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	09db      	lsrs	r3, r3, #7
 8005fb6:	623b      	str	r3, [r7, #32]
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fbc:	d8f0      	bhi.n	8005fa0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fc4:	6a3a      	ldr	r2, [r7, #32]
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	e00b      	b.n	8005ff0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	1c59      	adds	r1, r3, #1
 8005fe0:	61f9      	str	r1, [r7, #28]
 8005fe2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	09db      	lsrs	r3, r3, #7
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ff4:	d8f0      	bhi.n	8005fd8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	61fa      	str	r2, [r7, #28]
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006006:	2215      	movs	r2, #21
 8006008:	68f9      	ldr	r1, [r7, #12]
 800600a:	6938      	ldr	r0, [r7, #16]
 800600c:	f7ff fab8 	bl	8005580 <_SendPacket>
  RECORD_END();
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f383 8811 	msr	BASEPRI, r3
}
 8006016:	bf00      	nop
 8006018:	3748      	adds	r7, #72	@ 0x48
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20014410 	.word	0x20014410
 8006024:	200143e0 	.word	0x200143e0

08006028 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800602c:	4b07      	ldr	r3, [pc, #28]	@ (800604c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d008      	beq.n	8006046 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006034:	4b05      	ldr	r3, [pc, #20]	@ (800604c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800603e:	4b03      	ldr	r3, [pc, #12]	@ (800604c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	4798      	blx	r3
  }
}
 8006046:	bf00      	nop
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	200143e0 	.word	0x200143e0

08006050 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006058:	f3ef 8311 	mrs	r3, BASEPRI
 800605c:	f04f 0120 	mov.w	r1, #32
 8006060:	f381 8811 	msr	BASEPRI, r1
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	480b      	ldr	r0, [pc, #44]	@ (8006094 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006068:	f7ff f99b 	bl	80053a2 <_PreparePacket>
 800606c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800606e:	2280      	movs	r2, #128	@ 0x80
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	6938      	ldr	r0, [r7, #16]
 8006074:	f7ff f948 	bl	8005308 <_EncodeStr>
 8006078:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800607a:	220e      	movs	r2, #14
 800607c:	68f9      	ldr	r1, [r7, #12]
 800607e:	6938      	ldr	r0, [r7, #16]
 8006080:	f7ff fa7e 	bl	8005580 <_SendPacket>
  RECORD_END();
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f383 8811 	msr	BASEPRI, r3
}
 800608a:	bf00      	nop
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20014410 	.word	0x20014410

08006098 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800609e:	4b15      	ldr	r3, [pc, #84]	@ (80060f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01a      	beq.n	80060dc <SEGGER_SYSVIEW_RecordSystime+0x44>
 80060a6:	4b13      	ldr	r3, [pc, #76]	@ (80060f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d015      	beq.n	80060dc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80060b0:	4b10      	ldr	r3, [pc, #64]	@ (80060f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4798      	blx	r3
 80060b8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80060bc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80060be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	000a      	movs	r2, r1
 80060cc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80060ce:	4613      	mov	r3, r2
 80060d0:	461a      	mov	r2, r3
 80060d2:	4621      	mov	r1, r4
 80060d4:	200d      	movs	r0, #13
 80060d6:	f7ff fbe7 	bl	80058a8 <SEGGER_SYSVIEW_RecordU32x2>
 80060da:	e006      	b.n	80060ea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80060dc:	4b06      	ldr	r3, [pc, #24]	@ (80060f8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4619      	mov	r1, r3
 80060e2:	200c      	movs	r0, #12
 80060e4:	f7ff fba4 	bl	8005830 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80060e8:	bf00      	nop
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd90      	pop	{r4, r7, pc}
 80060f2:	bf00      	nop
 80060f4:	200143e0 	.word	0x200143e0
 80060f8:	e0001004 	.word	0xe0001004

080060fc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006102:	f3ef 8311 	mrs	r3, BASEPRI
 8006106:	f04f 0120 	mov.w	r1, #32
 800610a:	f381 8811 	msr	BASEPRI, r1
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	4819      	ldr	r0, [pc, #100]	@ (8006178 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006112:	f7ff f946 	bl	80053a2 <_PreparePacket>
 8006116:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800611c:	4b17      	ldr	r3, [pc, #92]	@ (800617c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006124:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	e00b      	b.n	8006148 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	1c59      	adds	r1, r3, #1
 8006138:	6179      	str	r1, [r7, #20]
 800613a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	09db      	lsrs	r3, r3, #7
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b7f      	cmp	r3, #127	@ 0x7f
 800614c:	d8f0      	bhi.n	8006130 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	617a      	str	r2, [r7, #20]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800615e:	2202      	movs	r2, #2
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	68b8      	ldr	r0, [r7, #8]
 8006164:	f7ff fa0c 	bl	8005580 <_SendPacket>
  RECORD_END();
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f383 8811 	msr	BASEPRI, r3
}
 800616e:	bf00      	nop
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20014410 	.word	0x20014410
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006186:	f3ef 8311 	mrs	r3, BASEPRI
 800618a:	f04f 0120 	mov.w	r1, #32
 800618e:	f381 8811 	msr	BASEPRI, r1
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	4807      	ldr	r0, [pc, #28]	@ (80061b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006196:	f7ff f904 	bl	80053a2 <_PreparePacket>
 800619a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800619c:	2203      	movs	r2, #3
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6838      	ldr	r0, [r7, #0]
 80061a2:	f7ff f9ed 	bl	8005580 <_SendPacket>
  RECORD_END();
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f383 8811 	msr	BASEPRI, r3
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20014410 	.word	0x20014410

080061b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061be:	f3ef 8311 	mrs	r3, BASEPRI
 80061c2:	f04f 0120 	mov.w	r1, #32
 80061c6:	f381 8811 	msr	BASEPRI, r1
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	4807      	ldr	r0, [pc, #28]	@ (80061ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80061ce:	f7ff f8e8 	bl	80053a2 <_PreparePacket>
 80061d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80061d4:	2212      	movs	r2, #18
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6838      	ldr	r0, [r7, #0]
 80061da:	f7ff f9d1 	bl	8005580 <_SendPacket>
  RECORD_END();
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f383 8811 	msr	BASEPRI, r3
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20014410 	.word	0x20014410

080061f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061f6:	f3ef 8311 	mrs	r3, BASEPRI
 80061fa:	f04f 0120 	mov.w	r1, #32
 80061fe:	f381 8811 	msr	BASEPRI, r1
 8006202:	607b      	str	r3, [r7, #4]
 8006204:	4807      	ldr	r0, [pc, #28]	@ (8006224 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006206:	f7ff f8cc 	bl	80053a2 <_PreparePacket>
 800620a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800620c:	2211      	movs	r2, #17
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6838      	ldr	r0, [r7, #0]
 8006212:	f7ff f9b5 	bl	8005580 <_SendPacket>
  RECORD_END();
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f383 8811 	msr	BASEPRI, r3
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20014410 	.word	0x20014410

08006228 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006230:	f3ef 8311 	mrs	r3, BASEPRI
 8006234:	f04f 0120 	mov.w	r1, #32
 8006238:	f381 8811 	msr	BASEPRI, r1
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	4819      	ldr	r0, [pc, #100]	@ (80062a4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006240:	f7ff f8af 	bl	80053a2 <_PreparePacket>
 8006244:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800624a:	4b17      	ldr	r3, [pc, #92]	@ (80062a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	61bb      	str	r3, [r7, #24]
 800625c:	e00b      	b.n	8006276 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	1c59      	adds	r1, r3, #1
 8006266:	61f9      	str	r1, [r7, #28]
 8006268:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	09db      	lsrs	r3, r3, #7
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b7f      	cmp	r3, #127	@ 0x7f
 800627a:	d8f0      	bhi.n	800625e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	61fa      	str	r2, [r7, #28]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800628c:	2208      	movs	r2, #8
 800628e:	68f9      	ldr	r1, [r7, #12]
 8006290:	6938      	ldr	r0, [r7, #16]
 8006292:	f7ff f975 	bl	8005580 <_SendPacket>
  RECORD_END();
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f383 8811 	msr	BASEPRI, r3
}
 800629c:	bf00      	nop
 800629e:	3720      	adds	r7, #32
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20014410 	.word	0x20014410
 80062a8:	200143e0 	.word	0x200143e0

080062ac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062b4:	f3ef 8311 	mrs	r3, BASEPRI
 80062b8:	f04f 0120 	mov.w	r1, #32
 80062bc:	f381 8811 	msr	BASEPRI, r1
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	4819      	ldr	r0, [pc, #100]	@ (8006328 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80062c4:	f7ff f86d 	bl	80053a2 <_PreparePacket>
 80062c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062ce:	4b17      	ldr	r3, [pc, #92]	@ (800632c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	61fb      	str	r3, [r7, #28]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	e00b      	b.n	80062fa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	1c59      	adds	r1, r3, #1
 80062ea:	61f9      	str	r1, [r7, #28]
 80062ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	09db      	lsrs	r3, r3, #7
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80062fe:	d8f0      	bhi.n	80062e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	61fa      	str	r2, [r7, #28]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006310:	2204      	movs	r2, #4
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	6938      	ldr	r0, [r7, #16]
 8006316:	f7ff f933 	bl	8005580 <_SendPacket>
  RECORD_END();
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f383 8811 	msr	BASEPRI, r3
}
 8006320:	bf00      	nop
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20014410 	.word	0x20014410
 800632c:	200143e0 	.word	0x200143e0

08006330 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006338:	f3ef 8311 	mrs	r3, BASEPRI
 800633c:	f04f 0120 	mov.w	r1, #32
 8006340:	f381 8811 	msr	BASEPRI, r1
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	4819      	ldr	r0, [pc, #100]	@ (80063ac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006348:	f7ff f82b 	bl	80053a2 <_PreparePacket>
 800634c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006352:	4b17      	ldr	r3, [pc, #92]	@ (80063b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	e00b      	b.n	800637e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	1c59      	adds	r1, r3, #1
 800636e:	61f9      	str	r1, [r7, #28]
 8006370:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	09db      	lsrs	r3, r3, #7
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b7f      	cmp	r3, #127	@ 0x7f
 8006382:	d8f0      	bhi.n	8006366 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	61fa      	str	r2, [r7, #28]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006394:	2206      	movs	r2, #6
 8006396:	68f9      	ldr	r1, [r7, #12]
 8006398:	6938      	ldr	r0, [r7, #16]
 800639a:	f7ff f8f1 	bl	8005580 <_SendPacket>
  RECORD_END();
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f383 8811 	msr	BASEPRI, r3
}
 80063a4:	bf00      	nop
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20014410 	.word	0x20014410
 80063b0:	200143e0 	.word	0x200143e0

080063b4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08a      	sub	sp, #40	@ 0x28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80063be:	f3ef 8311 	mrs	r3, BASEPRI
 80063c2:	f04f 0120 	mov.w	r1, #32
 80063c6:	f381 8811 	msr	BASEPRI, r1
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	4827      	ldr	r0, [pc, #156]	@ (800646c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80063ce:	f7fe ffe8 	bl	80053a2 <_PreparePacket>
 80063d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063d8:	4b25      	ldr	r3, [pc, #148]	@ (8006470 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	623b      	str	r3, [r7, #32]
 80063ea:	e00b      	b.n	8006404 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f2:	1c59      	adds	r1, r3, #1
 80063f4:	6279      	str	r1, [r7, #36]	@ 0x24
 80063f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	09db      	lsrs	r3, r3, #7
 8006402:	623b      	str	r3, [r7, #32]
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	2b7f      	cmp	r3, #127	@ 0x7f
 8006408:	d8f0      	bhi.n	80063ec <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006410:	6a3a      	ldr	r2, [r7, #32]
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	e00b      	b.n	800643c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	b2da      	uxtb	r2, r3
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	1c59      	adds	r1, r3, #1
 800642c:	61f9      	str	r1, [r7, #28]
 800642e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	09db      	lsrs	r3, r3, #7
 800643a:	61bb      	str	r3, [r7, #24]
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006440:	d8f0      	bhi.n	8006424 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	61fa      	str	r2, [r7, #28]
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006452:	2207      	movs	r2, #7
 8006454:	68f9      	ldr	r1, [r7, #12]
 8006456:	6938      	ldr	r0, [r7, #16]
 8006458:	f7ff f892 	bl	8005580 <_SendPacket>
  RECORD_END();
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f383 8811 	msr	BASEPRI, r3
}
 8006462:	bf00      	nop
 8006464:	3728      	adds	r7, #40	@ 0x28
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20014410 	.word	0x20014410
 8006470:	200143e0 	.word	0x200143e0

08006474 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800647c:	4b04      	ldr	r3, [pc, #16]	@ (8006490 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	1ad3      	subs	r3, r2, r3
}
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	200143e0 	.word	0x200143e0

08006494 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b08c      	sub	sp, #48	@ 0x30
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800649e:	4b3b      	ldr	r3, [pc, #236]	@ (800658c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d06d      	beq.n	8006582 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80064a6:	4b39      	ldr	r3, [pc, #228]	@ (800658c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80064ac:	2300      	movs	r3, #0
 80064ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064b0:	e008      	b.n	80064c4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80064b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80064b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80064be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c0:	3301      	adds	r3, #1
 80064c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d3f2      	bcc.n	80064b2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80064cc:	e000      	b.n	80064d0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80064ce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80064d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d055      	beq.n	8006582 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064d6:	f3ef 8311 	mrs	r3, BASEPRI
 80064da:	f04f 0120 	mov.w	r1, #32
 80064de:	f381 8811 	msr	BASEPRI, r1
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	482a      	ldr	r0, [pc, #168]	@ (8006590 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80064e6:	f7fe ff5c 	bl	80053a2 <_PreparePacket>
 80064ea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	623b      	str	r3, [r7, #32]
 80064f8:	e00b      	b.n	8006512 <SEGGER_SYSVIEW_SendModule+0x7e>
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	1c59      	adds	r1, r3, #1
 8006502:	6279      	str	r1, [r7, #36]	@ 0x24
 8006504:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	09db      	lsrs	r3, r3, #7
 8006510:	623b      	str	r3, [r7, #32]
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	2b7f      	cmp	r3, #127	@ 0x7f
 8006516:	d8f0      	bhi.n	80064fa <SEGGER_SYSVIEW_SendModule+0x66>
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	627a      	str	r2, [r7, #36]	@ 0x24
 800651e:	6a3a      	ldr	r2, [r7, #32]
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	e00b      	b.n	800654c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	b2da      	uxtb	r2, r3
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	1c59      	adds	r1, r3, #1
 800653c:	61f9      	str	r1, [r7, #28]
 800653e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	09db      	lsrs	r3, r3, #7
 800654a:	61bb      	str	r3, [r7, #24]
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006550:	d8f0      	bhi.n	8006534 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	61fa      	str	r2, [r7, #28]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2280      	movs	r2, #128	@ 0x80
 8006568:	4619      	mov	r1, r3
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f7fe fecc 	bl	8005308 <_EncodeStr>
 8006570:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006572:	2216      	movs	r2, #22
 8006574:	68f9      	ldr	r1, [r7, #12]
 8006576:	6938      	ldr	r0, [r7, #16]
 8006578:	f7ff f802 	bl	8005580 <_SendPacket>
      RECORD_END();
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006582:	bf00      	nop
 8006584:	3730      	adds	r7, #48	@ 0x30
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20014408 	.word	0x20014408
 8006590:	20014410 	.word	0x20014410

08006594 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800659a:	4b0c      	ldr	r3, [pc, #48]	@ (80065cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00f      	beq.n	80065c2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80065a2:	4b0a      	ldr	r3, [pc, #40]	@ (80065cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f2      	bne.n	80065a8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20014408 	.word	0x20014408

080065d0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80065d6:	f3ef 8311 	mrs	r3, BASEPRI
 80065da:	f04f 0120 	mov.w	r1, #32
 80065de:	f381 8811 	msr	BASEPRI, r1
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	4817      	ldr	r0, [pc, #92]	@ (8006644 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80065e6:	f7fe fedc 	bl	80053a2 <_PreparePacket>
 80065ea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	4b14      	ldr	r3, [pc, #80]	@ (8006648 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	e00b      	b.n	8006614 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	1c59      	adds	r1, r3, #1
 8006604:	6179      	str	r1, [r7, #20]
 8006606:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	09db      	lsrs	r3, r3, #7
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b7f      	cmp	r3, #127	@ 0x7f
 8006618:	d8f0      	bhi.n	80065fc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	617a      	str	r2, [r7, #20]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800662a:	221b      	movs	r2, #27
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	68b8      	ldr	r0, [r7, #8]
 8006630:	f7fe ffa6 	bl	8005580 <_SendPacket>
  RECORD_END();
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f383 8811 	msr	BASEPRI, r3
}
 800663a:	bf00      	nop
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20014410 	.word	0x20014410
 8006648:	2001440c 	.word	0x2001440c

0800664c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	@ 0x28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006654:	f3ef 8311 	mrs	r3, BASEPRI
 8006658:	f04f 0120 	mov.w	r1, #32
 800665c:	f381 8811 	msr	BASEPRI, r1
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	4827      	ldr	r0, [pc, #156]	@ (8006700 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006664:	f7fe fe9d 	bl	80053a2 <_PreparePacket>
 8006668:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800666a:	2280      	movs	r2, #128	@ 0x80
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	6938      	ldr	r0, [r7, #16]
 8006670:	f7fe fe4a 	bl	8005308 <_EncodeStr>
 8006674:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	627b      	str	r3, [r7, #36]	@ 0x24
 800667a:	2301      	movs	r3, #1
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	e00b      	b.n	8006698 <SEGGER_SYSVIEW_Warn+0x4c>
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	b2da      	uxtb	r2, r3
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	1c59      	adds	r1, r3, #1
 8006688:	6279      	str	r1, [r7, #36]	@ 0x24
 800668a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	09db      	lsrs	r3, r3, #7
 8006696:	623b      	str	r3, [r7, #32]
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	2b7f      	cmp	r3, #127	@ 0x7f
 800669c:	d8f0      	bhi.n	8006680 <SEGGER_SYSVIEW_Warn+0x34>
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80066a4:	6a3a      	ldr	r2, [r7, #32]
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	2300      	movs	r3, #0
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	e00b      	b.n	80066d0 <SEGGER_SYSVIEW_Warn+0x84>
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	1c59      	adds	r1, r3, #1
 80066c0:	61f9      	str	r1, [r7, #28]
 80066c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	09db      	lsrs	r3, r3, #7
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80066d4:	d8f0      	bhi.n	80066b8 <SEGGER_SYSVIEW_Warn+0x6c>
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	61fa      	str	r2, [r7, #28]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066e6:	221a      	movs	r2, #26
 80066e8:	68f9      	ldr	r1, [r7, #12]
 80066ea:	6938      	ldr	r0, [r7, #16]
 80066ec:	f7fe ff48 	bl	8005580 <_SendPacket>
  RECORD_END();
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f383 8811 	msr	BASEPRI, r3
}
 80066f6:	bf00      	nop
 80066f8:	3728      	adds	r7, #40	@ 0x28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20014410 	.word	0x20014410

08006704 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	2000      	movs	r0, #0
 8006718:	f7fe fcdc 	bl	80050d4 <SEGGER_RTT_Write>
  return len;
 800671c:	683b      	ldr	r3, [r7, #0]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <std>:
 8006728:	2300      	movs	r3, #0
 800672a:	b510      	push	{r4, lr}
 800672c:	4604      	mov	r4, r0
 800672e:	e9c0 3300 	strd	r3, r3, [r0]
 8006732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006736:	6083      	str	r3, [r0, #8]
 8006738:	8181      	strh	r1, [r0, #12]
 800673a:	6643      	str	r3, [r0, #100]	@ 0x64
 800673c:	81c2      	strh	r2, [r0, #14]
 800673e:	6183      	str	r3, [r0, #24]
 8006740:	4619      	mov	r1, r3
 8006742:	2208      	movs	r2, #8
 8006744:	305c      	adds	r0, #92	@ 0x5c
 8006746:	f000 f9f7 	bl	8006b38 <memset>
 800674a:	4b0d      	ldr	r3, [pc, #52]	@ (8006780 <std+0x58>)
 800674c:	6263      	str	r3, [r4, #36]	@ 0x24
 800674e:	4b0d      	ldr	r3, [pc, #52]	@ (8006784 <std+0x5c>)
 8006750:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006752:	4b0d      	ldr	r3, [pc, #52]	@ (8006788 <std+0x60>)
 8006754:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006756:	4b0d      	ldr	r3, [pc, #52]	@ (800678c <std+0x64>)
 8006758:	6323      	str	r3, [r4, #48]	@ 0x30
 800675a:	4b0d      	ldr	r3, [pc, #52]	@ (8006790 <std+0x68>)
 800675c:	6224      	str	r4, [r4, #32]
 800675e:	429c      	cmp	r4, r3
 8006760:	d006      	beq.n	8006770 <std+0x48>
 8006762:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006766:	4294      	cmp	r4, r2
 8006768:	d002      	beq.n	8006770 <std+0x48>
 800676a:	33d0      	adds	r3, #208	@ 0xd0
 800676c:	429c      	cmp	r4, r3
 800676e:	d105      	bne.n	800677c <std+0x54>
 8006770:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006778:	f000 ba3e 	b.w	8006bf8 <__retarget_lock_init_recursive>
 800677c:	bd10      	pop	{r4, pc}
 800677e:	bf00      	nop
 8006780:	08006969 	.word	0x08006969
 8006784:	0800698b 	.word	0x0800698b
 8006788:	080069c3 	.word	0x080069c3
 800678c:	080069e7 	.word	0x080069e7
 8006790:	200144f4 	.word	0x200144f4

08006794 <stdio_exit_handler>:
 8006794:	4a02      	ldr	r2, [pc, #8]	@ (80067a0 <stdio_exit_handler+0xc>)
 8006796:	4903      	ldr	r1, [pc, #12]	@ (80067a4 <stdio_exit_handler+0x10>)
 8006798:	4803      	ldr	r0, [pc, #12]	@ (80067a8 <stdio_exit_handler+0x14>)
 800679a:	f000 b869 	b.w	8006870 <_fwalk_sglue>
 800679e:	bf00      	nop
 80067a0:	20000010 	.word	0x20000010
 80067a4:	08006f15 	.word	0x08006f15
 80067a8:	20000020 	.word	0x20000020

080067ac <cleanup_stdio>:
 80067ac:	6841      	ldr	r1, [r0, #4]
 80067ae:	4b0c      	ldr	r3, [pc, #48]	@ (80067e0 <cleanup_stdio+0x34>)
 80067b0:	4299      	cmp	r1, r3
 80067b2:	b510      	push	{r4, lr}
 80067b4:	4604      	mov	r4, r0
 80067b6:	d001      	beq.n	80067bc <cleanup_stdio+0x10>
 80067b8:	f000 fbac 	bl	8006f14 <_fflush_r>
 80067bc:	68a1      	ldr	r1, [r4, #8]
 80067be:	4b09      	ldr	r3, [pc, #36]	@ (80067e4 <cleanup_stdio+0x38>)
 80067c0:	4299      	cmp	r1, r3
 80067c2:	d002      	beq.n	80067ca <cleanup_stdio+0x1e>
 80067c4:	4620      	mov	r0, r4
 80067c6:	f000 fba5 	bl	8006f14 <_fflush_r>
 80067ca:	68e1      	ldr	r1, [r4, #12]
 80067cc:	4b06      	ldr	r3, [pc, #24]	@ (80067e8 <cleanup_stdio+0x3c>)
 80067ce:	4299      	cmp	r1, r3
 80067d0:	d004      	beq.n	80067dc <cleanup_stdio+0x30>
 80067d2:	4620      	mov	r0, r4
 80067d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d8:	f000 bb9c 	b.w	8006f14 <_fflush_r>
 80067dc:	bd10      	pop	{r4, pc}
 80067de:	bf00      	nop
 80067e0:	200144f4 	.word	0x200144f4
 80067e4:	2001455c 	.word	0x2001455c
 80067e8:	200145c4 	.word	0x200145c4

080067ec <global_stdio_init.part.0>:
 80067ec:	b510      	push	{r4, lr}
 80067ee:	4b0b      	ldr	r3, [pc, #44]	@ (800681c <global_stdio_init.part.0+0x30>)
 80067f0:	4c0b      	ldr	r4, [pc, #44]	@ (8006820 <global_stdio_init.part.0+0x34>)
 80067f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006824 <global_stdio_init.part.0+0x38>)
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	4620      	mov	r0, r4
 80067f8:	2200      	movs	r2, #0
 80067fa:	2104      	movs	r1, #4
 80067fc:	f7ff ff94 	bl	8006728 <std>
 8006800:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006804:	2201      	movs	r2, #1
 8006806:	2109      	movs	r1, #9
 8006808:	f7ff ff8e 	bl	8006728 <std>
 800680c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006810:	2202      	movs	r2, #2
 8006812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006816:	2112      	movs	r1, #18
 8006818:	f7ff bf86 	b.w	8006728 <std>
 800681c:	2001462c 	.word	0x2001462c
 8006820:	200144f4 	.word	0x200144f4
 8006824:	08006795 	.word	0x08006795

08006828 <__sfp_lock_acquire>:
 8006828:	4801      	ldr	r0, [pc, #4]	@ (8006830 <__sfp_lock_acquire+0x8>)
 800682a:	f000 b9e6 	b.w	8006bfa <__retarget_lock_acquire_recursive>
 800682e:	bf00      	nop
 8006830:	20014635 	.word	0x20014635

08006834 <__sfp_lock_release>:
 8006834:	4801      	ldr	r0, [pc, #4]	@ (800683c <__sfp_lock_release+0x8>)
 8006836:	f000 b9e1 	b.w	8006bfc <__retarget_lock_release_recursive>
 800683a:	bf00      	nop
 800683c:	20014635 	.word	0x20014635

08006840 <__sinit>:
 8006840:	b510      	push	{r4, lr}
 8006842:	4604      	mov	r4, r0
 8006844:	f7ff fff0 	bl	8006828 <__sfp_lock_acquire>
 8006848:	6a23      	ldr	r3, [r4, #32]
 800684a:	b11b      	cbz	r3, 8006854 <__sinit+0x14>
 800684c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006850:	f7ff bff0 	b.w	8006834 <__sfp_lock_release>
 8006854:	4b04      	ldr	r3, [pc, #16]	@ (8006868 <__sinit+0x28>)
 8006856:	6223      	str	r3, [r4, #32]
 8006858:	4b04      	ldr	r3, [pc, #16]	@ (800686c <__sinit+0x2c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1f5      	bne.n	800684c <__sinit+0xc>
 8006860:	f7ff ffc4 	bl	80067ec <global_stdio_init.part.0>
 8006864:	e7f2      	b.n	800684c <__sinit+0xc>
 8006866:	bf00      	nop
 8006868:	080067ad 	.word	0x080067ad
 800686c:	2001462c 	.word	0x2001462c

08006870 <_fwalk_sglue>:
 8006870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006874:	4607      	mov	r7, r0
 8006876:	4688      	mov	r8, r1
 8006878:	4614      	mov	r4, r2
 800687a:	2600      	movs	r6, #0
 800687c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006880:	f1b9 0901 	subs.w	r9, r9, #1
 8006884:	d505      	bpl.n	8006892 <_fwalk_sglue+0x22>
 8006886:	6824      	ldr	r4, [r4, #0]
 8006888:	2c00      	cmp	r4, #0
 800688a:	d1f7      	bne.n	800687c <_fwalk_sglue+0xc>
 800688c:	4630      	mov	r0, r6
 800688e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006892:	89ab      	ldrh	r3, [r5, #12]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d907      	bls.n	80068a8 <_fwalk_sglue+0x38>
 8006898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800689c:	3301      	adds	r3, #1
 800689e:	d003      	beq.n	80068a8 <_fwalk_sglue+0x38>
 80068a0:	4629      	mov	r1, r5
 80068a2:	4638      	mov	r0, r7
 80068a4:	47c0      	blx	r8
 80068a6:	4306      	orrs	r6, r0
 80068a8:	3568      	adds	r5, #104	@ 0x68
 80068aa:	e7e9      	b.n	8006880 <_fwalk_sglue+0x10>

080068ac <_puts_r>:
 80068ac:	6a03      	ldr	r3, [r0, #32]
 80068ae:	b570      	push	{r4, r5, r6, lr}
 80068b0:	6884      	ldr	r4, [r0, #8]
 80068b2:	4605      	mov	r5, r0
 80068b4:	460e      	mov	r6, r1
 80068b6:	b90b      	cbnz	r3, 80068bc <_puts_r+0x10>
 80068b8:	f7ff ffc2 	bl	8006840 <__sinit>
 80068bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068be:	07db      	lsls	r3, r3, #31
 80068c0:	d405      	bmi.n	80068ce <_puts_r+0x22>
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	0598      	lsls	r0, r3, #22
 80068c6:	d402      	bmi.n	80068ce <_puts_r+0x22>
 80068c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068ca:	f000 f996 	bl	8006bfa <__retarget_lock_acquire_recursive>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	0719      	lsls	r1, r3, #28
 80068d2:	d502      	bpl.n	80068da <_puts_r+0x2e>
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d135      	bne.n	8006946 <_puts_r+0x9a>
 80068da:	4621      	mov	r1, r4
 80068dc:	4628      	mov	r0, r5
 80068de:	f000 f8c5 	bl	8006a6c <__swsetup_r>
 80068e2:	b380      	cbz	r0, 8006946 <_puts_r+0x9a>
 80068e4:	f04f 35ff 	mov.w	r5, #4294967295
 80068e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068ea:	07da      	lsls	r2, r3, #31
 80068ec:	d405      	bmi.n	80068fa <_puts_r+0x4e>
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	059b      	lsls	r3, r3, #22
 80068f2:	d402      	bmi.n	80068fa <_puts_r+0x4e>
 80068f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068f6:	f000 f981 	bl	8006bfc <__retarget_lock_release_recursive>
 80068fa:	4628      	mov	r0, r5
 80068fc:	bd70      	pop	{r4, r5, r6, pc}
 80068fe:	2b00      	cmp	r3, #0
 8006900:	da04      	bge.n	800690c <_puts_r+0x60>
 8006902:	69a2      	ldr	r2, [r4, #24]
 8006904:	429a      	cmp	r2, r3
 8006906:	dc17      	bgt.n	8006938 <_puts_r+0x8c>
 8006908:	290a      	cmp	r1, #10
 800690a:	d015      	beq.n	8006938 <_puts_r+0x8c>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	6022      	str	r2, [r4, #0]
 8006912:	7019      	strb	r1, [r3, #0]
 8006914:	68a3      	ldr	r3, [r4, #8]
 8006916:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800691a:	3b01      	subs	r3, #1
 800691c:	60a3      	str	r3, [r4, #8]
 800691e:	2900      	cmp	r1, #0
 8006920:	d1ed      	bne.n	80068fe <_puts_r+0x52>
 8006922:	2b00      	cmp	r3, #0
 8006924:	da11      	bge.n	800694a <_puts_r+0x9e>
 8006926:	4622      	mov	r2, r4
 8006928:	210a      	movs	r1, #10
 800692a:	4628      	mov	r0, r5
 800692c:	f000 f85f 	bl	80069ee <__swbuf_r>
 8006930:	3001      	adds	r0, #1
 8006932:	d0d7      	beq.n	80068e4 <_puts_r+0x38>
 8006934:	250a      	movs	r5, #10
 8006936:	e7d7      	b.n	80068e8 <_puts_r+0x3c>
 8006938:	4622      	mov	r2, r4
 800693a:	4628      	mov	r0, r5
 800693c:	f000 f857 	bl	80069ee <__swbuf_r>
 8006940:	3001      	adds	r0, #1
 8006942:	d1e7      	bne.n	8006914 <_puts_r+0x68>
 8006944:	e7ce      	b.n	80068e4 <_puts_r+0x38>
 8006946:	3e01      	subs	r6, #1
 8006948:	e7e4      	b.n	8006914 <_puts_r+0x68>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	6022      	str	r2, [r4, #0]
 8006950:	220a      	movs	r2, #10
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	e7ee      	b.n	8006934 <_puts_r+0x88>
	...

08006958 <puts>:
 8006958:	4b02      	ldr	r3, [pc, #8]	@ (8006964 <puts+0xc>)
 800695a:	4601      	mov	r1, r0
 800695c:	6818      	ldr	r0, [r3, #0]
 800695e:	f7ff bfa5 	b.w	80068ac <_puts_r>
 8006962:	bf00      	nop
 8006964:	2000001c 	.word	0x2000001c

08006968 <__sread>:
 8006968:	b510      	push	{r4, lr}
 800696a:	460c      	mov	r4, r1
 800696c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006970:	f000 f90c 	bl	8006b8c <_read_r>
 8006974:	2800      	cmp	r0, #0
 8006976:	bfab      	itete	ge
 8006978:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800697a:	89a3      	ldrhlt	r3, [r4, #12]
 800697c:	181b      	addge	r3, r3, r0
 800697e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006982:	bfac      	ite	ge
 8006984:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006986:	81a3      	strhlt	r3, [r4, #12]
 8006988:	bd10      	pop	{r4, pc}

0800698a <__swrite>:
 800698a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800698e:	461f      	mov	r7, r3
 8006990:	898b      	ldrh	r3, [r1, #12]
 8006992:	05db      	lsls	r3, r3, #23
 8006994:	4605      	mov	r5, r0
 8006996:	460c      	mov	r4, r1
 8006998:	4616      	mov	r6, r2
 800699a:	d505      	bpl.n	80069a8 <__swrite+0x1e>
 800699c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a0:	2302      	movs	r3, #2
 80069a2:	2200      	movs	r2, #0
 80069a4:	f000 f8e0 	bl	8006b68 <_lseek_r>
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069b2:	81a3      	strh	r3, [r4, #12]
 80069b4:	4632      	mov	r2, r6
 80069b6:	463b      	mov	r3, r7
 80069b8:	4628      	mov	r0, r5
 80069ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069be:	f7ff bea1 	b.w	8006704 <_write_r>

080069c2 <__sseek>:
 80069c2:	b510      	push	{r4, lr}
 80069c4:	460c      	mov	r4, r1
 80069c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ca:	f000 f8cd 	bl	8006b68 <_lseek_r>
 80069ce:	1c43      	adds	r3, r0, #1
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	bf15      	itete	ne
 80069d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069de:	81a3      	strheq	r3, [r4, #12]
 80069e0:	bf18      	it	ne
 80069e2:	81a3      	strhne	r3, [r4, #12]
 80069e4:	bd10      	pop	{r4, pc}

080069e6 <__sclose>:
 80069e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ea:	f000 b8ad 	b.w	8006b48 <_close_r>

080069ee <__swbuf_r>:
 80069ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f0:	460e      	mov	r6, r1
 80069f2:	4614      	mov	r4, r2
 80069f4:	4605      	mov	r5, r0
 80069f6:	b118      	cbz	r0, 8006a00 <__swbuf_r+0x12>
 80069f8:	6a03      	ldr	r3, [r0, #32]
 80069fa:	b90b      	cbnz	r3, 8006a00 <__swbuf_r+0x12>
 80069fc:	f7ff ff20 	bl	8006840 <__sinit>
 8006a00:	69a3      	ldr	r3, [r4, #24]
 8006a02:	60a3      	str	r3, [r4, #8]
 8006a04:	89a3      	ldrh	r3, [r4, #12]
 8006a06:	071a      	lsls	r2, r3, #28
 8006a08:	d501      	bpl.n	8006a0e <__swbuf_r+0x20>
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	b943      	cbnz	r3, 8006a20 <__swbuf_r+0x32>
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4628      	mov	r0, r5
 8006a12:	f000 f82b 	bl	8006a6c <__swsetup_r>
 8006a16:	b118      	cbz	r0, 8006a20 <__swbuf_r+0x32>
 8006a18:	f04f 37ff 	mov.w	r7, #4294967295
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	6922      	ldr	r2, [r4, #16]
 8006a24:	1a98      	subs	r0, r3, r2
 8006a26:	6963      	ldr	r3, [r4, #20]
 8006a28:	b2f6      	uxtb	r6, r6
 8006a2a:	4283      	cmp	r3, r0
 8006a2c:	4637      	mov	r7, r6
 8006a2e:	dc05      	bgt.n	8006a3c <__swbuf_r+0x4e>
 8006a30:	4621      	mov	r1, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 fa6e 	bl	8006f14 <_fflush_r>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d1ed      	bne.n	8006a18 <__swbuf_r+0x2a>
 8006a3c:	68a3      	ldr	r3, [r4, #8]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	60a3      	str	r3, [r4, #8]
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	6022      	str	r2, [r4, #0]
 8006a48:	701e      	strb	r6, [r3, #0]
 8006a4a:	6962      	ldr	r2, [r4, #20]
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d004      	beq.n	8006a5c <__swbuf_r+0x6e>
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	07db      	lsls	r3, r3, #31
 8006a56:	d5e1      	bpl.n	8006a1c <__swbuf_r+0x2e>
 8006a58:	2e0a      	cmp	r6, #10
 8006a5a:	d1df      	bne.n	8006a1c <__swbuf_r+0x2e>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 fa58 	bl	8006f14 <_fflush_r>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d0d9      	beq.n	8006a1c <__swbuf_r+0x2e>
 8006a68:	e7d6      	b.n	8006a18 <__swbuf_r+0x2a>
	...

08006a6c <__swsetup_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4b29      	ldr	r3, [pc, #164]	@ (8006b14 <__swsetup_r+0xa8>)
 8006a70:	4605      	mov	r5, r0
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	460c      	mov	r4, r1
 8006a76:	b118      	cbz	r0, 8006a80 <__swsetup_r+0x14>
 8006a78:	6a03      	ldr	r3, [r0, #32]
 8006a7a:	b90b      	cbnz	r3, 8006a80 <__swsetup_r+0x14>
 8006a7c:	f7ff fee0 	bl	8006840 <__sinit>
 8006a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a84:	0719      	lsls	r1, r3, #28
 8006a86:	d422      	bmi.n	8006ace <__swsetup_r+0x62>
 8006a88:	06da      	lsls	r2, r3, #27
 8006a8a:	d407      	bmi.n	8006a9c <__swsetup_r+0x30>
 8006a8c:	2209      	movs	r2, #9
 8006a8e:	602a      	str	r2, [r5, #0]
 8006a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9a:	e033      	b.n	8006b04 <__swsetup_r+0x98>
 8006a9c:	0758      	lsls	r0, r3, #29
 8006a9e:	d512      	bpl.n	8006ac6 <__swsetup_r+0x5a>
 8006aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006aa2:	b141      	cbz	r1, 8006ab6 <__swsetup_r+0x4a>
 8006aa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006aa8:	4299      	cmp	r1, r3
 8006aaa:	d002      	beq.n	8006ab2 <__swsetup_r+0x46>
 8006aac:	4628      	mov	r0, r5
 8006aae:	f000 f8b5 	bl	8006c1c <_free_r>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006abc:	81a3      	strh	r3, [r4, #12]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	6063      	str	r3, [r4, #4]
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	f043 0308 	orr.w	r3, r3, #8
 8006acc:	81a3      	strh	r3, [r4, #12]
 8006ace:	6923      	ldr	r3, [r4, #16]
 8006ad0:	b94b      	cbnz	r3, 8006ae6 <__swsetup_r+0x7a>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006adc:	d003      	beq.n	8006ae6 <__swsetup_r+0x7a>
 8006ade:	4621      	mov	r1, r4
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f000 fa65 	bl	8006fb0 <__smakebuf_r>
 8006ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aea:	f013 0201 	ands.w	r2, r3, #1
 8006aee:	d00a      	beq.n	8006b06 <__swsetup_r+0x9a>
 8006af0:	2200      	movs	r2, #0
 8006af2:	60a2      	str	r2, [r4, #8]
 8006af4:	6962      	ldr	r2, [r4, #20]
 8006af6:	4252      	negs	r2, r2
 8006af8:	61a2      	str	r2, [r4, #24]
 8006afa:	6922      	ldr	r2, [r4, #16]
 8006afc:	b942      	cbnz	r2, 8006b10 <__swsetup_r+0xa4>
 8006afe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b02:	d1c5      	bne.n	8006a90 <__swsetup_r+0x24>
 8006b04:	bd38      	pop	{r3, r4, r5, pc}
 8006b06:	0799      	lsls	r1, r3, #30
 8006b08:	bf58      	it	pl
 8006b0a:	6962      	ldrpl	r2, [r4, #20]
 8006b0c:	60a2      	str	r2, [r4, #8]
 8006b0e:	e7f4      	b.n	8006afa <__swsetup_r+0x8e>
 8006b10:	2000      	movs	r0, #0
 8006b12:	e7f7      	b.n	8006b04 <__swsetup_r+0x98>
 8006b14:	2000001c 	.word	0x2000001c

08006b18 <memcmp>:
 8006b18:	b510      	push	{r4, lr}
 8006b1a:	3901      	subs	r1, #1
 8006b1c:	4402      	add	r2, r0
 8006b1e:	4290      	cmp	r0, r2
 8006b20:	d101      	bne.n	8006b26 <memcmp+0xe>
 8006b22:	2000      	movs	r0, #0
 8006b24:	e005      	b.n	8006b32 <memcmp+0x1a>
 8006b26:	7803      	ldrb	r3, [r0, #0]
 8006b28:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006b2c:	42a3      	cmp	r3, r4
 8006b2e:	d001      	beq.n	8006b34 <memcmp+0x1c>
 8006b30:	1b18      	subs	r0, r3, r4
 8006b32:	bd10      	pop	{r4, pc}
 8006b34:	3001      	adds	r0, #1
 8006b36:	e7f2      	b.n	8006b1e <memcmp+0x6>

08006b38 <memset>:
 8006b38:	4402      	add	r2, r0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d100      	bne.n	8006b42 <memset+0xa>
 8006b40:	4770      	bx	lr
 8006b42:	f803 1b01 	strb.w	r1, [r3], #1
 8006b46:	e7f9      	b.n	8006b3c <memset+0x4>

08006b48 <_close_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d06      	ldr	r5, [pc, #24]	@ (8006b64 <_close_r+0x1c>)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4608      	mov	r0, r1
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	f7f9 ffa9 	bl	8000aaa <_close>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_close_r+0x1a>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_close_r+0x1a>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	20014630 	.word	0x20014630

08006b68 <_lseek_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d07      	ldr	r5, [pc, #28]	@ (8006b88 <_lseek_r+0x20>)
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4611      	mov	r1, r2
 8006b72:	2200      	movs	r2, #0
 8006b74:	602a      	str	r2, [r5, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f7f9 ffbe 	bl	8000af8 <_lseek>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_lseek_r+0x1e>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_lseek_r+0x1e>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	20014630 	.word	0x20014630

08006b8c <_read_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d07      	ldr	r5, [pc, #28]	@ (8006bac <_read_r+0x20>)
 8006b90:	4604      	mov	r4, r0
 8006b92:	4608      	mov	r0, r1
 8006b94:	4611      	mov	r1, r2
 8006b96:	2200      	movs	r2, #0
 8006b98:	602a      	str	r2, [r5, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f7f9 ff68 	bl	8000a70 <_read>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_read_r+0x1e>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_read_r+0x1e>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	20014630 	.word	0x20014630

08006bb0 <__libc_init_array>:
 8006bb0:	b570      	push	{r4, r5, r6, lr}
 8006bb2:	4d0d      	ldr	r5, [pc, #52]	@ (8006be8 <__libc_init_array+0x38>)
 8006bb4:	4c0d      	ldr	r4, [pc, #52]	@ (8006bec <__libc_init_array+0x3c>)
 8006bb6:	1b64      	subs	r4, r4, r5
 8006bb8:	10a4      	asrs	r4, r4, #2
 8006bba:	2600      	movs	r6, #0
 8006bbc:	42a6      	cmp	r6, r4
 8006bbe:	d109      	bne.n	8006bd4 <__libc_init_array+0x24>
 8006bc0:	4d0b      	ldr	r5, [pc, #44]	@ (8006bf0 <__libc_init_array+0x40>)
 8006bc2:	4c0c      	ldr	r4, [pc, #48]	@ (8006bf4 <__libc_init_array+0x44>)
 8006bc4:	f000 fa70 	bl	80070a8 <_init>
 8006bc8:	1b64      	subs	r4, r4, r5
 8006bca:	10a4      	asrs	r4, r4, #2
 8006bcc:	2600      	movs	r6, #0
 8006bce:	42a6      	cmp	r6, r4
 8006bd0:	d105      	bne.n	8006bde <__libc_init_array+0x2e>
 8006bd2:	bd70      	pop	{r4, r5, r6, pc}
 8006bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bd8:	4798      	blx	r3
 8006bda:	3601      	adds	r6, #1
 8006bdc:	e7ee      	b.n	8006bbc <__libc_init_array+0xc>
 8006bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be2:	4798      	blx	r3
 8006be4:	3601      	adds	r6, #1
 8006be6:	e7f2      	b.n	8006bce <__libc_init_array+0x1e>
 8006be8:	08007228 	.word	0x08007228
 8006bec:	08007228 	.word	0x08007228
 8006bf0:	08007228 	.word	0x08007228
 8006bf4:	0800722c 	.word	0x0800722c

08006bf8 <__retarget_lock_init_recursive>:
 8006bf8:	4770      	bx	lr

08006bfa <__retarget_lock_acquire_recursive>:
 8006bfa:	4770      	bx	lr

08006bfc <__retarget_lock_release_recursive>:
 8006bfc:	4770      	bx	lr

08006bfe <memcpy>:
 8006bfe:	440a      	add	r2, r1
 8006c00:	4291      	cmp	r1, r2
 8006c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c06:	d100      	bne.n	8006c0a <memcpy+0xc>
 8006c08:	4770      	bx	lr
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c14:	4291      	cmp	r1, r2
 8006c16:	d1f9      	bne.n	8006c0c <memcpy+0xe>
 8006c18:	bd10      	pop	{r4, pc}
	...

08006c1c <_free_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4605      	mov	r5, r0
 8006c20:	2900      	cmp	r1, #0
 8006c22:	d041      	beq.n	8006ca8 <_free_r+0x8c>
 8006c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c28:	1f0c      	subs	r4, r1, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bfb8      	it	lt
 8006c2e:	18e4      	addlt	r4, r4, r3
 8006c30:	f000 f8e0 	bl	8006df4 <__malloc_lock>
 8006c34:	4a1d      	ldr	r2, [pc, #116]	@ (8006cac <_free_r+0x90>)
 8006c36:	6813      	ldr	r3, [r2, #0]
 8006c38:	b933      	cbnz	r3, 8006c48 <_free_r+0x2c>
 8006c3a:	6063      	str	r3, [r4, #4]
 8006c3c:	6014      	str	r4, [r2, #0]
 8006c3e:	4628      	mov	r0, r5
 8006c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c44:	f000 b8dc 	b.w	8006e00 <__malloc_unlock>
 8006c48:	42a3      	cmp	r3, r4
 8006c4a:	d908      	bls.n	8006c5e <_free_r+0x42>
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	1821      	adds	r1, r4, r0
 8006c50:	428b      	cmp	r3, r1
 8006c52:	bf01      	itttt	eq
 8006c54:	6819      	ldreq	r1, [r3, #0]
 8006c56:	685b      	ldreq	r3, [r3, #4]
 8006c58:	1809      	addeq	r1, r1, r0
 8006c5a:	6021      	streq	r1, [r4, #0]
 8006c5c:	e7ed      	b.n	8006c3a <_free_r+0x1e>
 8006c5e:	461a      	mov	r2, r3
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	b10b      	cbz	r3, 8006c68 <_free_r+0x4c>
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	d9fa      	bls.n	8006c5e <_free_r+0x42>
 8006c68:	6811      	ldr	r1, [r2, #0]
 8006c6a:	1850      	adds	r0, r2, r1
 8006c6c:	42a0      	cmp	r0, r4
 8006c6e:	d10b      	bne.n	8006c88 <_free_r+0x6c>
 8006c70:	6820      	ldr	r0, [r4, #0]
 8006c72:	4401      	add	r1, r0
 8006c74:	1850      	adds	r0, r2, r1
 8006c76:	4283      	cmp	r3, r0
 8006c78:	6011      	str	r1, [r2, #0]
 8006c7a:	d1e0      	bne.n	8006c3e <_free_r+0x22>
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	6053      	str	r3, [r2, #4]
 8006c82:	4408      	add	r0, r1
 8006c84:	6010      	str	r0, [r2, #0]
 8006c86:	e7da      	b.n	8006c3e <_free_r+0x22>
 8006c88:	d902      	bls.n	8006c90 <_free_r+0x74>
 8006c8a:	230c      	movs	r3, #12
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	e7d6      	b.n	8006c3e <_free_r+0x22>
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	1821      	adds	r1, r4, r0
 8006c94:	428b      	cmp	r3, r1
 8006c96:	bf04      	itt	eq
 8006c98:	6819      	ldreq	r1, [r3, #0]
 8006c9a:	685b      	ldreq	r3, [r3, #4]
 8006c9c:	6063      	str	r3, [r4, #4]
 8006c9e:	bf04      	itt	eq
 8006ca0:	1809      	addeq	r1, r1, r0
 8006ca2:	6021      	streq	r1, [r4, #0]
 8006ca4:	6054      	str	r4, [r2, #4]
 8006ca6:	e7ca      	b.n	8006c3e <_free_r+0x22>
 8006ca8:	bd38      	pop	{r3, r4, r5, pc}
 8006caa:	bf00      	nop
 8006cac:	2001463c 	.word	0x2001463c

08006cb0 <sbrk_aligned>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	4e0f      	ldr	r6, [pc, #60]	@ (8006cf0 <sbrk_aligned+0x40>)
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	6831      	ldr	r1, [r6, #0]
 8006cb8:	4605      	mov	r5, r0
 8006cba:	b911      	cbnz	r1, 8006cc2 <sbrk_aligned+0x12>
 8006cbc:	f000 f9d6 	bl	800706c <_sbrk_r>
 8006cc0:	6030      	str	r0, [r6, #0]
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	f000 f9d1 	bl	800706c <_sbrk_r>
 8006cca:	1c43      	adds	r3, r0, #1
 8006ccc:	d103      	bne.n	8006cd6 <sbrk_aligned+0x26>
 8006cce:	f04f 34ff 	mov.w	r4, #4294967295
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	bd70      	pop	{r4, r5, r6, pc}
 8006cd6:	1cc4      	adds	r4, r0, #3
 8006cd8:	f024 0403 	bic.w	r4, r4, #3
 8006cdc:	42a0      	cmp	r0, r4
 8006cde:	d0f8      	beq.n	8006cd2 <sbrk_aligned+0x22>
 8006ce0:	1a21      	subs	r1, r4, r0
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f000 f9c2 	bl	800706c <_sbrk_r>
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d1f2      	bne.n	8006cd2 <sbrk_aligned+0x22>
 8006cec:	e7ef      	b.n	8006cce <sbrk_aligned+0x1e>
 8006cee:	bf00      	nop
 8006cf0:	20014638 	.word	0x20014638

08006cf4 <_malloc_r>:
 8006cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cf8:	1ccd      	adds	r5, r1, #3
 8006cfa:	f025 0503 	bic.w	r5, r5, #3
 8006cfe:	3508      	adds	r5, #8
 8006d00:	2d0c      	cmp	r5, #12
 8006d02:	bf38      	it	cc
 8006d04:	250c      	movcc	r5, #12
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	4606      	mov	r6, r0
 8006d0a:	db01      	blt.n	8006d10 <_malloc_r+0x1c>
 8006d0c:	42a9      	cmp	r1, r5
 8006d0e:	d904      	bls.n	8006d1a <_malloc_r+0x26>
 8006d10:	230c      	movs	r3, #12
 8006d12:	6033      	str	r3, [r6, #0]
 8006d14:	2000      	movs	r0, #0
 8006d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006df0 <_malloc_r+0xfc>
 8006d1e:	f000 f869 	bl	8006df4 <__malloc_lock>
 8006d22:	f8d8 3000 	ldr.w	r3, [r8]
 8006d26:	461c      	mov	r4, r3
 8006d28:	bb44      	cbnz	r4, 8006d7c <_malloc_r+0x88>
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f7ff ffbf 	bl	8006cb0 <sbrk_aligned>
 8006d32:	1c43      	adds	r3, r0, #1
 8006d34:	4604      	mov	r4, r0
 8006d36:	d158      	bne.n	8006dea <_malloc_r+0xf6>
 8006d38:	f8d8 4000 	ldr.w	r4, [r8]
 8006d3c:	4627      	mov	r7, r4
 8006d3e:	2f00      	cmp	r7, #0
 8006d40:	d143      	bne.n	8006dca <_malloc_r+0xd6>
 8006d42:	2c00      	cmp	r4, #0
 8006d44:	d04b      	beq.n	8006dde <_malloc_r+0xea>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	4639      	mov	r1, r7
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	eb04 0903 	add.w	r9, r4, r3
 8006d50:	f000 f98c 	bl	800706c <_sbrk_r>
 8006d54:	4581      	cmp	r9, r0
 8006d56:	d142      	bne.n	8006dde <_malloc_r+0xea>
 8006d58:	6821      	ldr	r1, [r4, #0]
 8006d5a:	1a6d      	subs	r5, r5, r1
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	4630      	mov	r0, r6
 8006d60:	f7ff ffa6 	bl	8006cb0 <sbrk_aligned>
 8006d64:	3001      	adds	r0, #1
 8006d66:	d03a      	beq.n	8006dde <_malloc_r+0xea>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	442b      	add	r3, r5
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	bb62      	cbnz	r2, 8006dd0 <_malloc_r+0xdc>
 8006d76:	f8c8 7000 	str.w	r7, [r8]
 8006d7a:	e00f      	b.n	8006d9c <_malloc_r+0xa8>
 8006d7c:	6822      	ldr	r2, [r4, #0]
 8006d7e:	1b52      	subs	r2, r2, r5
 8006d80:	d420      	bmi.n	8006dc4 <_malloc_r+0xd0>
 8006d82:	2a0b      	cmp	r2, #11
 8006d84:	d917      	bls.n	8006db6 <_malloc_r+0xc2>
 8006d86:	1961      	adds	r1, r4, r5
 8006d88:	42a3      	cmp	r3, r4
 8006d8a:	6025      	str	r5, [r4, #0]
 8006d8c:	bf18      	it	ne
 8006d8e:	6059      	strne	r1, [r3, #4]
 8006d90:	6863      	ldr	r3, [r4, #4]
 8006d92:	bf08      	it	eq
 8006d94:	f8c8 1000 	streq.w	r1, [r8]
 8006d98:	5162      	str	r2, [r4, r5]
 8006d9a:	604b      	str	r3, [r1, #4]
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f000 f82f 	bl	8006e00 <__malloc_unlock>
 8006da2:	f104 000b 	add.w	r0, r4, #11
 8006da6:	1d23      	adds	r3, r4, #4
 8006da8:	f020 0007 	bic.w	r0, r0, #7
 8006dac:	1ac2      	subs	r2, r0, r3
 8006dae:	bf1c      	itt	ne
 8006db0:	1a1b      	subne	r3, r3, r0
 8006db2:	50a3      	strne	r3, [r4, r2]
 8006db4:	e7af      	b.n	8006d16 <_malloc_r+0x22>
 8006db6:	6862      	ldr	r2, [r4, #4]
 8006db8:	42a3      	cmp	r3, r4
 8006dba:	bf0c      	ite	eq
 8006dbc:	f8c8 2000 	streq.w	r2, [r8]
 8006dc0:	605a      	strne	r2, [r3, #4]
 8006dc2:	e7eb      	b.n	8006d9c <_malloc_r+0xa8>
 8006dc4:	4623      	mov	r3, r4
 8006dc6:	6864      	ldr	r4, [r4, #4]
 8006dc8:	e7ae      	b.n	8006d28 <_malloc_r+0x34>
 8006dca:	463c      	mov	r4, r7
 8006dcc:	687f      	ldr	r7, [r7, #4]
 8006dce:	e7b6      	b.n	8006d3e <_malloc_r+0x4a>
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	d1fb      	bne.n	8006dd0 <_malloc_r+0xdc>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	6053      	str	r3, [r2, #4]
 8006ddc:	e7de      	b.n	8006d9c <_malloc_r+0xa8>
 8006dde:	230c      	movs	r3, #12
 8006de0:	6033      	str	r3, [r6, #0]
 8006de2:	4630      	mov	r0, r6
 8006de4:	f000 f80c 	bl	8006e00 <__malloc_unlock>
 8006de8:	e794      	b.n	8006d14 <_malloc_r+0x20>
 8006dea:	6005      	str	r5, [r0, #0]
 8006dec:	e7d6      	b.n	8006d9c <_malloc_r+0xa8>
 8006dee:	bf00      	nop
 8006df0:	2001463c 	.word	0x2001463c

08006df4 <__malloc_lock>:
 8006df4:	4801      	ldr	r0, [pc, #4]	@ (8006dfc <__malloc_lock+0x8>)
 8006df6:	f7ff bf00 	b.w	8006bfa <__retarget_lock_acquire_recursive>
 8006dfa:	bf00      	nop
 8006dfc:	20014634 	.word	0x20014634

08006e00 <__malloc_unlock>:
 8006e00:	4801      	ldr	r0, [pc, #4]	@ (8006e08 <__malloc_unlock+0x8>)
 8006e02:	f7ff befb 	b.w	8006bfc <__retarget_lock_release_recursive>
 8006e06:	bf00      	nop
 8006e08:	20014634 	.word	0x20014634

08006e0c <__sflush_r>:
 8006e0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e14:	0716      	lsls	r6, r2, #28
 8006e16:	4605      	mov	r5, r0
 8006e18:	460c      	mov	r4, r1
 8006e1a:	d454      	bmi.n	8006ec6 <__sflush_r+0xba>
 8006e1c:	684b      	ldr	r3, [r1, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	dc02      	bgt.n	8006e28 <__sflush_r+0x1c>
 8006e22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	dd48      	ble.n	8006eba <__sflush_r+0xae>
 8006e28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e2a:	2e00      	cmp	r6, #0
 8006e2c:	d045      	beq.n	8006eba <__sflush_r+0xae>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e34:	682f      	ldr	r7, [r5, #0]
 8006e36:	6a21      	ldr	r1, [r4, #32]
 8006e38:	602b      	str	r3, [r5, #0]
 8006e3a:	d030      	beq.n	8006e9e <__sflush_r+0x92>
 8006e3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e3e:	89a3      	ldrh	r3, [r4, #12]
 8006e40:	0759      	lsls	r1, r3, #29
 8006e42:	d505      	bpl.n	8006e50 <__sflush_r+0x44>
 8006e44:	6863      	ldr	r3, [r4, #4]
 8006e46:	1ad2      	subs	r2, r2, r3
 8006e48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e4a:	b10b      	cbz	r3, 8006e50 <__sflush_r+0x44>
 8006e4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e54:	6a21      	ldr	r1, [r4, #32]
 8006e56:	4628      	mov	r0, r5
 8006e58:	47b0      	blx	r6
 8006e5a:	1c43      	adds	r3, r0, #1
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	d106      	bne.n	8006e6e <__sflush_r+0x62>
 8006e60:	6829      	ldr	r1, [r5, #0]
 8006e62:	291d      	cmp	r1, #29
 8006e64:	d82b      	bhi.n	8006ebe <__sflush_r+0xb2>
 8006e66:	4a2a      	ldr	r2, [pc, #168]	@ (8006f10 <__sflush_r+0x104>)
 8006e68:	40ca      	lsrs	r2, r1
 8006e6a:	07d6      	lsls	r6, r2, #31
 8006e6c:	d527      	bpl.n	8006ebe <__sflush_r+0xb2>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	6062      	str	r2, [r4, #4]
 8006e72:	04d9      	lsls	r1, r3, #19
 8006e74:	6922      	ldr	r2, [r4, #16]
 8006e76:	6022      	str	r2, [r4, #0]
 8006e78:	d504      	bpl.n	8006e84 <__sflush_r+0x78>
 8006e7a:	1c42      	adds	r2, r0, #1
 8006e7c:	d101      	bne.n	8006e82 <__sflush_r+0x76>
 8006e7e:	682b      	ldr	r3, [r5, #0]
 8006e80:	b903      	cbnz	r3, 8006e84 <__sflush_r+0x78>
 8006e82:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e86:	602f      	str	r7, [r5, #0]
 8006e88:	b1b9      	cbz	r1, 8006eba <__sflush_r+0xae>
 8006e8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e8e:	4299      	cmp	r1, r3
 8006e90:	d002      	beq.n	8006e98 <__sflush_r+0x8c>
 8006e92:	4628      	mov	r0, r5
 8006e94:	f7ff fec2 	bl	8006c1c <_free_r>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e9c:	e00d      	b.n	8006eba <__sflush_r+0xae>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b0      	blx	r6
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	1c50      	adds	r0, r2, #1
 8006ea8:	d1c9      	bne.n	8006e3e <__sflush_r+0x32>
 8006eaa:	682b      	ldr	r3, [r5, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d0c6      	beq.n	8006e3e <__sflush_r+0x32>
 8006eb0:	2b1d      	cmp	r3, #29
 8006eb2:	d001      	beq.n	8006eb8 <__sflush_r+0xac>
 8006eb4:	2b16      	cmp	r3, #22
 8006eb6:	d11e      	bne.n	8006ef6 <__sflush_r+0xea>
 8006eb8:	602f      	str	r7, [r5, #0]
 8006eba:	2000      	movs	r0, #0
 8006ebc:	e022      	b.n	8006f04 <__sflush_r+0xf8>
 8006ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ec2:	b21b      	sxth	r3, r3
 8006ec4:	e01b      	b.n	8006efe <__sflush_r+0xf2>
 8006ec6:	690f      	ldr	r7, [r1, #16]
 8006ec8:	2f00      	cmp	r7, #0
 8006eca:	d0f6      	beq.n	8006eba <__sflush_r+0xae>
 8006ecc:	0793      	lsls	r3, r2, #30
 8006ece:	680e      	ldr	r6, [r1, #0]
 8006ed0:	bf08      	it	eq
 8006ed2:	694b      	ldreq	r3, [r1, #20]
 8006ed4:	600f      	str	r7, [r1, #0]
 8006ed6:	bf18      	it	ne
 8006ed8:	2300      	movne	r3, #0
 8006eda:	eba6 0807 	sub.w	r8, r6, r7
 8006ede:	608b      	str	r3, [r1, #8]
 8006ee0:	f1b8 0f00 	cmp.w	r8, #0
 8006ee4:	dde9      	ble.n	8006eba <__sflush_r+0xae>
 8006ee6:	6a21      	ldr	r1, [r4, #32]
 8006ee8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006eea:	4643      	mov	r3, r8
 8006eec:	463a      	mov	r2, r7
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b0      	blx	r6
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	dc08      	bgt.n	8006f08 <__sflush_r+0xfc>
 8006ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	f04f 30ff 	mov.w	r0, #4294967295
 8006f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f08:	4407      	add	r7, r0
 8006f0a:	eba8 0800 	sub.w	r8, r8, r0
 8006f0e:	e7e7      	b.n	8006ee0 <__sflush_r+0xd4>
 8006f10:	20400001 	.word	0x20400001

08006f14 <_fflush_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	690b      	ldr	r3, [r1, #16]
 8006f18:	4605      	mov	r5, r0
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	b913      	cbnz	r3, 8006f24 <_fflush_r+0x10>
 8006f1e:	2500      	movs	r5, #0
 8006f20:	4628      	mov	r0, r5
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	b118      	cbz	r0, 8006f2e <_fflush_r+0x1a>
 8006f26:	6a03      	ldr	r3, [r0, #32]
 8006f28:	b90b      	cbnz	r3, 8006f2e <_fflush_r+0x1a>
 8006f2a:	f7ff fc89 	bl	8006840 <__sinit>
 8006f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0f3      	beq.n	8006f1e <_fflush_r+0xa>
 8006f36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f38:	07d0      	lsls	r0, r2, #31
 8006f3a:	d404      	bmi.n	8006f46 <_fflush_r+0x32>
 8006f3c:	0599      	lsls	r1, r3, #22
 8006f3e:	d402      	bmi.n	8006f46 <_fflush_r+0x32>
 8006f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f42:	f7ff fe5a 	bl	8006bfa <__retarget_lock_acquire_recursive>
 8006f46:	4628      	mov	r0, r5
 8006f48:	4621      	mov	r1, r4
 8006f4a:	f7ff ff5f 	bl	8006e0c <__sflush_r>
 8006f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f50:	07da      	lsls	r2, r3, #31
 8006f52:	4605      	mov	r5, r0
 8006f54:	d4e4      	bmi.n	8006f20 <_fflush_r+0xc>
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	059b      	lsls	r3, r3, #22
 8006f5a:	d4e1      	bmi.n	8006f20 <_fflush_r+0xc>
 8006f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f5e:	f7ff fe4d 	bl	8006bfc <__retarget_lock_release_recursive>
 8006f62:	e7dd      	b.n	8006f20 <_fflush_r+0xc>

08006f64 <__swhatbuf_r>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	460c      	mov	r4, r1
 8006f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f6c:	2900      	cmp	r1, #0
 8006f6e:	b096      	sub	sp, #88	@ 0x58
 8006f70:	4615      	mov	r5, r2
 8006f72:	461e      	mov	r6, r3
 8006f74:	da0d      	bge.n	8006f92 <__swhatbuf_r+0x2e>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f7c:	f04f 0100 	mov.w	r1, #0
 8006f80:	bf14      	ite	ne
 8006f82:	2340      	movne	r3, #64	@ 0x40
 8006f84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f88:	2000      	movs	r0, #0
 8006f8a:	6031      	str	r1, [r6, #0]
 8006f8c:	602b      	str	r3, [r5, #0]
 8006f8e:	b016      	add	sp, #88	@ 0x58
 8006f90:	bd70      	pop	{r4, r5, r6, pc}
 8006f92:	466a      	mov	r2, sp
 8006f94:	f000 f848 	bl	8007028 <_fstat_r>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	dbec      	blt.n	8006f76 <__swhatbuf_r+0x12>
 8006f9c:	9901      	ldr	r1, [sp, #4]
 8006f9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006fa6:	4259      	negs	r1, r3
 8006fa8:	4159      	adcs	r1, r3
 8006faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fae:	e7eb      	b.n	8006f88 <__swhatbuf_r+0x24>

08006fb0 <__smakebuf_r>:
 8006fb0:	898b      	ldrh	r3, [r1, #12]
 8006fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fb4:	079d      	lsls	r5, r3, #30
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460c      	mov	r4, r1
 8006fba:	d507      	bpl.n	8006fcc <__smakebuf_r+0x1c>
 8006fbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	6123      	str	r3, [r4, #16]
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	6163      	str	r3, [r4, #20]
 8006fc8:	b003      	add	sp, #12
 8006fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fcc:	ab01      	add	r3, sp, #4
 8006fce:	466a      	mov	r2, sp
 8006fd0:	f7ff ffc8 	bl	8006f64 <__swhatbuf_r>
 8006fd4:	9f00      	ldr	r7, [sp, #0]
 8006fd6:	4605      	mov	r5, r0
 8006fd8:	4639      	mov	r1, r7
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7ff fe8a 	bl	8006cf4 <_malloc_r>
 8006fe0:	b948      	cbnz	r0, 8006ff6 <__smakebuf_r+0x46>
 8006fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe6:	059a      	lsls	r2, r3, #22
 8006fe8:	d4ee      	bmi.n	8006fc8 <__smakebuf_r+0x18>
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	f043 0302 	orr.w	r3, r3, #2
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	e7e2      	b.n	8006fbc <__smakebuf_r+0xc>
 8006ff6:	89a3      	ldrh	r3, [r4, #12]
 8006ff8:	6020      	str	r0, [r4, #0]
 8006ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ffe:	81a3      	strh	r3, [r4, #12]
 8007000:	9b01      	ldr	r3, [sp, #4]
 8007002:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007006:	b15b      	cbz	r3, 8007020 <__smakebuf_r+0x70>
 8007008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800700c:	4630      	mov	r0, r6
 800700e:	f000 f81d 	bl	800704c <_isatty_r>
 8007012:	b128      	cbz	r0, 8007020 <__smakebuf_r+0x70>
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	f023 0303 	bic.w	r3, r3, #3
 800701a:	f043 0301 	orr.w	r3, r3, #1
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	431d      	orrs	r5, r3
 8007024:	81a5      	strh	r5, [r4, #12]
 8007026:	e7cf      	b.n	8006fc8 <__smakebuf_r+0x18>

08007028 <_fstat_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d07      	ldr	r5, [pc, #28]	@ (8007048 <_fstat_r+0x20>)
 800702c:	2300      	movs	r3, #0
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	602b      	str	r3, [r5, #0]
 8007036:	f7f9 fd44 	bl	8000ac2 <_fstat>
 800703a:	1c43      	adds	r3, r0, #1
 800703c:	d102      	bne.n	8007044 <_fstat_r+0x1c>
 800703e:	682b      	ldr	r3, [r5, #0]
 8007040:	b103      	cbz	r3, 8007044 <_fstat_r+0x1c>
 8007042:	6023      	str	r3, [r4, #0]
 8007044:	bd38      	pop	{r3, r4, r5, pc}
 8007046:	bf00      	nop
 8007048:	20014630 	.word	0x20014630

0800704c <_isatty_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4d06      	ldr	r5, [pc, #24]	@ (8007068 <_isatty_r+0x1c>)
 8007050:	2300      	movs	r3, #0
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	602b      	str	r3, [r5, #0]
 8007058:	f7f9 fd43 	bl	8000ae2 <_isatty>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_isatty_r+0x1a>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_isatty_r+0x1a>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	20014630 	.word	0x20014630

0800706c <_sbrk_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4d06      	ldr	r5, [pc, #24]	@ (8007088 <_sbrk_r+0x1c>)
 8007070:	2300      	movs	r3, #0
 8007072:	4604      	mov	r4, r0
 8007074:	4608      	mov	r0, r1
 8007076:	602b      	str	r3, [r5, #0]
 8007078:	f000 f808 	bl	800708c <_sbrk>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_sbrk_r+0x1a>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_sbrk_r+0x1a>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20014630 	.word	0x20014630

0800708c <_sbrk>:
 800708c:	4a04      	ldr	r2, [pc, #16]	@ (80070a0 <_sbrk+0x14>)
 800708e:	6811      	ldr	r1, [r2, #0]
 8007090:	4603      	mov	r3, r0
 8007092:	b909      	cbnz	r1, 8007098 <_sbrk+0xc>
 8007094:	4903      	ldr	r1, [pc, #12]	@ (80070a4 <_sbrk+0x18>)
 8007096:	6011      	str	r1, [r2, #0]
 8007098:	6810      	ldr	r0, [r2, #0]
 800709a:	4403      	add	r3, r0
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	4770      	bx	lr
 80070a0:	20014640 	.word	0x20014640
 80070a4:	20014648 	.word	0x20014648

080070a8 <_init>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	bf00      	nop
 80070ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ae:	bc08      	pop	{r3}
 80070b0:	469e      	mov	lr, r3
 80070b2:	4770      	bx	lr

080070b4 <_fini>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	bf00      	nop
 80070b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ba:	bc08      	pop	{r3}
 80070bc:	469e      	mov	lr, r3
 80070be:	4770      	bx	lr
